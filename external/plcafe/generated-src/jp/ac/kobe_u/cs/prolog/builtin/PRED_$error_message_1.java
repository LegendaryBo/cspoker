package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$error_message'/1</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$error_message_1 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("instantiation_error", 2);
    static IntegerTerm si2 = new IntegerTerm(0);
    static SymbolTerm s3 = SymbolTerm.makeSymbol("{INSTANTIATION ERROR: ");
    static SymbolTerm s4 = SymbolTerm.makeSymbol("}");
    static SymbolTerm s5 = SymbolTerm.makeSymbol(" - arg ");
    static SymbolTerm s6 = SymbolTerm.makeSymbol("type_error", 4);
    static SymbolTerm s7 = SymbolTerm.makeSymbol("{TYPE ERROR: ");
    static SymbolTerm s8 = SymbolTerm.makeSymbol(": expected ");
    static SymbolTerm s9 = SymbolTerm.makeSymbol(", found ");
    static SymbolTerm s10 = SymbolTerm.makeSymbol("domain_error", 4);
    static SymbolTerm s11 = SymbolTerm.makeSymbol("{DOMAIN ERROR: ");
    static SymbolTerm s12 = SymbolTerm.makeSymbol("existence_error", 5);
    static SymbolTerm s13 = SymbolTerm.makeSymbol("{EXISTENCE ERROR: ");
    static SymbolTerm s14 = SymbolTerm.makeSymbol(" ");
    static SymbolTerm s15 = SymbolTerm.makeSymbol(" does not exist");
    static SymbolTerm s16 = SymbolTerm.makeSymbol(": ");
    static SymbolTerm s17 = SymbolTerm.makeSymbol("permission_error", 5);
    static SymbolTerm s18 = SymbolTerm.makeSymbol("{PERMISSION ERROR: ");
    static SymbolTerm s19 = SymbolTerm.makeSymbol(" - can not ");
    static SymbolTerm s20 = SymbolTerm.makeSymbol("representation_error", 3);
    static SymbolTerm s21 = SymbolTerm.makeSymbol("{REPRESENTATION ERROR: ");
    static SymbolTerm s22 = SymbolTerm.makeSymbol(": limit of ");
    static SymbolTerm s23 = SymbolTerm.makeSymbol(" is breached");
    static SymbolTerm s24 = SymbolTerm.makeSymbol("evaluation_error", 3);
    static SymbolTerm s25 = SymbolTerm.makeSymbol("{EVALUATION ERROR: ");
    static SymbolTerm s26 = SymbolTerm.makeSymbol("syntax_error", 5);
    static SymbolTerm s27 = SymbolTerm.makeSymbol("{SYNTAX ERROR: ");
    static SymbolTerm s28 = SymbolTerm.makeSymbol("system_error", 1);
    static SymbolTerm s29 = SymbolTerm.makeSymbol("{SYSTEM ERROR: ");
    static SymbolTerm s30 = SymbolTerm.makeSymbol("internal_error", 1);
    static SymbolTerm s31 = SymbolTerm.makeSymbol("{INTERNAL ERROR: ");
    static SymbolTerm s32 = SymbolTerm.makeSymbol("java_error", 3);
    static SymbolTerm s33 = SymbolTerm.makeSymbol("{JAVA ERROR: ");
    static SymbolTerm s34 = SymbolTerm.makeSymbol("{");
    static Predicate _$error_message_1_var = new PRED_$error_message_1_var();
    static Predicate _$error_message_1_var_1 = new PRED_$error_message_1_var_1();
    static Predicate _$error_message_1_var_2 = new PRED_$error_message_1_var_2();
    static Predicate _$error_message_1_var_3 = new PRED_$error_message_1_var_3();
    static Predicate _$error_message_1_var_4 = new PRED_$error_message_1_var_4();
    static Predicate _$error_message_1_var_5 = new PRED_$error_message_1_var_5();
    static Predicate _$error_message_1_var_6 = new PRED_$error_message_1_var_6();
    static Predicate _$error_message_1_var_7 = new PRED_$error_message_1_var_7();
    static Predicate _$error_message_1_var_8 = new PRED_$error_message_1_var_8();
    static Predicate _$error_message_1_var_9 = new PRED_$error_message_1_var_9();
    static Predicate _$error_message_1_var_10 = new PRED_$error_message_1_var_10();
    static Predicate _$error_message_1_var_11 = new PRED_$error_message_1_var_11();
    static Predicate _$error_message_1_var_12 = new PRED_$error_message_1_var_12();
    static Predicate _$error_message_1_var_13 = new PRED_$error_message_1_var_13();
    static Predicate _$error_message_1_str = new PRED_$error_message_1_str();
    static Predicate _$error_message_1_str_0 = new PRED_$error_message_1_str_0();
    static Predicate _$error_message_1_str_0_1 = new PRED_$error_message_1_str_0_1();
    static Predicate _$error_message_1_str_0_2 = new PRED_$error_message_1_str_0_2();
    static Predicate _$error_message_1_str_1 = new PRED_$error_message_1_str_1();
    static Predicate _$error_message_1_str_1_1 = new PRED_$error_message_1_str_1_1();
    static Predicate _$error_message_1_str_2 = new PRED_$error_message_1_str_2();
    static Predicate _$error_message_1_str_2_1 = new PRED_$error_message_1_str_2_1();
    static Predicate _$error_message_1_str_3 = new PRED_$error_message_1_str_3();
    static Predicate _$error_message_1_str_3_1 = new PRED_$error_message_1_str_3_1();
    static Predicate _$error_message_1_str_3_2 = new PRED_$error_message_1_str_3_2();
    static Predicate _$error_message_1_str_4 = new PRED_$error_message_1_str_4();
    static Predicate _$error_message_1_str_4_1 = new PRED_$error_message_1_str_4_1();
    static Predicate _$error_message_1_str_5 = new PRED_$error_message_1_str_5();
    static Predicate _$error_message_1_str_5_1 = new PRED_$error_message_1_str_5_1();
    static Predicate _$error_message_1_str_6 = new PRED_$error_message_1_str_6();
    static Predicate _$error_message_1_str_6_1 = new PRED_$error_message_1_str_6_1();
    static Predicate _$error_message_1_str_7 = new PRED_$error_message_1_str_7();
    static Predicate _$error_message_1_str_7_1 = new PRED_$error_message_1_str_7_1();
    static Predicate _$error_message_1_str_8 = new PRED_$error_message_1_str_8();
    static Predicate _$error_message_1_str_8_1 = new PRED_$error_message_1_str_8_1();
    static Predicate _$error_message_1_str_9 = new PRED_$error_message_1_str_9();
    static Predicate _$error_message_1_str_9_1 = new PRED_$error_message_1_str_9_1();
    static Predicate _$error_message_1_str_10 = new PRED_$error_message_1_str_10();
    static Predicate _$error_message_1_str_10_1 = new PRED_$error_message_1_str_10_1();
    static Predicate _$error_message_1_1 = new PRED_$error_message_1_1();
    static Predicate _$error_message_1_2 = new PRED_$error_message_1_2();
    static Predicate _$error_message_1_3 = new PRED_$error_message_1_3();
    static Predicate _$error_message_1_4 = new PRED_$error_message_1_4();
    static Predicate _$error_message_1_5 = new PRED_$error_message_1_5();
    static Predicate _$error_message_1_6 = new PRED_$error_message_1_6();
    static Predicate _$error_message_1_7 = new PRED_$error_message_1_7();
    static Predicate _$error_message_1_8 = new PRED_$error_message_1_8();
    static Predicate _$error_message_1_9 = new PRED_$error_message_1_9();
    static Predicate _$error_message_1_10 = new PRED_$error_message_1_10();
    static Predicate _$error_message_1_11 = new PRED_$error_message_1_11();
    static Predicate _$error_message_1_12 = new PRED_$error_message_1_12();
    static Predicate _$error_message_1_13 = new PRED_$error_message_1_13();
    static Predicate _$error_message_1_14 = new PRED_$error_message_1_14();
    static java.util.Hashtable<Term, Predicate> str = new java.util.Hashtable<Term, Predicate>(11);
    static {
        str.put(s1, _$error_message_1_str_0);
        str.put(s6, _$error_message_1_str_1);
        str.put(s10, _$error_message_1_str_2);
        str.put(s12, _$error_message_1_str_3);
        str.put(s17, _$error_message_1_str_4);
        str.put(s20, _$error_message_1_str_5);
        str.put(s24, _$error_message_1_str_6);
        str.put(s26, _$error_message_1_str_7);
        str.put(s28, _$error_message_1_str_8);
        str.put(s30, _$error_message_1_str_9);
        str.put(s32, _$error_message_1_str_10);
    }

    public Term arg1;

    public PRED_$error_message_1(Term a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_$error_message_1(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String toString() {
        return "$error_message(" + arg1 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$error_message_1_var, _$error_message_1_14, _$error_message_1_14, _$error_message_1_14, _$error_message_1_str, _$error_message_1_14);
    }
}

class PRED_$error_message_1_var extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$error_message_1_1, _$error_message_1_var_1);
    }
}

class PRED_$error_message_1_var_1 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$error_message_1_2, _$error_message_1_var_2);
    }
}

class PRED_$error_message_1_var_2 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$error_message_1_3, _$error_message_1_var_3);
    }
}

class PRED_$error_message_1_var_3 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$error_message_1_4, _$error_message_1_var_4);
    }
}

class PRED_$error_message_1_var_4 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$error_message_1_5, _$error_message_1_var_5);
    }
}

class PRED_$error_message_1_var_5 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$error_message_1_6, _$error_message_1_var_6);
    }
}

class PRED_$error_message_1_var_6 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$error_message_1_7, _$error_message_1_var_7);
    }
}

class PRED_$error_message_1_var_7 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$error_message_1_8, _$error_message_1_var_8);
    }
}

class PRED_$error_message_1_var_8 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$error_message_1_9, _$error_message_1_var_9);
    }
}

class PRED_$error_message_1_var_9 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$error_message_1_10, _$error_message_1_var_10);
    }
}

class PRED_$error_message_1_var_10 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$error_message_1_11, _$error_message_1_var_11);
    }
}

class PRED_$error_message_1_var_11 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$error_message_1_12, _$error_message_1_var_12);
    }
}

class PRED_$error_message_1_var_12 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$error_message_1_13, _$error_message_1_var_13);
    }
}

class PRED_$error_message_1_var_13 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$error_message_1_14);
    }
}

class PRED_$error_message_1_str extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
        return engine.switch_on_hash(str, _$error_message_1_14);
    }
}

class PRED_$error_message_1_str_0 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$error_message_1_1, _$error_message_1_str_0_1);
    }
}

class PRED_$error_message_1_str_0_1 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$error_message_1_2, _$error_message_1_str_0_2);
    }
}

class PRED_$error_message_1_str_0_2 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$error_message_1_14);
    }
}

class PRED_$error_message_1_str_1 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$error_message_1_3, _$error_message_1_str_1_1);
    }
}

class PRED_$error_message_1_str_1_1 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$error_message_1_14);
    }
}

class PRED_$error_message_1_str_2 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$error_message_1_4, _$error_message_1_str_2_1);
    }
}

class PRED_$error_message_1_str_2_1 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$error_message_1_14);
    }
}

class PRED_$error_message_1_str_3 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$error_message_1_5, _$error_message_1_str_3_1);
    }
}

class PRED_$error_message_1_str_3_1 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$error_message_1_6, _$error_message_1_str_3_2);
    }
}

class PRED_$error_message_1_str_3_2 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$error_message_1_14);
    }
}

class PRED_$error_message_1_str_4 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$error_message_1_7, _$error_message_1_str_4_1);
    }
}

class PRED_$error_message_1_str_4_1 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$error_message_1_14);
    }
}

class PRED_$error_message_1_str_5 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$error_message_1_8, _$error_message_1_str_5_1);
    }
}

class PRED_$error_message_1_str_5_1 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$error_message_1_14);
    }
}

class PRED_$error_message_1_str_6 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$error_message_1_9, _$error_message_1_str_6_1);
    }
}

class PRED_$error_message_1_str_6_1 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$error_message_1_14);
    }
}

class PRED_$error_message_1_str_7 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$error_message_1_10, _$error_message_1_str_7_1);
    }
}

class PRED_$error_message_1_str_7_1 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$error_message_1_14);
    }
}

class PRED_$error_message_1_str_8 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$error_message_1_11, _$error_message_1_str_8_1);
    }
}

class PRED_$error_message_1_str_8_1 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$error_message_1_14);
    }
}

class PRED_$error_message_1_str_9 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$error_message_1_12, _$error_message_1_str_9_1);
    }
}

class PRED_$error_message_1_str_9_1 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$error_message_1_14);
    }
}

class PRED_$error_message_1_str_10 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$error_message_1_13, _$error_message_1_str_10_1);
    }
}

class PRED_$error_message_1_str_10_1 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$error_message_1_14);
    }
}

class PRED_$error_message_1_1 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
    // '$error_message'(instantiation_error(A,0)):-!,'$fast_write'('{INSTANTIATION ERROR: '),'$write_goal'(A),'$fast_write'('}'),nl
        Term a1, a2;
        Predicate p1, p2, p3;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$error_message'(instantiation_error(A,0)):-['$neck_cut','$fast_write'('{INSTANTIATION ERROR: '),'$write_goal'(A),'$fast_write'('}'),nl]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s1.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a2 = args[0];
            if (! si2.unify(args[1], engine.trail))
                return engine.fail();
        } else if (a1.isVariable()){
            a2 = new VariableTerm(engine);
            Term[] args = {a2, si2};
            ((VariableTerm) a1).bind(new StructureTerm(s1, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_nl_0(cont);
        p2 = new PRED_$fast_write_1(s4, p1);
        p3 = new PRED_$write_goal_1(a2, p2);
        return new PRED_$fast_write_1(s3, p3);
    }
}

class PRED_$error_message_1_2 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
    // '$error_message'(instantiation_error(A,B)):-!,'$fast_write'('{INSTANTIATION ERROR: '),'$write_goal'(A),'$fast_write'(' - arg '),'$fast_write'(B),'$fast_write'('}'),nl
        Term a1, a2, a3;
        Predicate p1, p2, p3, p4, p5;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$error_message'(instantiation_error(A,B)):-['$neck_cut','$fast_write'('{INSTANTIATION ERROR: '),'$write_goal'(A),'$fast_write'(' - arg '),'$fast_write'(B),'$fast_write'('}'),nl]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s1.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a2 = args[0];
            a3 = args[1];
        } else if (a1.isVariable()){
            a2 = new VariableTerm(engine);
            a3 = new VariableTerm(engine);
            Term[] args = {a2, a3};
            ((VariableTerm) a1).bind(new StructureTerm(s1, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_nl_0(cont);
        p2 = new PRED_$fast_write_1(s4, p1);
        p3 = new PRED_$fast_write_1(a3, p2);
        p4 = new PRED_$fast_write_1(s5, p3);
        p5 = new PRED_$write_goal_1(a2, p4);
        return new PRED_$fast_write_1(s3, p5);
    }
}

class PRED_$error_message_1_3 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
    // '$error_message'(type_error(A,B,C,D)):-!,'$fast_write'('{TYPE ERROR: '),'$write_goal'(A),'$fast_write'(' - arg '),'$fast_write'(B),'$fast_write'(': expected '),'$fast_write'(C),'$fast_write'(', found '),write(D),'$fast_write'('}'),nl
        Term a1, a2, a3, a4, a5;
        Predicate p1, p2, p3, p4, p5, p6, p7, p8, p9;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$error_message'(type_error(A,B,C,D)):-['$neck_cut','$fast_write'('{TYPE ERROR: '),'$write_goal'(A),'$fast_write'(' - arg '),'$fast_write'(B),'$fast_write'(': expected '),'$fast_write'(C),'$fast_write'(', found '),write(D),'$fast_write'('}'),nl]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s6.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a2 = args[0];
            a3 = args[1];
            a4 = args[2];
            a5 = args[3];
        } else if (a1.isVariable()){
            a2 = new VariableTerm(engine);
            a3 = new VariableTerm(engine);
            a4 = new VariableTerm(engine);
            a5 = new VariableTerm(engine);
            Term[] args = {a2, a3, a4, a5};
            ((VariableTerm) a1).bind(new StructureTerm(s6, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_nl_0(cont);
        p2 = new PRED_$fast_write_1(s4, p1);
        p3 = new PRED_write_1(a5, p2);
        p4 = new PRED_$fast_write_1(s9, p3);
        p5 = new PRED_$fast_write_1(a4, p4);
        p6 = new PRED_$fast_write_1(s8, p5);
        p7 = new PRED_$fast_write_1(a3, p6);
        p8 = new PRED_$fast_write_1(s5, p7);
        p9 = new PRED_$write_goal_1(a2, p8);
        return new PRED_$fast_write_1(s7, p9);
    }
}

class PRED_$error_message_1_4 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
    // '$error_message'(domain_error(A,B,C,D)):-!,'$fast_write'('{DOMAIN ERROR: '),'$write_goal'(A),'$fast_write'(' - arg '),'$fast_write'(B),'$fast_write'(': expected '),'$fast_write'(C),'$fast_write'(', found '),write(D),'$fast_write'('}'),nl
        Term a1, a2, a3, a4, a5;
        Predicate p1, p2, p3, p4, p5, p6, p7, p8, p9;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$error_message'(domain_error(A,B,C,D)):-['$neck_cut','$fast_write'('{DOMAIN ERROR: '),'$write_goal'(A),'$fast_write'(' - arg '),'$fast_write'(B),'$fast_write'(': expected '),'$fast_write'(C),'$fast_write'(', found '),write(D),'$fast_write'('}'),nl]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s10.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a2 = args[0];
            a3 = args[1];
            a4 = args[2];
            a5 = args[3];
        } else if (a1.isVariable()){
            a2 = new VariableTerm(engine);
            a3 = new VariableTerm(engine);
            a4 = new VariableTerm(engine);
            a5 = new VariableTerm(engine);
            Term[] args = {a2, a3, a4, a5};
            ((VariableTerm) a1).bind(new StructureTerm(s10, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_nl_0(cont);
        p2 = new PRED_$fast_write_1(s4, p1);
        p3 = new PRED_write_1(a5, p2);
        p4 = new PRED_$fast_write_1(s9, p3);
        p5 = new PRED_$fast_write_1(a4, p4);
        p6 = new PRED_$fast_write_1(s8, p5);
        p7 = new PRED_$fast_write_1(a3, p6);
        p8 = new PRED_$fast_write_1(s5, p7);
        p9 = new PRED_$write_goal_1(a2, p8);
        return new PRED_$fast_write_1(s11, p9);
    }
}

class PRED_$error_message_1_5 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
    // '$error_message'(existence_error(A,0,B,C,D)):-!,'$fast_write'('{EXISTENCE ERROR: '),'$fast_write'(B),'$fast_write'(' '),write(C),'$fast_write'(' does not exist'),'$fast_write'('}'),nl
        Term a1, a2, a3;
        Predicate p1, p2, p3, p4, p5, p6;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$error_message'(existence_error(A,0,B,C,D)):-['$neck_cut','$fast_write'('{EXISTENCE ERROR: '),'$fast_write'(B),'$fast_write'(' '),write(C),'$fast_write'(' does not exist'),'$fast_write'('}'),nl]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s12.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            if (! si2.unify(args[1], engine.trail))
                return engine.fail();
            a2 = args[2];
            a3 = args[3];
        } else if (a1.isVariable()){
            a2 = new VariableTerm(engine);
            a3 = new VariableTerm(engine);
            Term[] args = {new VariableTerm(engine), si2, a2, a3, new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s12, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_nl_0(cont);
        p2 = new PRED_$fast_write_1(s4, p1);
        p3 = new PRED_$fast_write_1(s15, p2);
        p4 = new PRED_write_1(a3, p3);
        p5 = new PRED_$fast_write_1(s14, p4);
        p6 = new PRED_$fast_write_1(a2, p5);
        return new PRED_$fast_write_1(s13, p6);
    }
}

class PRED_$error_message_1_6 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
    // '$error_message'(existence_error(A,B,C,D,E)):-!,'$fast_write'('{EXISTENCE ERROR: '),'$write_goal'(A),'$fast_write'(' - arg '),'$fast_write'(B),'$fast_write'(': '),'$fast_write'(C),'$fast_write'(' '),write(D),'$fast_write'(' does not exist'),'$fast_write'('}'),nl
        Term a1, a2, a3, a4, a5;
        Predicate p1, p2, p3, p4, p5, p6, p7, p8, p9, p10;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$error_message'(existence_error(A,B,C,D,E)):-['$neck_cut','$fast_write'('{EXISTENCE ERROR: '),'$write_goal'(A),'$fast_write'(' - arg '),'$fast_write'(B),'$fast_write'(': '),'$fast_write'(C),'$fast_write'(' '),write(D),'$fast_write'(' does not exist'),'$fast_write'('}'),nl]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s12.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a2 = args[0];
            a3 = args[1];
            a4 = args[2];
            a5 = args[3];
        } else if (a1.isVariable()){
            a2 = new VariableTerm(engine);
            a3 = new VariableTerm(engine);
            a4 = new VariableTerm(engine);
            a5 = new VariableTerm(engine);
            Term[] args = {a2, a3, a4, a5, new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s12, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_nl_0(cont);
        p2 = new PRED_$fast_write_1(s4, p1);
        p3 = new PRED_$fast_write_1(s15, p2);
        p4 = new PRED_write_1(a5, p3);
        p5 = new PRED_$fast_write_1(s14, p4);
        p6 = new PRED_$fast_write_1(a4, p5);
        p7 = new PRED_$fast_write_1(s16, p6);
        p8 = new PRED_$fast_write_1(a3, p7);
        p9 = new PRED_$fast_write_1(s5, p8);
        p10 = new PRED_$write_goal_1(a2, p9);
        return new PRED_$fast_write_1(s13, p10);
    }
}

class PRED_$error_message_1_7 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
    // '$error_message'(permission_error(A,B,C,D,E)):-!,'$fast_write'('{PERMISSION ERROR: '),'$write_goal'(A),'$fast_write'(' - can not '),'$fast_write'(B),'$fast_write'(' '),'$fast_write'(C),'$fast_write'(' '),write(D),'$fast_write'(': '),'$fast_write'(E),'$fast_write'('}'),nl
        Term a1, a2, a3, a4, a5, a6;
        Predicate p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$error_message'(permission_error(A,B,C,D,E)):-['$neck_cut','$fast_write'('{PERMISSION ERROR: '),'$write_goal'(A),'$fast_write'(' - can not '),'$fast_write'(B),'$fast_write'(' '),'$fast_write'(C),'$fast_write'(' '),write(D),'$fast_write'(': '),'$fast_write'(E),'$fast_write'('}'),nl]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s17.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a2 = args[0];
            a3 = args[1];
            a4 = args[2];
            a5 = args[3];
            a6 = args[4];
        } else if (a1.isVariable()){
            a2 = new VariableTerm(engine);
            a3 = new VariableTerm(engine);
            a4 = new VariableTerm(engine);
            a5 = new VariableTerm(engine);
            a6 = new VariableTerm(engine);
            Term[] args = {a2, a3, a4, a5, a6};
            ((VariableTerm) a1).bind(new StructureTerm(s17, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_nl_0(cont);
        p2 = new PRED_$fast_write_1(s4, p1);
        p3 = new PRED_$fast_write_1(a6, p2);
        p4 = new PRED_$fast_write_1(s16, p3);
        p5 = new PRED_write_1(a5, p4);
        p6 = new PRED_$fast_write_1(s14, p5);
        p7 = new PRED_$fast_write_1(a4, p6);
        p8 = new PRED_$fast_write_1(s14, p7);
        p9 = new PRED_$fast_write_1(a3, p8);
        p10 = new PRED_$fast_write_1(s19, p9);
        p11 = new PRED_$write_goal_1(a2, p10);
        return new PRED_$fast_write_1(s18, p11);
    }
}

class PRED_$error_message_1_8 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
    // '$error_message'(representation_error(A,B,C)):-!,'$fast_write'('{REPRESENTATION ERROR: '),'$write_goal'(A),'$fast_write'(' - arg '),'$fast_write'(B),'$fast_write'(': limit of '),'$fast_write'(C),'$fast_write'(' is breached'),'$fast_write'('}'),nl
        Term a1, a2, a3, a4;
        Predicate p1, p2, p3, p4, p5, p6, p7, p8;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$error_message'(representation_error(A,B,C)):-['$neck_cut','$fast_write'('{REPRESENTATION ERROR: '),'$write_goal'(A),'$fast_write'(' - arg '),'$fast_write'(B),'$fast_write'(': limit of '),'$fast_write'(C),'$fast_write'(' is breached'),'$fast_write'('}'),nl]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s20.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a2 = args[0];
            a3 = args[1];
            a4 = args[2];
        } else if (a1.isVariable()){
            a2 = new VariableTerm(engine);
            a3 = new VariableTerm(engine);
            a4 = new VariableTerm(engine);
            Term[] args = {a2, a3, a4};
            ((VariableTerm) a1).bind(new StructureTerm(s20, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_nl_0(cont);
        p2 = new PRED_$fast_write_1(s4, p1);
        p3 = new PRED_$fast_write_1(s23, p2);
        p4 = new PRED_$fast_write_1(a4, p3);
        p5 = new PRED_$fast_write_1(s22, p4);
        p6 = new PRED_$fast_write_1(a3, p5);
        p7 = new PRED_$fast_write_1(s5, p6);
        p8 = new PRED_$write_goal_1(a2, p7);
        return new PRED_$fast_write_1(s21, p8);
    }
}

class PRED_$error_message_1_9 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
    // '$error_message'(evaluation_error(A,B,C)):-!,'$fast_write'('{EVALUATION ERROR: '),'$write_goal'(A),'$fast_write'(' - arg '),'$fast_write'(B),'$fast_write'(', found '),'$fast_write'(C),'$fast_write'('}'),nl
        Term a1, a2, a3, a4;
        Predicate p1, p2, p3, p4, p5, p6, p7;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$error_message'(evaluation_error(A,B,C)):-['$neck_cut','$fast_write'('{EVALUATION ERROR: '),'$write_goal'(A),'$fast_write'(' - arg '),'$fast_write'(B),'$fast_write'(', found '),'$fast_write'(C),'$fast_write'('}'),nl]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s24.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a2 = args[0];
            a3 = args[1];
            a4 = args[2];
        } else if (a1.isVariable()){
            a2 = new VariableTerm(engine);
            a3 = new VariableTerm(engine);
            a4 = new VariableTerm(engine);
            Term[] args = {a2, a3, a4};
            ((VariableTerm) a1).bind(new StructureTerm(s24, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_nl_0(cont);
        p2 = new PRED_$fast_write_1(s4, p1);
        p3 = new PRED_$fast_write_1(a4, p2);
        p4 = new PRED_$fast_write_1(s9, p3);
        p5 = new PRED_$fast_write_1(a3, p4);
        p6 = new PRED_$fast_write_1(s5, p5);
        p7 = new PRED_$write_goal_1(a2, p6);
        return new PRED_$fast_write_1(s25, p7);
    }
}

class PRED_$error_message_1_10 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
    // '$error_message'(syntax_error(A,B,C,D,E)):-!,'$fast_write'('{SYNTAX ERROR: '),'$write_goal'(A),'$fast_write'(' - arg '),'$fast_write'(B),'$fast_write'(': expected '),'$fast_write'(C),'$fast_write'(', found '),write(D),'$fast_write'('}'),nl
        Term a1, a2, a3, a4, a5;
        Predicate p1, p2, p3, p4, p5, p6, p7, p8, p9;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$error_message'(syntax_error(A,B,C,D,E)):-['$neck_cut','$fast_write'('{SYNTAX ERROR: '),'$write_goal'(A),'$fast_write'(' - arg '),'$fast_write'(B),'$fast_write'(': expected '),'$fast_write'(C),'$fast_write'(', found '),write(D),'$fast_write'('}'),nl]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s26.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a2 = args[0];
            a3 = args[1];
            a4 = args[2];
            a5 = args[3];
        } else if (a1.isVariable()){
            a2 = new VariableTerm(engine);
            a3 = new VariableTerm(engine);
            a4 = new VariableTerm(engine);
            a5 = new VariableTerm(engine);
            Term[] args = {a2, a3, a4, a5, new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s26, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_nl_0(cont);
        p2 = new PRED_$fast_write_1(s4, p1);
        p3 = new PRED_write_1(a5, p2);
        p4 = new PRED_$fast_write_1(s9, p3);
        p5 = new PRED_$fast_write_1(a4, p4);
        p6 = new PRED_$fast_write_1(s8, p5);
        p7 = new PRED_$fast_write_1(a3, p6);
        p8 = new PRED_$fast_write_1(s5, p7);
        p9 = new PRED_$write_goal_1(a2, p8);
        return new PRED_$fast_write_1(s27, p9);
    }
}

class PRED_$error_message_1_11 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
    // '$error_message'(system_error(A)):-!,'$fast_write'('{SYSTEM ERROR: '),write(A),'$fast_write'('}'),nl
        Term a1, a2;
        Predicate p1, p2, p3;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$error_message'(system_error(A)):-['$neck_cut','$fast_write'('{SYSTEM ERROR: '),write(A),'$fast_write'('}'),nl]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s28.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a2 = args[0];
        } else if (a1.isVariable()){
            a2 = new VariableTerm(engine);
            Term[] args = {a2};
            ((VariableTerm) a1).bind(new StructureTerm(s28, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_nl_0(cont);
        p2 = new PRED_$fast_write_1(s4, p1);
        p3 = new PRED_write_1(a2, p2);
        return new PRED_$fast_write_1(s29, p3);
    }
}

class PRED_$error_message_1_12 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
    // '$error_message'(internal_error(A)):-!,'$fast_write'('{INTERNAL ERROR: '),write(A),'$fast_write'('}'),nl
        Term a1, a2;
        Predicate p1, p2, p3;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$error_message'(internal_error(A)):-['$neck_cut','$fast_write'('{INTERNAL ERROR: '),write(A),'$fast_write'('}'),nl]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s30.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a2 = args[0];
        } else if (a1.isVariable()){
            a2 = new VariableTerm(engine);
            Term[] args = {a2};
            ((VariableTerm) a1).bind(new StructureTerm(s30, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_nl_0(cont);
        p2 = new PRED_$fast_write_1(s4, p1);
        p3 = new PRED_write_1(a2, p2);
        return new PRED_$fast_write_1(s31, p3);
    }
}

class PRED_$error_message_1_13 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
    // '$error_message'(java_error(A,B,C)):-!,'$fast_write'('{JAVA ERROR: '),'$write_goal'(A),'$fast_write'(' - arg '),'$fast_write'(B),'$fast_write'(', found '),'$write_goal'(C),'$fast_write'('}'),nl,'$print_stack_trace'(C)
        Term a1, a2, a3, a4;
        Predicate p1, p2, p3, p4, p5, p6, p7, p8;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$error_message'(java_error(A,B,C)):-['$neck_cut','$fast_write'('{JAVA ERROR: '),'$write_goal'(A),'$fast_write'(' - arg '),'$fast_write'(B),'$fast_write'(', found '),'$write_goal'(C),'$fast_write'('}'),nl,'$print_stack_trace'(C)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s32.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a2 = args[0];
            a3 = args[1];
            a4 = args[2];
        } else if (a1.isVariable()){
            a2 = new VariableTerm(engine);
            a3 = new VariableTerm(engine);
            a4 = new VariableTerm(engine);
            Term[] args = {a2, a3, a4};
            ((VariableTerm) a1).bind(new StructureTerm(s32, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_$print_stack_trace_1(a4, cont);
        p2 = new PRED_nl_0(p1);
        p3 = new PRED_$fast_write_1(s4, p2);
        p4 = new PRED_$write_goal_1(a4, p3);
        p5 = new PRED_$fast_write_1(s9, p4);
        p6 = new PRED_$fast_write_1(a3, p5);
        p7 = new PRED_$fast_write_1(s5, p6);
        p8 = new PRED_$write_goal_1(a2, p7);
        return new PRED_$fast_write_1(s33, p8);
    }
}

class PRED_$error_message_1_14 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) {
    // '$error_message'(A):-'$fast_write'('{'),write(A),'$fast_write'('}'),nl
        Term a1;
        Predicate p1, p2, p3;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$error_message'(A):-['$fast_write'('{'),write(A),'$fast_write'('}'),nl]
        p1 = new PRED_nl_0(cont);
        p2 = new PRED_$fast_write_1(s4, p1);
        p3 = new PRED_write_1(a1, p2);
        return new PRED_$fast_write_1(s34, p3);
    }
}
