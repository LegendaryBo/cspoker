package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$write_term0'/6</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$write_term0_6 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("alpha");
    static SymbolTerm s2 = SymbolTerm.makeSymbol("$VAR", 1);
    static IntegerTerm si3 = new IntegerTerm(0);
    static SymbolTerm s4 = SymbolTerm.makeSymbol("numbervars", 1);
    static SymbolTerm s5 = SymbolTerm.makeSymbol("true");
    static Term[] s6 = {s5};
    static StructureTerm s7 = new StructureTerm(s4, s6);
    static SymbolTerm s8 = SymbolTerm.makeSymbol("symbol");
    static SymbolTerm s9 = SymbolTerm.makeSymbol("punct");
    static SymbolTerm s10 = SymbolTerm.makeSymbol("[");
    static SymbolTerm s11 = SymbolTerm.makeSymbol("]");
    static SymbolTerm s12 = SymbolTerm.makeSymbol("{}", 1);
    static SymbolTerm s13 = SymbolTerm.makeSymbol("{");
    static IntegerTerm si14 = new IntegerTerm(1200);
    static SymbolTerm s15 = SymbolTerm.makeSymbol("}");
    static SymbolTerm s16 = SymbolTerm.makeSymbol("(");
    static SymbolTerm s17 = SymbolTerm.makeSymbol(")");
    static Predicate _$write_term0_6_sub_1 = new PRED_$write_term0_6_sub_1();
    static Predicate _$write_term0_6_sub_2 = new PRED_$write_term0_6_sub_2();
    static Predicate _$write_term0_6_sub_3 = new PRED_$write_term0_6_sub_3();
    static Predicate _$write_term0_6_sub_4 = new PRED_$write_term0_6_sub_4();
    static Predicate _$write_term0_6_sub_5 = new PRED_$write_term0_6_sub_5();
    static Predicate _$write_term0_6_sub_6 = new PRED_$write_term0_6_sub_6();
    static Predicate _$write_term0_6_sub_7 = new PRED_$write_term0_6_sub_7();
    static Predicate _$write_term0_6_sub_8 = new PRED_$write_term0_6_sub_8();
    static Predicate _$write_term0_6_sub_9 = new PRED_$write_term0_6_sub_9();
    static Predicate _$write_term0_6_1 = new PRED_$write_term0_6_1();
    static Predicate _$write_term0_6_2 = new PRED_$write_term0_6_2();
    static Predicate _$write_term0_6_3 = new PRED_$write_term0_6_3();
    static Predicate _$write_term0_6_4 = new PRED_$write_term0_6_4();
    static Predicate _$write_term0_6_5 = new PRED_$write_term0_6_5();
    static Predicate _$write_term0_6_6 = new PRED_$write_term0_6_6();
    static Predicate _$write_term0_6_7 = new PRED_$write_term0_6_7();
    static Predicate _$write_term0_6_8 = new PRED_$write_term0_6_8();
    static Predicate _$write_term0_6_9 = new PRED_$write_term0_6_9();
    static Predicate _$write_term0_6_10 = new PRED_$write_term0_6_10();

    public Term arg1, arg2, arg3, arg4, arg5, arg6;

    public PRED_$write_term0_6(Term a1, Term a2, Term a3, Term a4, Term a5, Term a6, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        arg5 = a5;
        arg6 = a6;
        this.cont = cont;
    }

    public PRED_$write_term0_6(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        arg5 = args[4];
        arg6 = args[5];
        this.cont = cont;
    }

    public int arity() { return 6; }

    public String toString() {
        return "$write_term0(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + "," + arg5 + "," + arg6 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.aregs[4] = arg4;
        engine.aregs[5] = arg5;
        engine.aregs[6] = arg6;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$write_term0_6_1, _$write_term0_6_sub_1);
    }
}

class PRED_$write_term0_6_sub_1 extends PRED_$write_term0_6 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$write_term0_6_2, _$write_term0_6_sub_2);
    }
}

class PRED_$write_term0_6_sub_2 extends PRED_$write_term0_6 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$write_term0_6_3, _$write_term0_6_sub_3);
    }
}

class PRED_$write_term0_6_sub_3 extends PRED_$write_term0_6 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$write_term0_6_4, _$write_term0_6_sub_4);
    }
}

class PRED_$write_term0_6_sub_4 extends PRED_$write_term0_6 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$write_term0_6_5, _$write_term0_6_sub_5);
    }
}

class PRED_$write_term0_6_sub_5 extends PRED_$write_term0_6 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$write_term0_6_6, _$write_term0_6_sub_6);
    }
}

class PRED_$write_term0_6_sub_6 extends PRED_$write_term0_6 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$write_term0_6_7, _$write_term0_6_sub_7);
    }
}

class PRED_$write_term0_6_sub_7 extends PRED_$write_term0_6 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$write_term0_6_8, _$write_term0_6_sub_8);
    }
}

class PRED_$write_term0_6_sub_8 extends PRED_$write_term0_6 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$write_term0_6_9, _$write_term0_6_sub_9);
    }
}

class PRED_$write_term0_6_sub_9 extends PRED_$write_term0_6 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$write_term0_6_10);
    }
}

class PRED_$write_term0_6_1 extends PRED_$write_term0_6 {
    public Predicate exec(Prolog engine) {
    // '$write_term0'(A,B,C,alpha,D,E):-var(A),!,'$write_space_if_needed'(C,alpha,E),'$fast_write'(E,A)
        Term a1, a2, a3, a4, a5, a6, a7;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        cont = engine.cont;
    // '$write_term0'(A,B,C,alpha,D,E):-['$get_level'(F),var(A),'$cut'(F),'$write_space_if_needed'(C,alpha,E),'$fast_write'(E,A)]
        a4 = a4.dereference();
        if (a4.isSymbol()){
            if (! a4.equals(s1))
                return engine.fail();
        } else if (a4.isVariable()){
            ((VariableTerm) a4).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a7 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(7))
        if (! a7.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of var(a(1))
        a1 = a1.dereference();
        if (! a1.isVariable()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(7))
        a7 = a7.dereference();
        if (! a7.isInteger()) {
            throw new IllegalTypeException("integer", a7);
        } else {
            engine.cut(((IntegerTerm) a7).intValue());
        }
        //END inline expansion
        p1 = new PRED_$fast_write_2(a6, a1, cont);
        return new PRED_$write_space_if_needed_3(a3, s1, a6, p1);
    }
}

class PRED_$write_term0_6_2 extends PRED_$write_term0_6 {
    public Predicate exec(Prolog engine) {
    // '$write_term0'(A,B,C,alpha,D,E):-java(A),!,'$write_space_if_needed'(C,alpha,E),'$fast_write'(E,A)
        Term a1, a2, a3, a4, a5, a6, a7;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        cont = engine.cont;
    // '$write_term0'(A,B,C,alpha,D,E):-['$get_level'(F),java(A),'$cut'(F),'$write_space_if_needed'(C,alpha,E),'$fast_write'(E,A)]
        a4 = a4.dereference();
        if (a4.isSymbol()){
            if (! a4.equals(s1))
                return engine.fail();
        } else if (a4.isVariable()){
            ((VariableTerm) a4).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a7 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(7))
        if (! a7.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of java(a(1))
        a1 = a1.dereference();
        if (! a1.isJavaObject()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(7))
        a7 = a7.dereference();
        if (! a7.isInteger()) {
            throw new IllegalTypeException("integer", a7);
        } else {
            engine.cut(((IntegerTerm) a7).intValue());
        }
        //END inline expansion
        p1 = new PRED_$fast_write_2(a6, a1, cont);
        return new PRED_$write_space_if_needed_3(a3, s1, a6, p1);
    }
}

class PRED_$write_term0_6_3 extends PRED_$write_term0_6 {
    public Predicate exec(Prolog engine) {
    // '$write_term0'(A,B,C,alpha,D,E):-A='$VAR'(F),integer(F),F>=0,'$builtin_member'(numbervars(true),D),!,'$write_space_if_needed'(C,alpha,E),'$write_VAR'(F,E)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9;
        Predicate p1, p2, p3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        cont = engine.cont;
    // '$write_term0'(A,B,C,alpha,D,E):-['$get_level'(F),'$unify'(A,'$VAR'(G)),integer(G),'$greater_or_equal'(G,0),'$builtin_member'(numbervars(true),D),'$cut'(F),'$write_space_if_needed'(C,alpha,E),'$write_VAR'(G,E)]
        a4 = a4.dereference();
        if (a4.isSymbol()){
            if (! a4.equals(s1))
                return engine.fail();
        } else if (a4.isVariable()){
            ((VariableTerm) a4).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a7 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(7))
        if (! a7.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a8 = new VariableTerm(engine);
        Term[] y1 = {a8};
        a9 = new StructureTerm(s2, y1);
        //START inline expansion of $unify(a(1),a(9))
        if (! a1.unify(a9, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of integer(a(8))
        a8 = a8.dereference();
        if (! a8.isInteger()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $greater_or_equal(a(8),si(3))
        try {
            if (Arithmetic.evaluate(a8).arithCompareTo(si3) < 0) {
                return engine.fail();
            }
        } catch (BuiltinException e) {
            e.goal = this;
            throw e;
        }
        //END inline expansion
        p1 = new PRED_$write_VAR_2(a8, a6, cont);
        p2 = new PRED_$write_space_if_needed_3(a3, s1, a6, p1);
        p3 = new PRED_$cut_1(a7, p2);
        return new PRED_$builtin_member_2(s7, a5, p3);
    }
}

class PRED_$write_term0_6_4 extends PRED_$write_term0_6 {
    public Predicate exec(Prolog engine) {
    // '$write_term0'(A,B,C,alpha,D,E):-number(A),A<0,!,'$write_space_if_needed'(C,symbol,E),'$fast_write'(E,A)
        Term a1, a2, a3, a4, a5, a6, a7;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        cont = engine.cont;
    // '$write_term0'(A,B,C,alpha,D,E):-['$get_level'(F),number(A),'$less_than'(A,0),'$cut'(F),'$write_space_if_needed'(C,symbol,E),'$fast_write'(E,A)]
        a4 = a4.dereference();
        if (a4.isSymbol()){
            if (! a4.equals(s1))
                return engine.fail();
        } else if (a4.isVariable()){
            ((VariableTerm) a4).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a7 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(7))
        if (! a7.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of number(a(1))
        a1 = a1.dereference();
        if (! a1.isNumber()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $less_than(a(1),si(3))
        try {
            if (Arithmetic.evaluate(a1).arithCompareTo(si3) >= 0) {
                return engine.fail();
            }
        } catch (BuiltinException e) {
            e.goal = this;
            throw e;
        }
        //END inline expansion
        //START inline expansion of $cut(a(7))
        a7 = a7.dereference();
        if (! a7.isInteger()) {
            throw new IllegalTypeException("integer", a7);
        } else {
            engine.cut(((IntegerTerm) a7).intValue());
        }
        //END inline expansion
        p1 = new PRED_$fast_write_2(a6, a1, cont);
        return new PRED_$write_space_if_needed_3(a3, s8, a6, p1);
    }
}

class PRED_$write_term0_6_5 extends PRED_$write_term0_6 {
    public Predicate exec(Prolog engine) {
    // '$write_term0'(A,B,C,alpha,D,E):-number(A),!,'$write_space_if_needed'(C,alpha,E),'$fast_write'(E,A)
        Term a1, a2, a3, a4, a5, a6, a7;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        cont = engine.cont;
    // '$write_term0'(A,B,C,alpha,D,E):-['$get_level'(F),number(A),'$cut'(F),'$write_space_if_needed'(C,alpha,E),'$fast_write'(E,A)]
        a4 = a4.dereference();
        if (a4.isSymbol()){
            if (! a4.equals(s1))
                return engine.fail();
        } else if (a4.isVariable()){
            ((VariableTerm) a4).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a7 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(7))
        if (! a7.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of number(a(1))
        a1 = a1.dereference();
        if (! a1.isNumber()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(7))
        a7 = a7.dereference();
        if (! a7.isInteger()) {
            throw new IllegalTypeException("integer", a7);
        } else {
            engine.cut(((IntegerTerm) a7).intValue());
        }
        //END inline expansion
        p1 = new PRED_$fast_write_2(a6, a1, cont);
        return new PRED_$write_space_if_needed_3(a3, s1, a6, p1);
    }
}

class PRED_$write_term0_6_6 extends PRED_$write_term0_6 {
    public Predicate exec(Prolog engine) {
    // '$write_term0'(A,B,C,D,E,F):-atom(A),!,'$write_atom'(A,C,D,E,F)
        Term a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        cont = engine.cont;
    // '$write_term0'(A,B,C,D,E,F):-['$get_level'(G),atom(A),'$cut'(G),'$write_atom'(A,C,D,E,F)]
        a7 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(7))
        if (! a7.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of atom(a(1))
        a1 = a1.dereference();
        if (! a1.isSymbol()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(7))
        a7 = a7.dereference();
        if (! a7.isInteger()) {
            throw new IllegalTypeException("integer", a7);
        } else {
            engine.cut(((IntegerTerm) a7).intValue());
        }
        //END inline expansion
        return new PRED_$write_atom_5(a1, a3, a4, a5, a6, cont);
    }
}

class PRED_$write_term0_6_7 extends PRED_$write_term0_6 {
    public Predicate exec(Prolog engine) {
    // '$write_term0'(A,B,C,D,E,F):-'$dummy_16_builtins.pl'(E),'$write_is_operator'(A,G,H,I),!,'$write_term_op'(G,I,H,B,C,D,E,F)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;
        Predicate p1, p2, p3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        cont = engine.cont;
    // '$write_term0'(A,B,C,D,E,F):-['$get_level'(G),'$dummy_16_builtins.pl'(E),'$write_is_operator'(A,H,I,J),'$cut'(G),'$write_term_op'(H,J,I,B,C,D,E,F)]
        a7 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(7))
        if (! a7.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a8 = new VariableTerm(engine);
        a9 = new VariableTerm(engine);
        a10 = new VariableTerm(engine);
        p1 = new PRED_$write_term_op_8(a8, a10, a9, a2, a3, a4, a5, a6, cont);
        p2 = new PRED_$cut_1(a7, p1);
        p3 = new PRED_$write_is_operator_4(a1, a8, a9, a10, p2);
        return new PRED_$dummy_16_builtins$002Epl_1(a5, p3);
    }
}

class PRED_$write_term0_6_8 extends PRED_$write_term0_6 {
    public Predicate exec(Prolog engine) {
    // '$write_term0'(A,B,C,punct,D,E):-A=[F|G],'$dummy_17_builtins.pl'(D),!,'$write_space_if_needed'(C,punct,E),put_char(E,'['),'$write_term_list_args'(A,punct,H,D,E),put_char(E,']')
        Term a1, a2, a3, a4, a5, a6, a7, a8;
        Predicate p1, p2, p3, p4, p5;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        cont = engine.cont;
    // '$write_term0'(A,B,C,punct,D,E):-['$get_level'(F),'$unify'(A,[G|H]),'$dummy_17_builtins.pl'(D),'$cut'(F),'$write_space_if_needed'(C,punct,E),put_char(E,'['),'$write_term_list_args'(A,punct,I,D,E),put_char(E,']')]
        a4 = a4.dereference();
        if (a4.isSymbol()){
            if (! a4.equals(s9))
                return engine.fail();
        } else if (a4.isVariable()){
            ((VariableTerm) a4).bind(s9, engine.trail);
        } else {
            return engine.fail();
        }
        a7 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(7))
        if (! a7.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a8 = new ListTerm(new VariableTerm(engine), new VariableTerm(engine));
        //START inline expansion of $unify(a(1),a(8))
        if (! a1.unify(a8, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        p1 = new PRED_put_char_2(a6, s11, cont);
        p2 = new PRED_$write_term_list_args_5(a1, s9, new VariableTerm(engine), a5, a6, p1);
        p3 = new PRED_put_char_2(a6, s10, p2);
        p4 = new PRED_$write_space_if_needed_3(a3, s9, a6, p3);
        p5 = new PRED_$cut_1(a7, p4);
        return new PRED_$dummy_17_builtins$002Epl_1(a5, p5);
    }
}

class PRED_$write_term0_6_9 extends PRED_$write_term0_6 {
    public Predicate exec(Prolog engine) {
    // '$write_term0'(A,B,C,D,E,F):-A={G},'$dummy_18_builtins.pl'(E),!,'$write_space_if_needed'(C,punct,F),put_char(F,'{'),'$write_term0'(G,1200,punct,H,E,F),put_char(F,'}')
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9;
        Predicate p1, p2, p3, p4, p5;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        cont = engine.cont;
    // '$write_term0'(A,B,C,D,E,F):-['$get_level'(G),'$unify'(A,{H}),'$dummy_18_builtins.pl'(E),'$cut'(G),'$write_space_if_needed'(C,punct,F),put_char(F,'{'),'$write_term0'(H,1200,punct,I,E,F),put_char(F,'}')]
        a7 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(7))
        if (! a7.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a8 = new VariableTerm(engine);
        Term[] y1 = {a8};
        a9 = new StructureTerm(s12, y1);
        //START inline expansion of $unify(a(1),a(9))
        if (! a1.unify(a9, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        p1 = new PRED_put_char_2(a6, s15, cont);
        p2 = new PRED_$write_term0_6(a8, si14, s9, new VariableTerm(engine), a5, a6, p1);
        p3 = new PRED_put_char_2(a6, s13, p2);
        p4 = new PRED_$write_space_if_needed_3(a3, s9, a6, p3);
        p5 = new PRED_$cut_1(a7, p4);
        return new PRED_$dummy_18_builtins$002Epl_1(a5, p5);
    }
}

class PRED_$write_term0_6_10 extends PRED_$write_term0_6 {
    public Predicate exec(Prolog engine) {
    // '$write_term0'(A,B,C,punct,D,E):-A=..[F|G],'$write_atom'(F,C,H,D,E),put_char(E,'('),'$write_term_args'(G,punct,I,D,E),put_char(E,')')
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9;
        Predicate p1, p2, p3, p4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        cont = engine.cont;
    // '$write_term0'(A,B,C,punct,D,E):-['$univ'(A,[F|G]),'$write_atom'(F,C,H,D,E),put_char(E,'('),'$write_term_args'(G,punct,I,D,E),put_char(E,')')]
        a4 = a4.dereference();
        if (a4.isSymbol()){
            if (! a4.equals(s9))
                return engine.fail();
        } else if (a4.isVariable()){
            ((VariableTerm) a4).bind(s9, engine.trail);
        } else {
            return engine.fail();
        }
        a7 = new VariableTerm(engine);
        a8 = new VariableTerm(engine);
        a9 = new ListTerm(a7, a8);
        p1 = new PRED_put_char_2(a6, s17, cont);
        p2 = new PRED_$write_term_args_5(a8, s9, new VariableTerm(engine), a5, a6, p1);
        p3 = new PRED_put_char_2(a6, s16, p2);
        p4 = new PRED_$write_atom_5(a7, a3, new VariableTerm(engine), a5, a6, p3);
        return new PRED_$univ_2(a1, a9, p4);
    }
}
