package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.IntegerTerm;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.SymbolTerm;
import jp.ac.kobe_u.cs.prolog.lang.Term;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$show_debug_option'/0</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$show_debug_option_0 extends Predicate {
    static IntegerTerm si1 = new IntegerTerm(4);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("Debuggin options:");
    static SymbolTerm s3 = SymbolTerm.makeSymbol("a      abort");
    static SymbolTerm s4 = SymbolTerm.makeSymbol("RET    creep");
    static SymbolTerm s5 = SymbolTerm.makeSymbol("c      creep");
    static SymbolTerm s6 = SymbolTerm.makeSymbol("l      leap");
    static SymbolTerm s7 = SymbolTerm.makeSymbol("+      spy this");
    static SymbolTerm s8 = SymbolTerm.makeSymbol("-      nospy this");
    static SymbolTerm s9 = SymbolTerm.makeSymbol("?      help");
    static SymbolTerm s10 = SymbolTerm.makeSymbol("h      help");

    public PRED_$show_debug_option_0(Predicate cont) {
        this.cont = cont;
    }

    public PRED_$show_debug_option_0(){}

    public void setArgument(Term[] args, Predicate cont) {
        this.cont = cont;
    }

    public int arity() { return 0; }

    public String toString() {
        return "$show_debug_option";
    }

    public Predicate exec(Prolog engine) {
    // '$show_debug_option':-tab(4),'$fast_write'('Debuggin options:'),nl,tab(4),'$fast_write'('a      abort'),nl,tab(4),'$fast_write'('RET    creep'),nl,tab(4),'$fast_write'('c      creep'),nl,tab(4),'$fast_write'('l      leap'),nl,tab(4),'$fast_write'('+      spy this'),nl,tab(4),'$fast_write'('-      nospy this'),nl,tab(4),'$fast_write'('?      help'),nl,tab(4),'$fast_write'('h      help'),nl
        engine.setB0();
        Predicate p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26;
    // '$show_debug_option':-[tab(4),'$fast_write'('Debuggin options:'),nl,tab(4),'$fast_write'('a      abort'),nl,tab(4),'$fast_write'('RET    creep'),nl,tab(4),'$fast_write'('c      creep'),nl,tab(4),'$fast_write'('l      leap'),nl,tab(4),'$fast_write'('+      spy this'),nl,tab(4),'$fast_write'('-      nospy this'),nl,tab(4),'$fast_write'('?      help'),nl,tab(4),'$fast_write'('h      help'),nl]
        p1 = new PRED_nl_0(cont);
        p2 = new PRED_$fast_write_1(s10, p1);
        p3 = new PRED_tab_1(si1, p2);
        p4 = new PRED_nl_0(p3);
        p5 = new PRED_$fast_write_1(s9, p4);
        p6 = new PRED_tab_1(si1, p5);
        p7 = new PRED_nl_0(p6);
        p8 = new PRED_$fast_write_1(s8, p7);
        p9 = new PRED_tab_1(si1, p8);
        p10 = new PRED_nl_0(p9);
        p11 = new PRED_$fast_write_1(s7, p10);
        p12 = new PRED_tab_1(si1, p11);
        p13 = new PRED_nl_0(p12);
        p14 = new PRED_$fast_write_1(s6, p13);
        p15 = new PRED_tab_1(si1, p14);
        p16 = new PRED_nl_0(p15);
        p17 = new PRED_$fast_write_1(s5, p16);
        p18 = new PRED_tab_1(si1, p17);
        p19 = new PRED_nl_0(p18);
        p20 = new PRED_$fast_write_1(s4, p19);
        p21 = new PRED_tab_1(si1, p20);
        p22 = new PRED_nl_0(p21);
        p23 = new PRED_$fast_write_1(s3, p22);
        p24 = new PRED_tab_1(si1, p23);
        p25 = new PRED_nl_0(p24);
        p26 = new PRED_$fast_write_1(s2, p25);
        return new PRED_tab_1(si1, p26);
    }
}
