package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$localize_args'/4</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$localize_args_4 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("[]");
    static SymbolTerm s2 = SymbolTerm.makeSymbol(":");
    static SymbolTerm s3 = SymbolTerm.makeSymbol(":", 2);
    static Predicate _$localize_args_4_top = new PRED_$localize_args_4_top();
    static Predicate _fail_0 = new PRED_fail_0();
    static Predicate _$localize_args_4_var = new PRED_$localize_args_4_var();
    static Predicate _$localize_args_4_var_1 = new PRED_$localize_args_4_var_1();
    static Predicate _$localize_args_4_var_2 = new PRED_$localize_args_4_var_2();
    static Predicate _$localize_args_4_lis = new PRED_$localize_args_4_lis();
    static Predicate _$localize_args_4_lis_1 = new PRED_$localize_args_4_lis_1();
    static Predicate _$localize_args_4_1 = new PRED_$localize_args_4_1();
    static Predicate _$localize_args_4_2 = new PRED_$localize_args_4_2();
    static Predicate _$localize_args_4_3 = new PRED_$localize_args_4_3();

    public Term arg1, arg2, arg3, arg4;

    public PRED_$localize_args_4(Term a1, Term a2, Term a3, Term a4, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        this.cont = cont;
    }

    public PRED_$localize_args_4(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        this.cont = cont;
    }

    public int arity() { return 4; }

    public String toString() {
        return "$localize_args(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.aregs[4] = arg4;
        engine.cont = cont;
        return _$localize_args_4_top;
    }
}

class PRED_$localize_args_4_top extends PRED_$localize_args_4 {
    public Predicate exec(Prolog engine) {
        engine.setB0();
        return engine.switch_on_term(_$localize_args_4_var, _fail_0, _fail_0, _$localize_args_4_1, _fail_0, _$localize_args_4_lis);
    }
}

class PRED_$localize_args_4_var extends PRED_$localize_args_4 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$localize_args_4_1, _$localize_args_4_var_1);
    }
}

class PRED_$localize_args_4_var_1 extends PRED_$localize_args_4 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$localize_args_4_2, _$localize_args_4_var_2);
    }
}

class PRED_$localize_args_4_var_2 extends PRED_$localize_args_4 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$localize_args_4_3);
    }
}

class PRED_$localize_args_4_lis extends PRED_$localize_args_4 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$localize_args_4_2, _$localize_args_4_lis_1);
    }
}

class PRED_$localize_args_4_lis_1 extends PRED_$localize_args_4 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$localize_args_4_3);
    }
}

class PRED_$localize_args_4_1 extends PRED_$localize_args_4 {
    public Predicate exec(Prolog engine) {
    // '$localize_args'([],[],A,[]):-!
        Term a1, a2, a3, a4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // '$localize_args'([],[],A,[]):-['$neck_cut']
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s1))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isSymbol()){
            if (! a2.equals(s1))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a4 = a4.dereference();
        if (a4.isSymbol()){
            if (! a4.equals(s1))
                return engine.fail();
        } else if (a4.isVariable()){
            ((VariableTerm) a4).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_$localize_args_4_2 extends PRED_$localize_args_4 {
    public Predicate exec(Prolog engine) {
    // '$localize_args'([:|A],[B|C],D,[D:B|E]):-'$dummy_8_builtins.pl'(B,F,G),!,'$localize_args'(A,C,D,E)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // '$localize_args'([:|A],[B|C],D,[D:B|E]):-['$get_level'(F),'$dummy_8_builtins.pl'(B,G,H),'$cut'(F),'$localize_args'(A,C,D,E)]
        a1 = a1.dereference();
        if (a1.isList()){
            Term[] args = {((ListTerm)a1).car(), ((ListTerm)a1).cdr()};
            if (! s2.unify(args[0], engine.trail))
                return engine.fail();
            a5 = args[1];
        } else if (a1.isVariable()){
            a5 = new VariableTerm(engine);
            ((VariableTerm) a1).bind(new ListTerm(s2, a5), engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isList()){
            Term[] args = {((ListTerm)a2).car(), ((ListTerm)a2).cdr()};
            a6 = args[0];
            a7 = args[1];
        } else if (a2.isVariable()){
            a6 = new VariableTerm(engine);
            a7 = new VariableTerm(engine);
            ((VariableTerm) a2).bind(new ListTerm(a6, a7), engine.trail);
        } else {
            return engine.fail();
        }
        a4 = a4.dereference();
        if (a4.isList()){
            Term[] args = {((ListTerm)a4).car(), ((ListTerm)a4).cdr()};
            a8 = args[0];
            a9 = args[1];
        } else if (a4.isVariable()){
            a8 = new VariableTerm(engine);
            a9 = new VariableTerm(engine);
            ((VariableTerm) a4).bind(new ListTerm(a8, a9), engine.trail);
        } else {
            return engine.fail();
        }
        a8 = a8.dereference();
        if (a8.isStructure()){
            if (! s3.equals(((StructureTerm)a8).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a8).args();
            if (! a3.unify(args[0], engine.trail))
                return engine.fail();
            if (! a6.unify(args[1], engine.trail))
                return engine.fail();
        } else if (a8.isVariable()){
            Term[] args = {a3, a6};
            ((VariableTerm) a8).bind(new StructureTerm(s3, args), engine.trail);
        } else {
            return engine.fail();
        }
        a10 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(10))
        if (! a10.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        p1 = new PRED_$localize_args_4(a5, a7, a3, a9, cont);
        p2 = new PRED_$cut_1(a10, p1);
        return new PRED_$dummy_8_builtins$002Epl_3(a6, new VariableTerm(engine), new VariableTerm(engine), p2);
    }
}

class PRED_$localize_args_4_3 extends PRED_$localize_args_4 {
    public Predicate exec(Prolog engine) {
    // '$localize_args'([A|B],[C|D],E,[C|F]):-'$localize_args'(B,D,E,F)
        Term a1, a2, a3, a4, a5, a6, a7, a8;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // '$localize_args'([A|B],[C|D],E,[C|F]):-['$localize_args'(B,D,E,F)]
        a1 = a1.dereference();
        if (a1.isList()){
            Term[] args = {((ListTerm)a1).car(), ((ListTerm)a1).cdr()};
            a5 = args[1];
        } else if (a1.isVariable()){
            a5 = new VariableTerm(engine);
            ((VariableTerm) a1).bind(new ListTerm(new VariableTerm(engine), a5), engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isList()){
            Term[] args = {((ListTerm)a2).car(), ((ListTerm)a2).cdr()};
            a6 = args[0];
            a7 = args[1];
        } else if (a2.isVariable()){
            a6 = new VariableTerm(engine);
            a7 = new VariableTerm(engine);
            ((VariableTerm) a2).bind(new ListTerm(a6, a7), engine.trail);
        } else {
            return engine.fail();
        }
        a4 = a4.dereference();
        if (a4.isList()){
            Term[] args = {((ListTerm)a4).car(), ((ListTerm)a4).cdr()};
            if (! a6.unify(args[0], engine.trail))
                return engine.fail();
            a8 = args[1];
        } else if (a4.isVariable()){
            a8 = new VariableTerm(engine);
            ((VariableTerm) a4).bind(new ListTerm(a6, a8), engine.trail);
        } else {
            return engine.fail();
        }
        engine.aregs[1] = a5;
        engine.aregs[2] = a7;
        engine.aregs[3] = a3;
        engine.aregs[4] = a8;
        engine.cont = cont;
        return _$localize_args_4_top;
    }
}
