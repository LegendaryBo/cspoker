package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.IntegerTerm;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.SymbolTerm;
import jp.ac.kobe_u.cs.prolog.lang.Term;
import jp.ac.kobe_u.cs.prolog.lang.VariableTerm;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$prolog_file_name'/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$prolog_file_name_2 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol(".");
    static IntegerTerm si2 = new IntegerTerm(0);
    static SymbolTerm s3 = SymbolTerm.makeSymbol(".pl");
    static Predicate _$prolog_file_name_2_sub_1 = new PRED_$prolog_file_name_2_sub_1();
    static Predicate _$prolog_file_name_2_1 = new PRED_$prolog_file_name_2_1();
    static Predicate _$prolog_file_name_2_2 = new PRED_$prolog_file_name_2_2();

    public Term arg1, arg2;

    public PRED_$prolog_file_name_2(Term a1, Term a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_$prolog_file_name_2(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String toString() {
        return "$prolog_file_name(" + arg1 + "," + arg2 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$prolog_file_name_2_1, _$prolog_file_name_2_sub_1);
    }
}

class PRED_$prolog_file_name_2_sub_1 extends PRED_$prolog_file_name_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$prolog_file_name_2_2);
    }
}

class PRED_$prolog_file_name_2_1 extends PRED_$prolog_file_name_2 {
    public Predicate exec(Prolog engine) {
    // '$prolog_file_name'(A,A):-sub_atom(A,B,C,D,'.'),D>0,!
        Term a1, a2, a3, a4;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$prolog_file_name'(A,A):-['$get_level'(B),sub_atom(A,C,D,E,'.'),'$greater_than'(E,0),'$cut'(B)]
        if (! a1.unify(a2, engine.trail))
            return engine.fail();
        a3 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(3))
        if (! a3.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a4 = new VariableTerm(engine);
        p1 = new PRED_$cut_1(a3, cont);
        p2 = new PRED_$greater_than_2(a4, si2, p1);
        return new PRED_sub_atom_5(a1, new VariableTerm(engine), new VariableTerm(engine), a4, s1, p2);
    }
}

class PRED_$prolog_file_name_2_2 extends PRED_$prolog_file_name_2 {
    public Predicate exec(Prolog engine) {
    // '$prolog_file_name'(A,B):-atom_concat(A,'.pl',B)
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$prolog_file_name'(A,B):-[atom_concat(A,'.pl',B)]
        return new PRED_atom_concat_3(a1, s3, a2, cont);
    }
}
