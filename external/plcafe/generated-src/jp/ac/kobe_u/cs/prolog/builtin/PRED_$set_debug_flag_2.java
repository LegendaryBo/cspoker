package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.IntegerTerm;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.StructureTerm;
import jp.ac.kobe_u.cs.prolog.lang.SymbolTerm;
import jp.ac.kobe_u.cs.prolog.lang.Term;
import jp.ac.kobe_u.cs.prolog.lang.VariableTerm;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$set_debug_flag'/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$set_debug_flag_2 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("leap");
    static SymbolTerm s2 = SymbolTerm.makeSymbol(":", 2);
    static SymbolTerm s3 = SymbolTerm.makeSymbol("jp.ac.kobe_u.cs.prolog.builtin");
    static SymbolTerm s4 = SymbolTerm.makeSymbol("$leap_flag", 1);
    static Predicate _fail_0 = new PRED_fail_0();
    static Predicate _$set_debug_flag_2_var = new PRED_$set_debug_flag_2_var();
    static Predicate _$set_debug_flag_2_var_1 = new PRED_$set_debug_flag_2_var_1();
    static Predicate _$set_debug_flag_2_1 = new PRED_$set_debug_flag_2_1();
    static Predicate _$set_debug_flag_2_2 = new PRED_$set_debug_flag_2_2();

    public Term arg1, arg2;

    public PRED_$set_debug_flag_2(Term a1, Term a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_$set_debug_flag_2(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String toString() {
        return "$set_debug_flag(" + arg1 + "," + arg2 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$set_debug_flag_2_var, _fail_0, _fail_0, _$set_debug_flag_2_var, _fail_0, _fail_0);
    }
}

class PRED_$set_debug_flag_2_var extends PRED_$set_debug_flag_2 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$set_debug_flag_2_1, _$set_debug_flag_2_var_1);
    }
}

class PRED_$set_debug_flag_2_var_1 extends PRED_$set_debug_flag_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$set_debug_flag_2_2);
    }
}

class PRED_$set_debug_flag_2_1 extends PRED_$set_debug_flag_2 {
    public Predicate exec(Prolog engine) {
    // '$set_debug_flag'(leap,A):-clause('$leap_flag'(A),B),!
        Term a1, a2, a3, a4, a5;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$set_debug_flag'(leap,A):-['$get_level'(B),clause('jp.ac.kobe_u.cs.prolog.builtin':'$leap_flag'(A),C),'$cut'(B)]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s1))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a3 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(3))
        if (! a3.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        Term[] y1 = {a2};
        a4 = new StructureTerm(s4, y1);
        Term[] y2 = {s3, a4};
        a5 = new StructureTerm(s2, y2);
        p1 = new PRED_$cut_1(a3, cont);
        return new PRED_clause_2(a5, new VariableTerm(engine), p1);
    }
}

class PRED_$set_debug_flag_2_2 extends PRED_$set_debug_flag_2 {
    public Predicate exec(Prolog engine) {
    // '$set_debug_flag'(leap,A):-retractall('$leap_flag'(B)),assertz('$leap_flag'(A))
        Term a1, a2, a3, a4, a5, a6;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$set_debug_flag'(leap,A):-[retractall('jp.ac.kobe_u.cs.prolog.builtin':'$leap_flag'(B)),assertz('jp.ac.kobe_u.cs.prolog.builtin':'$leap_flag'(A))]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s1))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        Term[] y1 = {new VariableTerm(engine)};
        a3 = new StructureTerm(s4, y1);
        Term[] y2 = {s3, a3};
        a4 = new StructureTerm(s2, y2);
        Term[] y3 = {a2};
        a5 = new StructureTerm(s4, y3);
        Term[] y4 = {s3, a5};
        a6 = new StructureTerm(s2, y4);
        p1 = new PRED_assertz_1(a6, cont);
        return new PRED_retractall_1(a4, p1);
    }
}
