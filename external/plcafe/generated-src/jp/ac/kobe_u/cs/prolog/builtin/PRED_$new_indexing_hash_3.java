package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$new_indexing_hash'/3</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_$new_indexing_hash_3 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("all");
    static SymbolTerm s2 = SymbolTerm.makeSymbol("[]");
    static SymbolTerm s3 = SymbolTerm.makeSymbol("var");
    static SymbolTerm s4 = SymbolTerm.makeSymbol("lis");
    static SymbolTerm s5 = SymbolTerm.makeSymbol("str");
    static Predicate _$new_indexing_hash_3_sub_1 = new PRED_$new_indexing_hash_3_sub_1();
    static Predicate _$new_indexing_hash_3_1 = new PRED_$new_indexing_hash_3_1();
    static Predicate _$new_indexing_hash_3_2 = new PRED_$new_indexing_hash_3_2();

    public Term arg1, arg2, arg3;

    public PRED_$new_indexing_hash_3(Term a1, Term a2, Term a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_$new_indexing_hash_3(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String toString() {
        return "$new_indexing_hash(" + arg1 + "," + arg2 + "," + arg3 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$new_indexing_hash_3_1, _$new_indexing_hash_3_sub_1);
    }
}

class PRED_$new_indexing_hash_3_sub_1 extends PRED_$new_indexing_hash_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$new_indexing_hash_3_2);
    }
}

class PRED_$new_indexing_hash_3_1 extends PRED_$new_indexing_hash_3 {
    public Predicate exec(Prolog engine) {
    // '$new_indexing_hash'(A,B,C):-hash_contains_key(A,B),!,hash_get(A,B,C)
        Term a1, a2, a3, a4;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$new_indexing_hash'(A,B,C):-['$get_level'(D),hash_contains_key(A,B),'$cut'(D),hash_get(A,B,C)]
        a4 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(4))
        if (! a4.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        p1 = new PRED_hash_get_3(a1, a2, a3, cont);
        p2 = new PRED_$cut_1(a4, p1);
        return new PRED_hash_contains_key_2(a1, a2, p2);
    }
}

class PRED_$new_indexing_hash_3_2 extends PRED_$new_indexing_hash_3 {
    public Predicate exec(Prolog engine) {
    // '$new_indexing_hash'(A,B,C):-new_hash(C),hash_put(C,all,[]),hash_put(C,var,[]),hash_put(C,lis,[]),hash_put(C,str,[]),hash_put(A,B,C)
        Term a1, a2, a3;
        Predicate p1, p2, p3, p4, p5;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$new_indexing_hash'(A,B,C):-[new_hash(C),hash_put(C,all,[]),hash_put(C,var,[]),hash_put(C,lis,[]),hash_put(C,str,[]),hash_put(A,B,C)]
        p1 = new PRED_hash_put_3(a1, a2, a3, cont);
        p2 = new PRED_hash_put_3(a3, s5, s2, p1);
        p3 = new PRED_hash_put_3(a3, s4, s2, p2);
        p4 = new PRED_hash_put_3(a3, s3, s2, p3);
        p5 = new PRED_hash_put_3(a3, s1, s2, p4);
        return new PRED_new_hash_1(a3, p5);
    }
}
