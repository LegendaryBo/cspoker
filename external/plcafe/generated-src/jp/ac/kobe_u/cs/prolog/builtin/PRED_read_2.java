package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.IntegerTerm;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.Term;
import jp.ac.kobe_u.cs.prolog.lang.VariableTerm;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>read/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_read_2 extends Predicate {

    public Term arg1, arg2;

    public PRED_read_2(Term a1, Term a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_read_2(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String toString() {
        return "read(" + arg1 + "," + arg2 + ")";
    }

    public Predicate exec(Prolog engine) {
    // read(A,B):-read_tokens(A,C,D),parse_tokens(B,C),!
        engine.setB0();
        Term a1, a2, a3, a4;
        Predicate p1, p2;
        a1 = arg1;
        a2 = arg2;
    // read(A,B):-['$get_level'(C),read_tokens(A,D,E),parse_tokens(B,D),'$cut'(C)]
        a3 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(3))
        if (! a3.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a4 = new VariableTerm(engine);
        p1 = new PRED_$cut_1(a3, cont);
        p2 = new PRED_parse_tokens_2(a2, a4, p1);
        return new PRED_read_tokens_3(a1, a4, new VariableTerm(engine), p2);
    }
}
