package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.IntegerTerm;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.StructureTerm;
import jp.ac.kobe_u.cs.prolog.lang.SymbolTerm;
import jp.ac.kobe_u.cs.prolog.lang.Term;
import jp.ac.kobe_u.cs.prolog.lang.VariableTerm;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>leash/1</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_leash_1 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("type", 1);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("leash_specifier");
    static Term[] s3 = {s2};
    static StructureTerm s4 = new StructureTerm(s1, s3);
    static SymbolTerm s5 = SymbolTerm.makeSymbol("leash", 1);
    static IntegerTerm si6 = new IntegerTerm(1);
    static Predicate _leash_1_sub_1 = new PRED_leash_1_sub_1();
    static Predicate _leash_1_1 = new PRED_leash_1_1();
    static Predicate _leash_1_2 = new PRED_leash_1_2();

    public Term arg1;

    public PRED_leash_1(Term a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_leash_1(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String toString() {
        return "leash(" + arg1 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_leash_1_1, _leash_1_sub_1);
    }
}

class PRED_leash_1_sub_1 extends PRED_leash_1 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_leash_1_2);
    }
}

class PRED_leash_1_1 extends PRED_leash_1 {
    public Predicate exec(Prolog engine) {
    // leash(A):-nonvar(A),'$leash'(A),!
        Term a1, a2;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // leash(A):-['$get_level'(B),nonvar(A),'$leash'(A),'$cut'(B)]
        a2 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(2))
        if (! a2.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of nonvar(a(1))
        a1 = a1.dereference();
        if (a1.isVariable()) {
            return engine.fail();
        }
        //END inline expansion
        p1 = new PRED_$cut_1(a2, cont);
        return new PRED_$leash_1(a1, p1);
    }
}

class PRED_leash_1_2 extends PRED_leash_1 {
    public Predicate exec(Prolog engine) {
    // leash(A):-illarg(type(leash_specifier),leash(A),1)
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // leash(A):-[illarg(type(leash_specifier),leash(A),1)]
        Term[] y1 = {a1};
        a2 = new StructureTerm(s5, y1);
        return new PRED_illarg_3(s4, a2, si6, cont);
    }
}
