package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.IntegerTerm;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.StructureTerm;
import jp.ac.kobe_u.cs.prolog.lang.SymbolTerm;
import jp.ac.kobe_u.cs.prolog.lang.Term;
import jp.ac.kobe_u.cs.prolog.lang.VariableTerm;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$op1'/3</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$op1_3 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol(":", 2);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("jp.ac.kobe_u.cs.prolog.builtin");
    static SymbolTerm s3 = SymbolTerm.makeSymbol("$op_specifier", 2);
    static SymbolTerm s4 = SymbolTerm.makeSymbol("domain", 2);
    static SymbolTerm s5 = SymbolTerm.makeSymbol("term");
    static SymbolTerm s6 = SymbolTerm.makeSymbol("op", 3);
    static IntegerTerm si7 = new IntegerTerm(2);
    static Predicate _$op1_3_sub_1 = new PRED_$op1_3_sub_1();
    static Predicate _$op1_3_1 = new PRED_$op1_3_1();
    static Predicate _$op1_3_2 = new PRED_$op1_3_2();

    public Term arg1, arg2, arg3;

    public PRED_$op1_3(Term a1, Term a2, Term a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_$op1_3(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String toString() {
        return "$op1(" + arg1 + "," + arg2 + "," + arg3 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$op1_3_1, _$op1_3_sub_1);
    }
}

class PRED_$op1_3_sub_1 extends PRED_$op1_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$op1_3_2);
    }
}

class PRED_$op1_3_1 extends PRED_$op1_3 {
    public Predicate exec(Prolog engine) {
    // '$op1'(A,B,C):-nonvar(B),'$op_specifier'(B,D),!,'$op2'(A,B,C)
        Term a1, a2, a3, a4;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$op1'(A,B,C):-['$get_level'(D),nonvar(B),'$op_specifier'(B,E),'$cut'(D),'$op2'(A,B,C)]
        a4 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(4))
        if (! a4.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of nonvar(a(2))
        a2 = a2.dereference();
        if (a2.isVariable()) {
            return engine.fail();
        }
        //END inline expansion
        p1 = new PRED_$op2_3(a1, a2, a3, cont);
        p2 = new PRED_$cut_1(a4, p1);
        return new PRED_$op_specifier_2(a2, new VariableTerm(engine), p2);
    }
}

class PRED_$op1_3_2 extends PRED_$op1_3 {
    public Predicate exec(Prolog engine) {
    // '$op1'(A,B,C):-findall(D,'$op_specifier'(D,E),F),illarg(domain(term,F),op(A,B,C),2)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$op1'(A,B,C):-[findall(D,'jp.ac.kobe_u.cs.prolog.builtin':'$op_specifier'(D,E),F),illarg(domain(term,F),op(A,B,C),2)]
        a4 = new VariableTerm(engine);
        Term[] y1 = {a4, new VariableTerm(engine)};
        a5 = new StructureTerm(s3, y1);
        Term[] y2 = {s2, a5};
        a6 = new StructureTerm(s1, y2);
        a7 = new VariableTerm(engine);
        Term[] y3 = {s5, a7};
        a8 = new StructureTerm(s4, y3);
        Term[] y4 = {a1, a2, a3};
        a9 = new StructureTerm(s6, y4);
        p1 = new PRED_illarg_3(a8, a9, si7, cont);
        return new PRED_findall_3(a4, a6, a7, p1);
    }
}
