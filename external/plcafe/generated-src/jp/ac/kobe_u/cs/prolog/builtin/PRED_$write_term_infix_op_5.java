package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.SymbolTerm;
import jp.ac.kobe_u.cs.prolog.lang.Term;
import jp.ac.kobe_u.cs.prolog.lang.VariableTerm;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$write_term_infix_op'/5</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$write_term_infix_op_5 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol(",");
    static SymbolTerm s2 = SymbolTerm.makeSymbol("punct");
    static Predicate _$write_term_infix_op_5_var = new PRED_$write_term_infix_op_5_var();
    static Predicate _$write_term_infix_op_5_var_1 = new PRED_$write_term_infix_op_5_var_1();
    static Predicate _$write_term_infix_op_5_1 = new PRED_$write_term_infix_op_5_1();
    static Predicate _$write_term_infix_op_5_2 = new PRED_$write_term_infix_op_5_2();

    public Term arg1, arg2, arg3, arg4, arg5;

    public PRED_$write_term_infix_op_5(Term a1, Term a2, Term a3, Term a4, Term a5, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        arg5 = a5;
        this.cont = cont;
    }

    public PRED_$write_term_infix_op_5(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        arg5 = args[4];
        this.cont = cont;
    }

    public int arity() { return 5; }

    public String toString() {
        return "$write_term_infix_op(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + "," + arg5 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.aregs[4] = arg4;
        engine.aregs[5] = arg5;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$write_term_infix_op_5_var, _$write_term_infix_op_5_2, _$write_term_infix_op_5_2, _$write_term_infix_op_5_var, _$write_term_infix_op_5_2, _$write_term_infix_op_5_2);
    }
}

class PRED_$write_term_infix_op_5_var extends PRED_$write_term_infix_op_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$write_term_infix_op_5_1, _$write_term_infix_op_5_var_1);
    }
}

class PRED_$write_term_infix_op_5_var_1 extends PRED_$write_term_infix_op_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$write_term_infix_op_5_2);
    }
}

class PRED_$write_term_infix_op_5_1 extends PRED_$write_term_infix_op_5 {
    public Predicate exec(Prolog engine) {
    // '$write_term_infix_op'(',',A,punct,B,C):-!,'$write_space_if_needed'(A,punct,C),put_char(C,',')
        Term a1, a2, a3, a4, a5;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$write_term_infix_op'(',',A,punct,B,C):-['$neck_cut','$write_space_if_needed'(A,punct,C),put_char(C,',')]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s1))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a3 = a3.dereference();
        if (a3.isSymbol()){
            if (! a3.equals(s2))
                return engine.fail();
        } else if (a3.isVariable()){
            ((VariableTerm) a3).bind(s2, engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_put_char_2(a5, s1, cont);
        return new PRED_$write_space_if_needed_3(a2, s2, a5, p1);
    }
}

class PRED_$write_term_infix_op_5_2 extends PRED_$write_term_infix_op_5 {
    public Predicate exec(Prolog engine) {
    // '$write_term_infix_op'(A,B,C,D,E):-'$write_atom'(A,B,C,D,E)
        Term a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$write_term_infix_op'(A,B,C,D,E):-['$write_atom'(A,B,C,D,E)]
        return new PRED_$write_atom_5(a1, a2, a3, a4, a5, cont);
    }
}
