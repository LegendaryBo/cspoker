package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$parse_tokens_list_rest'/3</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$parse_tokens_list_rest_3 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("|");
    static IntegerTerm si2 = new IntegerTerm(999);
    static SymbolTerm s3 = SymbolTerm.makeSymbol("]");
    static SymbolTerm s4 = SymbolTerm.makeSymbol(",");
    static SymbolTerm s5 = SymbolTerm.makeSymbol("[]");
    static Predicate _$parse_tokens_list_rest_3_var = new PRED_$parse_tokens_list_rest_3_var();
    static Predicate _$parse_tokens_list_rest_3_var_1 = new PRED_$parse_tokens_list_rest_3_var_1();
    static Predicate _$parse_tokens_list_rest_3_var_2 = new PRED_$parse_tokens_list_rest_3_var_2();
    static Predicate _$parse_tokens_list_rest_3_con = new PRED_$parse_tokens_list_rest_3_con();
    static Predicate _$parse_tokens_list_rest_3_con_1 = new PRED_$parse_tokens_list_rest_3_con_1();
    static Predicate _$parse_tokens_list_rest_3_lis = new PRED_$parse_tokens_list_rest_3_lis();
    static Predicate _$parse_tokens_list_rest_3_lis_1 = new PRED_$parse_tokens_list_rest_3_lis_1();
    static Predicate _$parse_tokens_list_rest_3_1 = new PRED_$parse_tokens_list_rest_3_1();
    static Predicate _$parse_tokens_list_rest_3_2 = new PRED_$parse_tokens_list_rest_3_2();
    static Predicate _$parse_tokens_list_rest_3_3 = new PRED_$parse_tokens_list_rest_3_3();

    public Term arg1, arg2, arg3;

    public PRED_$parse_tokens_list_rest_3(Term a1, Term a2, Term a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_$parse_tokens_list_rest_3(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String toString() {
        return "$parse_tokens_list_rest(" + arg1 + "," + arg2 + "," + arg3 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$parse_tokens_list_rest_3_var, _$parse_tokens_list_rest_3_1, _$parse_tokens_list_rest_3_1, _$parse_tokens_list_rest_3_con, _$parse_tokens_list_rest_3_1, _$parse_tokens_list_rest_3_lis);
    }
}

class PRED_$parse_tokens_list_rest_3_var extends PRED_$parse_tokens_list_rest_3 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$parse_tokens_list_rest_3_1, _$parse_tokens_list_rest_3_var_1);
    }
}

class PRED_$parse_tokens_list_rest_3_var_1 extends PRED_$parse_tokens_list_rest_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$parse_tokens_list_rest_3_2, _$parse_tokens_list_rest_3_var_2);
    }
}

class PRED_$parse_tokens_list_rest_3_var_2 extends PRED_$parse_tokens_list_rest_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$parse_tokens_list_rest_3_3);
    }
}

class PRED_$parse_tokens_list_rest_3_con extends PRED_$parse_tokens_list_rest_3 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$parse_tokens_list_rest_3_1, _$parse_tokens_list_rest_3_con_1);
    }
}

class PRED_$parse_tokens_list_rest_3_con_1 extends PRED_$parse_tokens_list_rest_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$parse_tokens_list_rest_3_3);
    }
}

class PRED_$parse_tokens_list_rest_3_lis extends PRED_$parse_tokens_list_rest_3 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$parse_tokens_list_rest_3_1, _$parse_tokens_list_rest_3_lis_1);
    }
}

class PRED_$parse_tokens_list_rest_3_lis_1 extends PRED_$parse_tokens_list_rest_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$parse_tokens_list_rest_3_2);
    }
}

class PRED_$parse_tokens_list_rest_3_1 extends PRED_$parse_tokens_list_rest_3 {
    public Predicate exec(Prolog engine) {
    // '$parse_tokens_list_rest'(A,B,C):-'C'(B,'|',D),!,'$parse_tokens'(A,999,D,E),'$parse_tokens_expect'(']',E,C)
        Term a1, a2, a3, a4, a5, a6;
        Predicate p1, p2, p3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$parse_tokens_list_rest'(A,B,C):-['$get_level'(D),'C'(B,'|',E),'$cut'(D),'$parse_tokens'(A,999,E,F),'$parse_tokens_expect'(']',F,C)]
        a4 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(4))
        if (! a4.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a5 = new VariableTerm(engine);
        a6 = new VariableTerm(engine);
        p1 = new PRED_$parse_tokens_expect_3(s3, a6, a3, cont);
        p2 = new PRED_$parse_tokens_4(a1, si2, a5, a6, p1);
        p3 = new PRED_$cut_1(a4, p2);
        return new PRED_C_3(a2, s1, a5, p3);
    }
}

class PRED_$parse_tokens_list_rest_3_2 extends PRED_$parse_tokens_list_rest_3 {
    public Predicate exec(Prolog engine) {
    // '$parse_tokens_list_rest'([A|B],C,D):-'C'(C,',',E),!,'$parse_tokens'(A,999,E,F),'$parse_tokens_skip_spaces'(F,G),'$parse_tokens_list_rest'(B,G,D)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9;
        Predicate p1, p2, p3, p4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$parse_tokens_list_rest'([A|B],C,D):-['$get_level'(E),'C'(C,',',F),'$cut'(E),'$parse_tokens'(A,999,F,G),'$parse_tokens_skip_spaces'(G,H),'$parse_tokens_list_rest'(B,H,D)]
        a1 = a1.dereference();
        if (a1.isList()){
            Term[] args = {((ListTerm)a1).car(), ((ListTerm)a1).cdr()};
            a4 = args[0];
            a5 = args[1];
        } else if (a1.isVariable()){
            a4 = new VariableTerm(engine);
            a5 = new VariableTerm(engine);
            ((VariableTerm) a1).bind(new ListTerm(a4, a5), engine.trail);
        } else {
            return engine.fail();
        }
        a6 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(6))
        if (! a6.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a7 = new VariableTerm(engine);
        a8 = new VariableTerm(engine);
        a9 = new VariableTerm(engine);
        p1 = new PRED_$parse_tokens_list_rest_3(a5, a9, a3, cont);
        p2 = new PRED_$parse_tokens_skip_spaces_2(a8, a9, p1);
        p3 = new PRED_$parse_tokens_4(a4, si2, a7, a8, p2);
        p4 = new PRED_$cut_1(a6, p3);
        return new PRED_C_3(a2, s4, a7, p4);
    }
}

class PRED_$parse_tokens_list_rest_3_3 extends PRED_$parse_tokens_list_rest_3 {
    public Predicate exec(Prolog engine) {
    // '$parse_tokens_list_rest'([],A,B):-'$parse_tokens_expect'(']',A,B)
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$parse_tokens_list_rest'([],A,B):-['$parse_tokens_expect'(']',A,B)]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s5))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s5, engine.trail);
        } else {
            return engine.fail();
        }
        return new PRED_$parse_tokens_expect_3(s3, a2, a3, cont);
    }
}
