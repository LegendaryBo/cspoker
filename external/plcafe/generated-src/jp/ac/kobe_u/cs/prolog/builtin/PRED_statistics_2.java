package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.IntegerTerm;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.StructureTerm;
import jp.ac.kobe_u.cs.prolog.lang.SymbolTerm;
import jp.ac.kobe_u.cs.prolog.lang.Term;
import jp.ac.kobe_u.cs.prolog.lang.VariableTerm;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>statistics/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_statistics_2 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol(":", 2);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("jp.ac.kobe_u.cs.prolog.builtin");
    static SymbolTerm s3 = SymbolTerm.makeSymbol("$statistics_mode", 1);
    static SymbolTerm s4 = SymbolTerm.makeSymbol("domain", 2);
    static SymbolTerm s5 = SymbolTerm.makeSymbol("atom");
    static SymbolTerm s6 = SymbolTerm.makeSymbol("statistics", 2);
    static IntegerTerm si7 = new IntegerTerm(1);
    static Predicate _statistics_2_sub_1 = new PRED_statistics_2_sub_1();
    static Predicate _statistics_2_1 = new PRED_statistics_2_1();
    static Predicate _statistics_2_2 = new PRED_statistics_2_2();

    public Term arg1, arg2;

    public PRED_statistics_2(Term a1, Term a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_statistics_2(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String toString() {
        return "statistics(" + arg1 + "," + arg2 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_statistics_2_1, _statistics_2_sub_1);
    }
}

class PRED_statistics_2_sub_1 extends PRED_statistics_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_statistics_2_2);
    }
}

class PRED_statistics_2_1 extends PRED_statistics_2 {
    public Predicate exec(Prolog engine) {
    // statistics(A,B):-nonvar(A),'$statistics_mode'(A),!,'$statistics'(A,B)
        Term a1, a2, a3;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // statistics(A,B):-['$get_level'(C),nonvar(A),'$statistics_mode'(A),'$cut'(C),'$statistics'(A,B)]
        a3 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(3))
        if (! a3.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of nonvar(a(1))
        a1 = a1.dereference();
        if (a1.isVariable()) {
            return engine.fail();
        }
        //END inline expansion
        p1 = new PRED_$statistics_2(a1, a2, cont);
        p2 = new PRED_$cut_1(a3, p1);
        return new PRED_$statistics_mode_1(a1, p2);
    }
}

class PRED_statistics_2_2 extends PRED_statistics_2 {
    public Predicate exec(Prolog engine) {
    // statistics(A,B):-findall(C,'$statistics_mode'(C),D),illarg(domain(atom,D),statistics(A,B),1)
        Term a1, a2, a3, a4, a5, a6, a7, a8;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // statistics(A,B):-[findall(C,'jp.ac.kobe_u.cs.prolog.builtin':'$statistics_mode'(C),D),illarg(domain(atom,D),statistics(A,B),1)]
        a3 = new VariableTerm(engine);
        Term[] y1 = {a3};
        a4 = new StructureTerm(s3, y1);
        Term[] y2 = {s2, a4};
        a5 = new StructureTerm(s1, y2);
        a6 = new VariableTerm(engine);
        Term[] y3 = {s5, a6};
        a7 = new StructureTerm(s4, y3);
        Term[] y4 = {a1, a2};
        a8 = new StructureTerm(s6, y4);
        p1 = new PRED_illarg_3(a7, a8, si7, cont);
        return new PRED_findall_3(a3, a5, a6, p1);
    }
}
