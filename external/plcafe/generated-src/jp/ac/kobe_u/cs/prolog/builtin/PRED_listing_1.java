package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.IllegalTypeException;
import jp.ac.kobe_u.cs.prolog.lang.IntegerTerm;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.StructureTerm;
import jp.ac.kobe_u.cs.prolog.lang.SymbolTerm;
import jp.ac.kobe_u.cs.prolog.lang.Term;
import jp.ac.kobe_u.cs.prolog.lang.VariableTerm;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>listing/1</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_listing_1 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("var");
    static SymbolTerm s2 = SymbolTerm.makeSymbol("listing", 1);
    static IntegerTerm si3 = new IntegerTerm(1);
    static SymbolTerm s4 = SymbolTerm.makeSymbol("/", 2);
    static SymbolTerm s5 = SymbolTerm.makeSymbol("user");
    static SymbolTerm s6 = SymbolTerm.makeSymbol(":", 2);
    static SymbolTerm s7 = SymbolTerm.makeSymbol("type", 1);
    static SymbolTerm s8 = SymbolTerm.makeSymbol("predicate_indicator");
    static Term[] s9 = {s8};
    static StructureTerm s10 = new StructureTerm(s7, s9);
    static Predicate _listing_1_var = new PRED_listing_1_var();
    static Predicate _listing_1_var_1 = new PRED_listing_1_var_1();
    static Predicate _listing_1_var_2 = new PRED_listing_1_var_2();
    static Predicate _listing_1_var_3 = new PRED_listing_1_var_3();
    static Predicate _listing_1_var_4 = new PRED_listing_1_var_4();
    static Predicate _listing_1_int = new PRED_listing_1_int();
    static Predicate _listing_1_int_1 = new PRED_listing_1_int_1();
    static Predicate _listing_1_int_2 = new PRED_listing_1_int_2();
    static Predicate _listing_1_str = new PRED_listing_1_str();
    static Predicate _listing_1_str_0 = new PRED_listing_1_str_0();
    static Predicate _listing_1_str_0_1 = new PRED_listing_1_str_0_1();
    static Predicate _listing_1_str_0_2 = new PRED_listing_1_str_0_2();
    static Predicate _listing_1_str_0_3 = new PRED_listing_1_str_0_3();
    static Predicate _listing_1_str_1 = new PRED_listing_1_str_1();
    static Predicate _listing_1_str_1_1 = new PRED_listing_1_str_1_1();
    static Predicate _listing_1_str_1_2 = new PRED_listing_1_str_1_2();
    static Predicate _listing_1_str_1_3 = new PRED_listing_1_str_1_3();
    static Predicate _listing_1_1 = new PRED_listing_1_1();
    static Predicate _listing_1_2 = new PRED_listing_1_2();
    static Predicate _listing_1_3 = new PRED_listing_1_3();
    static Predicate _listing_1_4 = new PRED_listing_1_4();
    static Predicate _listing_1_5 = new PRED_listing_1_5();
    static java.util.Hashtable<Term, Predicate> str = new java.util.Hashtable<Term, Predicate>(2);
    static {
        str.put(s4, _listing_1_str_0);
        str.put(s6, _listing_1_str_1);
    }

    public Term arg1;

    public PRED_listing_1(Term a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_listing_1(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String toString() {
        return "listing(" + arg1 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_listing_1_var, _listing_1_int, _listing_1_int, _listing_1_int, _listing_1_str, _listing_1_int);
    }
}

class PRED_listing_1_var extends PRED_listing_1 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_listing_1_1, _listing_1_var_1);
    }
}

class PRED_listing_1_var_1 extends PRED_listing_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_listing_1_2, _listing_1_var_2);
    }
}

class PRED_listing_1_var_2 extends PRED_listing_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_listing_1_3, _listing_1_var_3);
    }
}

class PRED_listing_1_var_3 extends PRED_listing_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_listing_1_4, _listing_1_var_4);
    }
}

class PRED_listing_1_var_4 extends PRED_listing_1 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_listing_1_5);
    }
}

class PRED_listing_1_int extends PRED_listing_1 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_listing_1_1, _listing_1_int_1);
    }
}

class PRED_listing_1_int_1 extends PRED_listing_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_listing_1_2, _listing_1_int_2);
    }
}

class PRED_listing_1_int_2 extends PRED_listing_1 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_listing_1_5);
    }
}

class PRED_listing_1_str extends PRED_listing_1 {
    public Predicate exec(Prolog engine) {
        return engine.switch_on_hash(str, _listing_1_int);
    }
}

class PRED_listing_1_str_0 extends PRED_listing_1 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_listing_1_1, _listing_1_str_0_1);
    }
}

class PRED_listing_1_str_0_1 extends PRED_listing_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_listing_1_2, _listing_1_str_0_2);
    }
}

class PRED_listing_1_str_0_2 extends PRED_listing_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_listing_1_3, _listing_1_str_0_3);
    }
}

class PRED_listing_1_str_0_3 extends PRED_listing_1 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_listing_1_5);
    }
}

class PRED_listing_1_str_1 extends PRED_listing_1 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_listing_1_1, _listing_1_str_1_1);
    }
}

class PRED_listing_1_str_1_1 extends PRED_listing_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_listing_1_2, _listing_1_str_1_2);
    }
}

class PRED_listing_1_str_1_2 extends PRED_listing_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_listing_1_4, _listing_1_str_1_3);
    }
}

class PRED_listing_1_str_1_3 extends PRED_listing_1 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_listing_1_5);
    }
}

class PRED_listing_1_1 extends PRED_listing_1 {
    public Predicate exec(Prolog engine) {
    // listing(A):-var(A),!,illarg(var,listing(A),1)
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // listing(A):-['$get_level'(B),var(A),'$cut'(B),illarg(var,listing(A),1)]
        a2 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(2))
        if (! a2.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of var(a(1))
        a1 = a1.dereference();
        if (! a1.isVariable()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(2))
        a2 = a2.dereference();
        if (! a2.isInteger()) {
            throw new IllegalTypeException("integer", a2);
        } else {
            engine.cut(((IntegerTerm) a2).intValue());
        }
        //END inline expansion
        Term[] y1 = {a1};
        a3 = new StructureTerm(s2, y1);
        return new PRED_illarg_3(s1, a3, si3, cont);
    }
}

class PRED_listing_1_2 extends PRED_listing_1 {
    public Predicate exec(Prolog engine) {
    // listing(A):-atom(A),!,'$listing'(B,A)
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // listing(A):-['$get_level'(B),atom(A),'$cut'(B),'$listing'(C,A)]
        a2 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(2))
        if (! a2.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of atom(a(1))
        a1 = a1.dereference();
        if (! a1.isSymbol()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(2))
        a2 = a2.dereference();
        if (! a2.isInteger()) {
            throw new IllegalTypeException("integer", a2);
        } else {
            engine.cut(((IntegerTerm) a2).intValue());
        }
        //END inline expansion
        return new PRED_$listing_2(new VariableTerm(engine), a1, cont);
    }
}

class PRED_listing_1_3 extends PRED_listing_1 {
    public Predicate exec(Prolog engine) {
    // listing(A/B):-!,'$listing'(A/B,user)
        Term a1, a2, a3, a4;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // listing(A/B):-['$neck_cut','$listing'(A/B,user)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s4.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a2 = args[0];
            a3 = args[1];
        } else if (a1.isVariable()){
            a2 = new VariableTerm(engine);
            a3 = new VariableTerm(engine);
            Term[] args = {a2, a3};
            ((VariableTerm) a1).bind(new StructureTerm(s4, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        Term[] y1 = {a2, a3};
        a4 = new StructureTerm(s4, y1);
        return new PRED_$listing_2(a4, s5, cont);
    }
}

class PRED_listing_1_4 extends PRED_listing_1 {
    public Predicate exec(Prolog engine) {
    // listing(A:B):-atom(A),!,'$listing'(B,A)
        Term a1, a2, a3, a4;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // listing(A:B):-['$get_level'(C),atom(A),'$cut'(C),'$listing'(B,A)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s6.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a2 = args[0];
            a3 = args[1];
        } else if (a1.isVariable()){
            a2 = new VariableTerm(engine);
            a3 = new VariableTerm(engine);
            Term[] args = {a2, a3};
            ((VariableTerm) a1).bind(new StructureTerm(s6, args), engine.trail);
        } else {
            return engine.fail();
        }
        a4 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(4))
        if (! a4.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of atom(a(2))
        a2 = a2.dereference();
        if (! a2.isSymbol()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(4))
        a4 = a4.dereference();
        if (! a4.isInteger()) {
            throw new IllegalTypeException("integer", a4);
        } else {
            engine.cut(((IntegerTerm) a4).intValue());
        }
        //END inline expansion
        return new PRED_$listing_2(a3, a2, cont);
    }
}

class PRED_listing_1_5 extends PRED_listing_1 {
    public Predicate exec(Prolog engine) {
    // listing(A):-illarg(type(predicate_indicator),listing(A),1)
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // listing(A):-[illarg(type(predicate_indicator),listing(A),1)]
        Term[] y1 = {a1};
        a2 = new StructureTerm(s2, y1);
        return new PRED_illarg_3(s10, a2, si3, cont);
    }
}
