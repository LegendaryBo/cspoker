package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.IntegerTerm;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.StructureTerm;
import jp.ac.kobe_u.cs.prolog.lang.SymbolTerm;
import jp.ac.kobe_u.cs.prolog.lang.Term;
import jp.ac.kobe_u.cs.prolog.lang.VariableTerm;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$init'/0</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_$init_0 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("jp.ac.kobe_u.cs.prolog.builtin");
    static SymbolTerm s2 = SymbolTerm.makeSymbol("/", 2);
    static SymbolTerm s3 = SymbolTerm.makeSymbol("$tokens");
    static IntegerTerm si4 = new IntegerTerm(1);
    static Term[] s5 = {s3, si4};
    static StructureTerm s6 = new StructureTerm(s2, s5);
    static SymbolTerm s7 = SymbolTerm.makeSymbol(":", 2);
    static SymbolTerm s8 = SymbolTerm.makeSymbol(":-", 2);
    static SymbolTerm s9 = SymbolTerm.makeSymbol("$current_operator", 3);
    static IntegerTerm si10 = new IntegerTerm(1200);
    static SymbolTerm s11 = SymbolTerm.makeSymbol("xfx");
    static SymbolTerm s12 = SymbolTerm.makeSymbol(":-");
    static Term[] s13 = {si10, s11, s12};
    static StructureTerm s14 = new StructureTerm(s9, s13);
    static SymbolTerm s15 = SymbolTerm.makeSymbol("true");
    static Term[] s16 = {s14, s15};
    static StructureTerm s17 = new StructureTerm(s8, s16);
    static Term[] s18 = {s1, s17};
    static StructureTerm s19 = new StructureTerm(s7, s18);
    static SymbolTerm s20 = SymbolTerm.makeSymbol("-->");
    static Term[] s21 = {si10, s11, s20};
    static StructureTerm s22 = new StructureTerm(s9, s21);
    static Term[] s23 = {s22, s15};
    static StructureTerm s24 = new StructureTerm(s8, s23);
    static Term[] s25 = {s1, s24};
    static StructureTerm s26 = new StructureTerm(s7, s25);
    static SymbolTerm s27 = SymbolTerm.makeSymbol("fx");
    static Term[] s28 = {si10, s27, s12};
    static StructureTerm s29 = new StructureTerm(s9, s28);
    static Term[] s30 = {s29, s15};
    static StructureTerm s31 = new StructureTerm(s8, s30);
    static Term[] s32 = {s1, s31};
    static StructureTerm s33 = new StructureTerm(s7, s32);
    static SymbolTerm s34 = SymbolTerm.makeSymbol("?-");
    static Term[] s35 = {si10, s27, s34};
    static StructureTerm s36 = new StructureTerm(s9, s35);
    static Term[] s37 = {s36, s15};
    static StructureTerm s38 = new StructureTerm(s8, s37);
    static Term[] s39 = {s1, s38};
    static StructureTerm s40 = new StructureTerm(s7, s39);
    static IntegerTerm si41 = new IntegerTerm(1150);
    static SymbolTerm s42 = SymbolTerm.makeSymbol("package");
    static Term[] s43 = {si41, s27, s42};
    static StructureTerm s44 = new StructureTerm(s9, s43);
    static Term[] s45 = {s44, s15};
    static StructureTerm s46 = new StructureTerm(s8, s45);
    static Term[] s47 = {s1, s46};
    static StructureTerm s48 = new StructureTerm(s7, s47);
    static SymbolTerm s49 = SymbolTerm.makeSymbol("import");
    static Term[] s50 = {si41, s27, s49};
    static StructureTerm s51 = new StructureTerm(s9, s50);
    static Term[] s52 = {s51, s15};
    static StructureTerm s53 = new StructureTerm(s8, s52);
    static Term[] s54 = {s1, s53};
    static StructureTerm s55 = new StructureTerm(s7, s54);
    static SymbolTerm s56 = SymbolTerm.makeSymbol("public");
    static Term[] s57 = {si41, s27, s56};
    static StructureTerm s58 = new StructureTerm(s9, s57);
    static Term[] s59 = {s58, s15};
    static StructureTerm s60 = new StructureTerm(s8, s59);
    static Term[] s61 = {s1, s60};
    static StructureTerm s62 = new StructureTerm(s7, s61);
    static SymbolTerm s63 = SymbolTerm.makeSymbol("dynamic");
    static Term[] s64 = {si41, s27, s63};
    static StructureTerm s65 = new StructureTerm(s9, s64);
    static Term[] s66 = {s65, s15};
    static StructureTerm s67 = new StructureTerm(s8, s66);
    static Term[] s68 = {s1, s67};
    static StructureTerm s69 = new StructureTerm(s7, s68);
    static SymbolTerm s70 = SymbolTerm.makeSymbol("meta_predicate");
    static Term[] s71 = {si41, s27, s70};
    static StructureTerm s72 = new StructureTerm(s9, s71);
    static Term[] s73 = {s72, s15};
    static StructureTerm s74 = new StructureTerm(s8, s73);
    static Term[] s75 = {s1, s74};
    static StructureTerm s76 = new StructureTerm(s7, s75);
    static SymbolTerm s77 = SymbolTerm.makeSymbol("mode");
    static Term[] s78 = {si41, s27, s77};
    static StructureTerm s79 = new StructureTerm(s9, s78);
    static Term[] s80 = {s79, s15};
    static StructureTerm s81 = new StructureTerm(s8, s80);
    static Term[] s82 = {s1, s81};
    static StructureTerm s83 = new StructureTerm(s7, s82);
    static SymbolTerm s84 = SymbolTerm.makeSymbol("multifile");
    static Term[] s85 = {si41, s27, s84};
    static StructureTerm s86 = new StructureTerm(s9, s85);
    static Term[] s87 = {s86, s15};
    static StructureTerm s88 = new StructureTerm(s8, s87);
    static Term[] s89 = {s1, s88};
    static StructureTerm s90 = new StructureTerm(s7, s89);
    static SymbolTerm s91 = SymbolTerm.makeSymbol("block");
    static Term[] s92 = {si41, s27, s91};
    static StructureTerm s93 = new StructureTerm(s9, s92);
    static Term[] s94 = {s93, s15};
    static StructureTerm s95 = new StructureTerm(s8, s94);
    static Term[] s96 = {s1, s95};
    static StructureTerm s97 = new StructureTerm(s7, s96);
    static IntegerTerm si98 = new IntegerTerm(1100);
    static SymbolTerm s99 = SymbolTerm.makeSymbol("xfy");
    static SymbolTerm s100 = SymbolTerm.makeSymbol(";");
    static Term[] s101 = {si98, s99, s100};
    static StructureTerm s102 = new StructureTerm(s9, s101);
    static Term[] s103 = {s102, s15};
    static StructureTerm s104 = new StructureTerm(s8, s103);
    static Term[] s105 = {s1, s104};
    static StructureTerm s106 = new StructureTerm(s7, s105);
    static IntegerTerm si107 = new IntegerTerm(1050);
    static SymbolTerm s108 = SymbolTerm.makeSymbol("->");
    static Term[] s109 = {si107, s99, s108};
    static StructureTerm s110 = new StructureTerm(s9, s109);
    static Term[] s111 = {s110, s15};
    static StructureTerm s112 = new StructureTerm(s8, s111);
    static Term[] s113 = {s1, s112};
    static StructureTerm s114 = new StructureTerm(s7, s113);
    static IntegerTerm si115 = new IntegerTerm(1000);
    static SymbolTerm s116 = SymbolTerm.makeSymbol(",");
    static Term[] s117 = {si115, s99, s116};
    static StructureTerm s118 = new StructureTerm(s9, s117);
    static Term[] s119 = {s118, s15};
    static StructureTerm s120 = new StructureTerm(s8, s119);
    static Term[] s121 = {s1, s120};
    static StructureTerm s122 = new StructureTerm(s7, s121);
    static IntegerTerm si123 = new IntegerTerm(900);
    static SymbolTerm s124 = SymbolTerm.makeSymbol("fy");
    static SymbolTerm s125 = SymbolTerm.makeSymbol("\\+");
    static Term[] s126 = {si123, s124, s125};
    static StructureTerm s127 = new StructureTerm(s9, s126);
    static Term[] s128 = {s127, s15};
    static StructureTerm s129 = new StructureTerm(s8, s128);
    static Term[] s130 = {s1, s129};
    static StructureTerm s131 = new StructureTerm(s7, s130);
    static IntegerTerm si132 = new IntegerTerm(700);
    static SymbolTerm s133 = SymbolTerm.makeSymbol("=");
    static Term[] s134 = {si132, s11, s133};
    static StructureTerm s135 = new StructureTerm(s9, s134);
    static Term[] s136 = {s135, s15};
    static StructureTerm s137 = new StructureTerm(s8, s136);
    static Term[] s138 = {s1, s137};
    static StructureTerm s139 = new StructureTerm(s7, s138);
    static SymbolTerm s140 = SymbolTerm.makeSymbol("\\=");
    static Term[] s141 = {si132, s11, s140};
    static StructureTerm s142 = new StructureTerm(s9, s141);
    static Term[] s143 = {s142, s15};
    static StructureTerm s144 = new StructureTerm(s8, s143);
    static Term[] s145 = {s1, s144};
    static StructureTerm s146 = new StructureTerm(s7, s145);
    static SymbolTerm s147 = SymbolTerm.makeSymbol("==");
    static Term[] s148 = {si132, s11, s147};
    static StructureTerm s149 = new StructureTerm(s9, s148);
    static Term[] s150 = {s149, s15};
    static StructureTerm s151 = new StructureTerm(s8, s150);
    static Term[] s152 = {s1, s151};
    static StructureTerm s153 = new StructureTerm(s7, s152);
    static SymbolTerm s154 = SymbolTerm.makeSymbol("\\==");
    static Term[] s155 = {si132, s11, s154};
    static StructureTerm s156 = new StructureTerm(s9, s155);
    static Term[] s157 = {s156, s15};
    static StructureTerm s158 = new StructureTerm(s8, s157);
    static Term[] s159 = {s1, s158};
    static StructureTerm s160 = new StructureTerm(s7, s159);
    static SymbolTerm s161 = SymbolTerm.makeSymbol("@<");
    static Term[] s162 = {si132, s11, s161};
    static StructureTerm s163 = new StructureTerm(s9, s162);
    static Term[] s164 = {s163, s15};
    static StructureTerm s165 = new StructureTerm(s8, s164);
    static Term[] s166 = {s1, s165};
    static StructureTerm s167 = new StructureTerm(s7, s166);
    static SymbolTerm s168 = SymbolTerm.makeSymbol("@>");
    static Term[] s169 = {si132, s11, s168};
    static StructureTerm s170 = new StructureTerm(s9, s169);
    static Term[] s171 = {s170, s15};
    static StructureTerm s172 = new StructureTerm(s8, s171);
    static Term[] s173 = {s1, s172};
    static StructureTerm s174 = new StructureTerm(s7, s173);
    static SymbolTerm s175 = SymbolTerm.makeSymbol("@=<");
    static Term[] s176 = {si132, s11, s175};
    static StructureTerm s177 = new StructureTerm(s9, s176);
    static Term[] s178 = {s177, s15};
    static StructureTerm s179 = new StructureTerm(s8, s178);
    static Term[] s180 = {s1, s179};
    static StructureTerm s181 = new StructureTerm(s7, s180);
    static SymbolTerm s182 = SymbolTerm.makeSymbol("@>=");
    static Term[] s183 = {si132, s11, s182};
    static StructureTerm s184 = new StructureTerm(s9, s183);
    static Term[] s185 = {s184, s15};
    static StructureTerm s186 = new StructureTerm(s8, s185);
    static Term[] s187 = {s1, s186};
    static StructureTerm s188 = new StructureTerm(s7, s187);
    static SymbolTerm s189 = SymbolTerm.makeSymbol("=..");
    static Term[] s190 = {si132, s11, s189};
    static StructureTerm s191 = new StructureTerm(s9, s190);
    static Term[] s192 = {s191, s15};
    static StructureTerm s193 = new StructureTerm(s8, s192);
    static Term[] s194 = {s1, s193};
    static StructureTerm s195 = new StructureTerm(s7, s194);
    static SymbolTerm s196 = SymbolTerm.makeSymbol("is");
    static Term[] s197 = {si132, s11, s196};
    static StructureTerm s198 = new StructureTerm(s9, s197);
    static Term[] s199 = {s198, s15};
    static StructureTerm s200 = new StructureTerm(s8, s199);
    static Term[] s201 = {s1, s200};
    static StructureTerm s202 = new StructureTerm(s7, s201);
    static SymbolTerm s203 = SymbolTerm.makeSymbol("=:=");
    static Term[] s204 = {si132, s11, s203};
    static StructureTerm s205 = new StructureTerm(s9, s204);
    static Term[] s206 = {s205, s15};
    static StructureTerm s207 = new StructureTerm(s8, s206);
    static Term[] s208 = {s1, s207};
    static StructureTerm s209 = new StructureTerm(s7, s208);
    static SymbolTerm s210 = SymbolTerm.makeSymbol("=\\=");
    static Term[] s211 = {si132, s11, s210};
    static StructureTerm s212 = new StructureTerm(s9, s211);
    static Term[] s213 = {s212, s15};
    static StructureTerm s214 = new StructureTerm(s8, s213);
    static Term[] s215 = {s1, s214};
    static StructureTerm s216 = new StructureTerm(s7, s215);
    static SymbolTerm s217 = SymbolTerm.makeSymbol("<");
    static Term[] s218 = {si132, s11, s217};
    static StructureTerm s219 = new StructureTerm(s9, s218);
    static Term[] s220 = {s219, s15};
    static StructureTerm s221 = new StructureTerm(s8, s220);
    static Term[] s222 = {s1, s221};
    static StructureTerm s223 = new StructureTerm(s7, s222);
    static SymbolTerm s224 = SymbolTerm.makeSymbol(">");
    static Term[] s225 = {si132, s11, s224};
    static StructureTerm s226 = new StructureTerm(s9, s225);
    static Term[] s227 = {s226, s15};
    static StructureTerm s228 = new StructureTerm(s8, s227);
    static Term[] s229 = {s1, s228};
    static StructureTerm s230 = new StructureTerm(s7, s229);
    static SymbolTerm s231 = SymbolTerm.makeSymbol("=<");
    static Term[] s232 = {si132, s11, s231};
    static StructureTerm s233 = new StructureTerm(s9, s232);
    static Term[] s234 = {s233, s15};
    static StructureTerm s235 = new StructureTerm(s8, s234);
    static Term[] s236 = {s1, s235};
    static StructureTerm s237 = new StructureTerm(s7, s236);
    static SymbolTerm s238 = SymbolTerm.makeSymbol(">=");
    static Term[] s239 = {si132, s11, s238};
    static StructureTerm s240 = new StructureTerm(s9, s239);
    static Term[] s241 = {s240, s15};
    static StructureTerm s242 = new StructureTerm(s8, s241);
    static Term[] s243 = {s1, s242};
    static StructureTerm s244 = new StructureTerm(s7, s243);
    static IntegerTerm si245 = new IntegerTerm(550);
    static SymbolTerm s246 = SymbolTerm.makeSymbol(":");
    static Term[] s247 = {si245, s99, s246};
    static StructureTerm s248 = new StructureTerm(s9, s247);
    static Term[] s249 = {s248, s15};
    static StructureTerm s250 = new StructureTerm(s8, s249);
    static Term[] s251 = {s1, s250};
    static StructureTerm s252 = new StructureTerm(s7, s251);
    static IntegerTerm si253 = new IntegerTerm(500);
    static SymbolTerm s254 = SymbolTerm.makeSymbol("yfx");
    static SymbolTerm s255 = SymbolTerm.makeSymbol("+");
    static Term[] s256 = {si253, s254, s255};
    static StructureTerm s257 = new StructureTerm(s9, s256);
    static Term[] s258 = {s257, s15};
    static StructureTerm s259 = new StructureTerm(s8, s258);
    static Term[] s260 = {s1, s259};
    static StructureTerm s261 = new StructureTerm(s7, s260);
    static SymbolTerm s262 = SymbolTerm.makeSymbol("-");
    static Term[] s263 = {si253, s254, s262};
    static StructureTerm s264 = new StructureTerm(s9, s263);
    static Term[] s265 = {s264, s15};
    static StructureTerm s266 = new StructureTerm(s8, s265);
    static Term[] s267 = {s1, s266};
    static StructureTerm s268 = new StructureTerm(s7, s267);
    static SymbolTerm s269 = SymbolTerm.makeSymbol("#");
    static Term[] s270 = {si253, s254, s269};
    static StructureTerm s271 = new StructureTerm(s9, s270);
    static Term[] s272 = {s271, s15};
    static StructureTerm s273 = new StructureTerm(s8, s272);
    static Term[] s274 = {s1, s273};
    static StructureTerm s275 = new StructureTerm(s7, s274);
    static SymbolTerm s276 = SymbolTerm.makeSymbol("/\\");
    static Term[] s277 = {si253, s254, s276};
    static StructureTerm s278 = new StructureTerm(s9, s277);
    static Term[] s279 = {s278, s15};
    static StructureTerm s280 = new StructureTerm(s8, s279);
    static Term[] s281 = {s1, s280};
    static StructureTerm s282 = new StructureTerm(s7, s281);
    static SymbolTerm s283 = SymbolTerm.makeSymbol("\\/");
    static Term[] s284 = {si253, s254, s283};
    static StructureTerm s285 = new StructureTerm(s9, s284);
    static Term[] s286 = {s285, s15};
    static StructureTerm s287 = new StructureTerm(s8, s286);
    static Term[] s288 = {s1, s287};
    static StructureTerm s289 = new StructureTerm(s7, s288);
    static Term[] s290 = {si253, s27, s255};
    static StructureTerm s291 = new StructureTerm(s9, s290);
    static Term[] s292 = {s291, s15};
    static StructureTerm s293 = new StructureTerm(s8, s292);
    static Term[] s294 = {s1, s293};
    static StructureTerm s295 = new StructureTerm(s7, s294);
    static IntegerTerm si296 = new IntegerTerm(400);
    static SymbolTerm s297 = SymbolTerm.makeSymbol("*");
    static Term[] s298 = {si296, s254, s297};
    static StructureTerm s299 = new StructureTerm(s9, s298);
    static Term[] s300 = {s299, s15};
    static StructureTerm s301 = new StructureTerm(s8, s300);
    static Term[] s302 = {s1, s301};
    static StructureTerm s303 = new StructureTerm(s7, s302);
    static SymbolTerm s304 = SymbolTerm.makeSymbol("/");
    static Term[] s305 = {si296, s254, s304};
    static StructureTerm s306 = new StructureTerm(s9, s305);
    static Term[] s307 = {s306, s15};
    static StructureTerm s308 = new StructureTerm(s8, s307);
    static Term[] s309 = {s1, s308};
    static StructureTerm s310 = new StructureTerm(s7, s309);
    static SymbolTerm s311 = SymbolTerm.makeSymbol("//");
    static Term[] s312 = {si296, s254, s311};
    static StructureTerm s313 = new StructureTerm(s9, s312);
    static Term[] s314 = {s313, s15};
    static StructureTerm s315 = new StructureTerm(s8, s314);
    static Term[] s316 = {s1, s315};
    static StructureTerm s317 = new StructureTerm(s7, s316);
    static SymbolTerm s318 = SymbolTerm.makeSymbol("mod");
    static Term[] s319 = {si296, s254, s318};
    static StructureTerm s320 = new StructureTerm(s9, s319);
    static Term[] s321 = {s320, s15};
    static StructureTerm s322 = new StructureTerm(s8, s321);
    static Term[] s323 = {s1, s322};
    static StructureTerm s324 = new StructureTerm(s7, s323);
    static SymbolTerm s325 = SymbolTerm.makeSymbol("rem");
    static Term[] s326 = {si296, s254, s325};
    static StructureTerm s327 = new StructureTerm(s9, s326);
    static Term[] s328 = {s327, s15};
    static StructureTerm s329 = new StructureTerm(s8, s328);
    static Term[] s330 = {s1, s329};
    static StructureTerm s331 = new StructureTerm(s7, s330);
    static SymbolTerm s332 = SymbolTerm.makeSymbol("<<");
    static Term[] s333 = {si296, s254, s332};
    static StructureTerm s334 = new StructureTerm(s9, s333);
    static Term[] s335 = {s334, s15};
    static StructureTerm s336 = new StructureTerm(s8, s335);
    static Term[] s337 = {s1, s336};
    static StructureTerm s338 = new StructureTerm(s7, s337);
    static SymbolTerm s339 = SymbolTerm.makeSymbol(">>");
    static Term[] s340 = {si296, s254, s339};
    static StructureTerm s341 = new StructureTerm(s9, s340);
    static Term[] s342 = {s341, s15};
    static StructureTerm s343 = new StructureTerm(s8, s342);
    static Term[] s344 = {s1, s343};
    static StructureTerm s345 = new StructureTerm(s7, s344);
    static IntegerTerm si346 = new IntegerTerm(300);
    static SymbolTerm s347 = SymbolTerm.makeSymbol("~");
    static Term[] s348 = {si346, s11, s347};
    static StructureTerm s349 = new StructureTerm(s9, s348);
    static Term[] s350 = {s349, s15};
    static StructureTerm s351 = new StructureTerm(s8, s350);
    static Term[] s352 = {s1, s351};
    static StructureTerm s353 = new StructureTerm(s7, s352);
    static IntegerTerm si354 = new IntegerTerm(200);
    static SymbolTerm s355 = SymbolTerm.makeSymbol("**");
    static Term[] s356 = {si354, s11, s355};
    static StructureTerm s357 = new StructureTerm(s9, s356);
    static Term[] s358 = {s357, s15};
    static StructureTerm s359 = new StructureTerm(s8, s358);
    static Term[] s360 = {s1, s359};
    static StructureTerm s361 = new StructureTerm(s7, s360);
    static SymbolTerm s362 = SymbolTerm.makeSymbol("^");
    static Term[] s363 = {si354, s99, s362};
    static StructureTerm s364 = new StructureTerm(s9, s363);
    static Term[] s365 = {s364, s15};
    static StructureTerm s366 = new StructureTerm(s8, s365);
    static Term[] s367 = {s1, s366};
    static StructureTerm s368 = new StructureTerm(s7, s367);
    static SymbolTerm s369 = SymbolTerm.makeSymbol("\\");
    static Term[] s370 = {si354, s124, s369};
    static StructureTerm s371 = new StructureTerm(s9, s370);
    static Term[] s372 = {s371, s15};
    static StructureTerm s373 = new StructureTerm(s8, s372);
    static Term[] s374 = {s1, s373};
    static StructureTerm s375 = new StructureTerm(s7, s374);
    static Term[] s376 = {si354, s124, s262};
    static StructureTerm s377 = new StructureTerm(s9, s376);
    static Term[] s378 = {s377, s15};
    static StructureTerm s379 = new StructureTerm(s8, s378);
    static Term[] s380 = {s1, s379};
    static StructureTerm s381 = new StructureTerm(s7, s380);
    static SymbolTerm s382 = SymbolTerm.makeSymbol("$current_leash");
    static Term[] s383 = {s382, si4};
    static StructureTerm s384 = new StructureTerm(s2, s383);
    static SymbolTerm s385 = SymbolTerm.makeSymbol("$current_spypoint");
    static IntegerTerm si386 = new IntegerTerm(3);
    static Term[] s387 = {s385, si386};
    static StructureTerm s388 = new StructureTerm(s2, s387);
    static SymbolTerm s389 = SymbolTerm.makeSymbol("$leap_flag");
    static Term[] s390 = {s389, si4};
    static StructureTerm s391 = new StructureTerm(s2, s390);
    static SymbolTerm s392 = SymbolTerm.makeSymbol("$consulted_file");
    static Term[] s393 = {s392, si4};
    static StructureTerm s394 = new StructureTerm(s2, s393);
    static SymbolTerm s395 = SymbolTerm.makeSymbol("$consulted_package");
    static Term[] s396 = {s395, si4};
    static StructureTerm s397 = new StructureTerm(s2, s396);
    static SymbolTerm s398 = SymbolTerm.makeSymbol("$consulted_predicate");
    static Term[] s399 = {s398, si386};
    static StructureTerm s400 = new StructureTerm(s2, s399);

    public PRED_$init_0(Predicate cont) {
        this.cont = cont;
    }

    public PRED_$init_0(){}

    public void setArgument(Term[] args, Predicate cont) {
        this.cont = cont;
    }

    public int arity() { return 0; }

    public String toString() {
        return "$init";
    }

    public Predicate exec(Prolog engine) {
    // '$init':-'$new_indexing_hash'('jp.ac.kobe_u.cs.prolog.builtin','$tokens'/1,A),assertz(('$current_operator'(1200,xfx,:-):-true)),assertz(('$current_operator'(1200,xfx,-->):-true)),assertz(('$current_operator'(1200,fx,:-):-true)),assertz(('$current_operator'(1200,fx,?-):-true)),assertz(('$current_operator'(1150,fx,package):-true)),assertz(('$current_operator'(1150,fx,import):-true)),assertz(('$current_operator'(1150,fx,public):-true)),assertz(('$current_operator'(1150,fx,dynamic):-true)),assertz(('$current_operator'(1150,fx,meta_predicate):-true)),assertz(('$current_operator'(1150,fx,mode):-true)),assertz(('$current_operator'(1150,fx,multifile):-true)),assertz(('$current_operator'(1150,fx,block):-true)),assertz(('$current_operator'(1100,xfy,;):-true)),assertz(('$current_operator'(1050,xfy,->):-true)),assertz(('$current_operator'(1000,xfy,','):-true)),assertz(('$current_operator'(900,fy,\+):-true)),assertz(('$current_operator'(700,xfx,=):-true)),assertz(('$current_operator'(700,xfx,\=):-true)),assertz(('$current_operator'(700,xfx,==):-true)),assertz(('$current_operator'(700,xfx,\==):-true)),assertz(('$current_operator'(700,xfx,@<):-true)),assertz(('$current_operator'(700,xfx,@>):-true)),assertz(('$current_operator'(700,xfx,@=<):-true)),assertz(('$current_operator'(700,xfx,@>=):-true)),assertz(('$current_operator'(700,xfx,=..):-true)),assertz(('$current_operator'(700,xfx,is):-true)),assertz(('$current_operator'(700,xfx,=:=):-true)),assertz(('$current_operator'(700,xfx,=\=):-true)),assertz(('$current_operator'(700,xfx,<):-true)),assertz(('$current_operator'(700,xfx,>):-true)),assertz(('$current_operator'(700,xfx,=<):-true)),assertz(('$current_operator'(700,xfx,>=):-true)),assertz(('$current_operator'(550,xfy,:):-true)),assertz(('$current_operator'(500,yfx,+):-true)),assertz(('$current_operator'(500,yfx,-):-true)),assertz(('$current_operator'(500,yfx,#):-true)),assertz(('$current_operator'(500,yfx,/\):-true)),assertz(('$current_operator'(500,yfx,\/):-true)),assertz(('$current_operator'(500,fx,+):-true)),assertz(('$current_operator'(400,yfx,*):-true)),assertz(('$current_operator'(400,yfx,/):-true)),assertz(('$current_operator'(400,yfx,//):-true)),assertz(('$current_operator'(400,yfx,mod):-true)),assertz(('$current_operator'(400,yfx,rem):-true)),assertz(('$current_operator'(400,yfx,<<):-true)),assertz(('$current_operator'(400,yfx,>>):-true)),assertz(('$current_operator'(300,xfx,~):-true)),assertz(('$current_operator'(200,xfx,**):-true)),assertz(('$current_operator'(200,xfy,^):-true)),assertz(('$current_operator'(200,fy,\):-true)),assertz(('$current_operator'(200,fy,-):-true)),'$new_indexing_hash'('jp.ac.kobe_u.cs.prolog.builtin','$current_leash'/1,B),'$new_indexing_hash'('jp.ac.kobe_u.cs.prolog.builtin','$current_spypoint'/3,C),'$new_indexing_hash'('jp.ac.kobe_u.cs.prolog.builtin','$leap_flag'/1,D),'$new_indexing_hash'('jp.ac.kobe_u.cs.prolog.builtin','$consulted_file'/1,E),'$new_indexing_hash'('jp.ac.kobe_u.cs.prolog.builtin','$consulted_package'/1,F),'$new_indexing_hash'('jp.ac.kobe_u.cs.prolog.builtin','$consulted_predicate'/3,G)
        engine.setB0();
        Predicate p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36, p37, p38, p39, p40, p41, p42, p43, p44, p45, p46, p47, p48, p49, p50, p51, p52, p53, p54, p55, p56, p57;
    // '$init':-['$new_indexing_hash'('jp.ac.kobe_u.cs.prolog.builtin','$tokens'/1,A),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(1200,xfx,:-):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(1200,xfx,-->):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(1200,fx,:-):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(1200,fx,?-):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(1150,fx,package):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(1150,fx,import):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(1150,fx,public):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(1150,fx,dynamic):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(1150,fx,meta_predicate):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(1150,fx,mode):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(1150,fx,multifile):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(1150,fx,block):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(1100,xfy,;):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(1050,xfy,->):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(1000,xfy,','):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(900,fy,\+):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(700,xfx,=):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(700,xfx,\=):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(700,xfx,==):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(700,xfx,\==):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(700,xfx,@<):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(700,xfx,@>):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(700,xfx,@=<):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(700,xfx,@>=):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(700,xfx,=..):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(700,xfx,is):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(700,xfx,=:=):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(700,xfx,=\=):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(700,xfx,<):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(700,xfx,>):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(700,xfx,=<):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(700,xfx,>=):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(550,xfy,:):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(500,yfx,+):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(500,yfx,-):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(500,yfx,#):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(500,yfx,/\):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(500,yfx,\/):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(500,fx,+):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(400,yfx,*):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(400,yfx,/):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(400,yfx,//):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(400,yfx,mod):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(400,yfx,rem):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(400,yfx,<<):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(400,yfx,>>):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(300,xfx,~):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(200,xfx,**):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(200,xfy,^):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(200,fy,\):-true)),assertz('jp.ac.kobe_u.cs.prolog.builtin':('$current_operator'(200,fy,-):-true)),'$new_indexing_hash'('jp.ac.kobe_u.cs.prolog.builtin','$current_leash'/1,B),'$new_indexing_hash'('jp.ac.kobe_u.cs.prolog.builtin','$current_spypoint'/3,C),'$new_indexing_hash'('jp.ac.kobe_u.cs.prolog.builtin','$leap_flag'/1,D),'$new_indexing_hash'('jp.ac.kobe_u.cs.prolog.builtin','$consulted_file'/1,E),'$new_indexing_hash'('jp.ac.kobe_u.cs.prolog.builtin','$consulted_package'/1,F),'$new_indexing_hash'('jp.ac.kobe_u.cs.prolog.builtin','$consulted_predicate'/3,G)]
        p1 = new PRED_$new_indexing_hash_3(s1, s400, new VariableTerm(engine), cont);
        p2 = new PRED_$new_indexing_hash_3(s1, s397, new VariableTerm(engine), p1);
        p3 = new PRED_$new_indexing_hash_3(s1, s394, new VariableTerm(engine), p2);
        p4 = new PRED_$new_indexing_hash_3(s1, s391, new VariableTerm(engine), p3);
        p5 = new PRED_$new_indexing_hash_3(s1, s388, new VariableTerm(engine), p4);
        p6 = new PRED_$new_indexing_hash_3(s1, s384, new VariableTerm(engine), p5);
        p7 = new PRED_assertz_1(s381, p6);
        p8 = new PRED_assertz_1(s375, p7);
        p9 = new PRED_assertz_1(s368, p8);
        p10 = new PRED_assertz_1(s361, p9);
        p11 = new PRED_assertz_1(s353, p10);
        p12 = new PRED_assertz_1(s345, p11);
        p13 = new PRED_assertz_1(s338, p12);
        p14 = new PRED_assertz_1(s331, p13);
        p15 = new PRED_assertz_1(s324, p14);
        p16 = new PRED_assertz_1(s317, p15);
        p17 = new PRED_assertz_1(s310, p16);
        p18 = new PRED_assertz_1(s303, p17);
        p19 = new PRED_assertz_1(s295, p18);
        p20 = new PRED_assertz_1(s289, p19);
        p21 = new PRED_assertz_1(s282, p20);
        p22 = new PRED_assertz_1(s275, p21);
        p23 = new PRED_assertz_1(s268, p22);
        p24 = new PRED_assertz_1(s261, p23);
        p25 = new PRED_assertz_1(s252, p24);
        p26 = new PRED_assertz_1(s244, p25);
        p27 = new PRED_assertz_1(s237, p26);
        p28 = new PRED_assertz_1(s230, p27);
        p29 = new PRED_assertz_1(s223, p28);
        p30 = new PRED_assertz_1(s216, p29);
        p31 = new PRED_assertz_1(s209, p30);
        p32 = new PRED_assertz_1(s202, p31);
        p33 = new PRED_assertz_1(s195, p32);
        p34 = new PRED_assertz_1(s188, p33);
        p35 = new PRED_assertz_1(s181, p34);
        p36 = new PRED_assertz_1(s174, p35);
        p37 = new PRED_assertz_1(s167, p36);
        p38 = new PRED_assertz_1(s160, p37);
        p39 = new PRED_assertz_1(s153, p38);
        p40 = new PRED_assertz_1(s146, p39);
        p41 = new PRED_assertz_1(s139, p40);
        p42 = new PRED_assertz_1(s131, p41);
        p43 = new PRED_assertz_1(s122, p42);
        p44 = new PRED_assertz_1(s114, p43);
        p45 = new PRED_assertz_1(s106, p44);
        p46 = new PRED_assertz_1(s97, p45);
        p47 = new PRED_assertz_1(s90, p46);
        p48 = new PRED_assertz_1(s83, p47);
        p49 = new PRED_assertz_1(s76, p48);
        p50 = new PRED_assertz_1(s69, p49);
        p51 = new PRED_assertz_1(s62, p50);
        p52 = new PRED_assertz_1(s55, p51);
        p53 = new PRED_assertz_1(s48, p52);
        p54 = new PRED_assertz_1(s40, p53);
        p55 = new PRED_assertz_1(s33, p54);
        p56 = new PRED_assertz_1(s26, p55);
        p57 = new PRED_assertz_1(s19, p56);
        return new PRED_$new_indexing_hash_3(s1, s6, new VariableTerm(engine), p57);
    }
}
