package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$parse_tokens_is_starter'/1</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$parse_tokens_is_starter_1 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("end_of_file");
    static SymbolTerm s2 = SymbolTerm.makeSymbol("(");
    static SymbolTerm s3 = SymbolTerm.makeSymbol("[");
    static SymbolTerm s4 = SymbolTerm.makeSymbol("{");
    static SymbolTerm s5 = SymbolTerm.makeSymbol("number", 1);
    static SymbolTerm s6 = SymbolTerm.makeSymbol("atom", 1);
    static SymbolTerm s7 = SymbolTerm.makeSymbol("var", 2);
    static SymbolTerm s8 = SymbolTerm.makeSymbol("string", 1);
    static Predicate _fail_0 = new PRED_fail_0();
    static Predicate _$parse_tokens_is_starter_1_var = new PRED_$parse_tokens_is_starter_1_var();
    static Predicate _$parse_tokens_is_starter_1_var_1 = new PRED_$parse_tokens_is_starter_1_var_1();
    static Predicate _$parse_tokens_is_starter_1_var_2 = new PRED_$parse_tokens_is_starter_1_var_2();
    static Predicate _$parse_tokens_is_starter_1_var_3 = new PRED_$parse_tokens_is_starter_1_var_3();
    static Predicate _$parse_tokens_is_starter_1_var_4 = new PRED_$parse_tokens_is_starter_1_var_4();
    static Predicate _$parse_tokens_is_starter_1_var_5 = new PRED_$parse_tokens_is_starter_1_var_5();
    static Predicate _$parse_tokens_is_starter_1_var_6 = new PRED_$parse_tokens_is_starter_1_var_6();
    static Predicate _$parse_tokens_is_starter_1_var_7 = new PRED_$parse_tokens_is_starter_1_var_7();
    static Predicate _$parse_tokens_is_starter_1_con = new PRED_$parse_tokens_is_starter_1_con();
    static Predicate _$parse_tokens_is_starter_1_str = new PRED_$parse_tokens_is_starter_1_str();
    static Predicate _$parse_tokens_is_starter_1_1 = new PRED_$parse_tokens_is_starter_1_1();
    static Predicate _$parse_tokens_is_starter_1_2 = new PRED_$parse_tokens_is_starter_1_2();
    static Predicate _$parse_tokens_is_starter_1_3 = new PRED_$parse_tokens_is_starter_1_3();
    static Predicate _$parse_tokens_is_starter_1_4 = new PRED_$parse_tokens_is_starter_1_4();
    static Predicate _$parse_tokens_is_starter_1_5 = new PRED_$parse_tokens_is_starter_1_5();
    static Predicate _$parse_tokens_is_starter_1_6 = new PRED_$parse_tokens_is_starter_1_6();
    static Predicate _$parse_tokens_is_starter_1_7 = new PRED_$parse_tokens_is_starter_1_7();
    static Predicate _$parse_tokens_is_starter_1_8 = new PRED_$parse_tokens_is_starter_1_8();
    static java.util.Hashtable<Term, Predicate> con = new java.util.Hashtable<Term, Predicate>(4);
    static java.util.Hashtable<Term, Predicate> str = new java.util.Hashtable<Term, Predicate>(4);
    static {
        con.put(s1, _$parse_tokens_is_starter_1_1);
        con.put(s2, _$parse_tokens_is_starter_1_2);
        con.put(s3, _$parse_tokens_is_starter_1_3);
        con.put(s4, _$parse_tokens_is_starter_1_4);
        str.put(s5, _$parse_tokens_is_starter_1_5);
        str.put(s6, _$parse_tokens_is_starter_1_6);
        str.put(s7, _$parse_tokens_is_starter_1_7);
        str.put(s8, _$parse_tokens_is_starter_1_8);
    }

    public Term arg1;

    public PRED_$parse_tokens_is_starter_1(Term a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_$parse_tokens_is_starter_1(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String toString() {
        return "$parse_tokens_is_starter(" + arg1 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$parse_tokens_is_starter_1_var, _fail_0, _fail_0, _$parse_tokens_is_starter_1_con, _$parse_tokens_is_starter_1_str, _fail_0);
    }
}

class PRED_$parse_tokens_is_starter_1_var extends PRED_$parse_tokens_is_starter_1 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$parse_tokens_is_starter_1_1, _$parse_tokens_is_starter_1_var_1);
    }
}

class PRED_$parse_tokens_is_starter_1_var_1 extends PRED_$parse_tokens_is_starter_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$parse_tokens_is_starter_1_2, _$parse_tokens_is_starter_1_var_2);
    }
}

class PRED_$parse_tokens_is_starter_1_var_2 extends PRED_$parse_tokens_is_starter_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$parse_tokens_is_starter_1_3, _$parse_tokens_is_starter_1_var_3);
    }
}

class PRED_$parse_tokens_is_starter_1_var_3 extends PRED_$parse_tokens_is_starter_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$parse_tokens_is_starter_1_4, _$parse_tokens_is_starter_1_var_4);
    }
}

class PRED_$parse_tokens_is_starter_1_var_4 extends PRED_$parse_tokens_is_starter_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$parse_tokens_is_starter_1_5, _$parse_tokens_is_starter_1_var_5);
    }
}

class PRED_$parse_tokens_is_starter_1_var_5 extends PRED_$parse_tokens_is_starter_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$parse_tokens_is_starter_1_6, _$parse_tokens_is_starter_1_var_6);
    }
}

class PRED_$parse_tokens_is_starter_1_var_6 extends PRED_$parse_tokens_is_starter_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$parse_tokens_is_starter_1_7, _$parse_tokens_is_starter_1_var_7);
    }
}

class PRED_$parse_tokens_is_starter_1_var_7 extends PRED_$parse_tokens_is_starter_1 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$parse_tokens_is_starter_1_8);
    }
}

class PRED_$parse_tokens_is_starter_1_con extends PRED_$parse_tokens_is_starter_1 {
    public Predicate exec(Prolog engine) {
        return engine.switch_on_hash(con, _fail_0);
    }
}

class PRED_$parse_tokens_is_starter_1_str extends PRED_$parse_tokens_is_starter_1 {
    public Predicate exec(Prolog engine) {
        return engine.switch_on_hash(str, _fail_0);
    }
}

class PRED_$parse_tokens_is_starter_1_1 extends PRED_$parse_tokens_is_starter_1 {
    public Predicate exec(Prolog engine) {
    // '$parse_tokens_is_starter'(end_of_file):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$parse_tokens_is_starter'(end_of_file):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s1))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_$parse_tokens_is_starter_1_2 extends PRED_$parse_tokens_is_starter_1 {
    public Predicate exec(Prolog engine) {
    // '$parse_tokens_is_starter'('('):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$parse_tokens_is_starter'('('):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s2))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s2, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_$parse_tokens_is_starter_1_3 extends PRED_$parse_tokens_is_starter_1 {
    public Predicate exec(Prolog engine) {
    // '$parse_tokens_is_starter'('['):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$parse_tokens_is_starter'('['):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s3))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s3, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_$parse_tokens_is_starter_1_4 extends PRED_$parse_tokens_is_starter_1 {
    public Predicate exec(Prolog engine) {
    // '$parse_tokens_is_starter'('{'):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$parse_tokens_is_starter'('{'):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s4))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s4, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_$parse_tokens_is_starter_1_5 extends PRED_$parse_tokens_is_starter_1 {
    public Predicate exec(Prolog engine) {
    // '$parse_tokens_is_starter'(number(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$parse_tokens_is_starter'(number(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s5.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s5, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_$parse_tokens_is_starter_1_6 extends PRED_$parse_tokens_is_starter_1 {
    public Predicate exec(Prolog engine) {
    // '$parse_tokens_is_starter'(atom(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$parse_tokens_is_starter'(atom(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s6.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s6, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_$parse_tokens_is_starter_1_7 extends PRED_$parse_tokens_is_starter_1 {
    public Predicate exec(Prolog engine) {
    // '$parse_tokens_is_starter'(var(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$parse_tokens_is_starter'(var(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s7.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s7, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_$parse_tokens_is_starter_1_8 extends PRED_$parse_tokens_is_starter_1 {
    public Predicate exec(Prolog engine) {
    // '$parse_tokens_is_starter'(string(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$parse_tokens_is_starter'(string(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s8.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s8, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}
