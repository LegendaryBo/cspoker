package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.IllegalTypeException;
import jp.ac.kobe_u.cs.prolog.lang.IntegerTerm;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.Term;
import jp.ac.kobe_u.cs.prolog.lang.VariableTerm;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>callable/1</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_callable_1 extends Predicate {
    static Predicate _callable_1_sub_1 = new PRED_callable_1_sub_1();
    static Predicate _callable_1_sub_2 = new PRED_callable_1_sub_2();
    static Predicate _callable_1_1 = new PRED_callable_1_1();
    static Predicate _callable_1_2 = new PRED_callable_1_2();
    static Predicate _callable_1_3 = new PRED_callable_1_3();

    public Term arg1;

    public PRED_callable_1(Term a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_callable_1(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String toString() {
        return "callable(" + arg1 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_callable_1_1, _callable_1_sub_1);
    }
}

class PRED_callable_1_sub_1 extends PRED_callable_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_callable_1_2, _callable_1_sub_2);
    }
}

class PRED_callable_1_sub_2 extends PRED_callable_1 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_callable_1_3);
    }
}

class PRED_callable_1_1 extends PRED_callable_1 {
    public Predicate exec(Prolog engine) {
    // callable(A):-atom(A),!
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // callable(A):-['$get_level'(B),atom(A),'$cut'(B)]
        a2 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(2))
        if (! a2.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of atom(a(1))
        a1 = a1.dereference();
        if (! a1.isSymbol()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(2))
        a2 = a2.dereference();
        if (! a2.isInteger()) {
            throw new IllegalTypeException("integer", a2);
        } else {
            engine.cut(((IntegerTerm) a2).intValue());
        }
        //END inline expansion
        return cont;
    }
}

class PRED_callable_1_2 extends PRED_callable_1 {
    public Predicate exec(Prolog engine) {
    // callable(A):-compound(A),!
        Term a1, a2;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // callable(A):-['$get_level'(B),compound(A),'$cut'(B)]
        a2 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(2))
        if (! a2.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        p1 = new PRED_$cut_1(a2, cont);
        return new PRED_compound_1(a1, p1);
    }
}

class PRED_callable_1_3 extends PRED_callable_1 {
    public Predicate exec(Prolog engine) {
    // callable(A):-closure(A)
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // callable(A):-[closure(A)]
        //START inline expansion of closure(a(1))
        a1 = a1.dereference();
        if (! a1.isClosure()) {
            return engine.fail();
        }
        //END inline expansion
        return cont;
    }
}
