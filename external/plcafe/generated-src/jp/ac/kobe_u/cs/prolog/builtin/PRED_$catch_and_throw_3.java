package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$catch_and_throw'/3</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$catch_and_throw_3 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("$no_ball");
    static SymbolTerm s2 = SymbolTerm.makeSymbol(":", 2);
    static SymbolTerm s3 = SymbolTerm.makeSymbol("jp.ac.kobe_u.cs.prolog.builtin");
    static Predicate _$catch_and_throw_3_sub_1 = new PRED_$catch_and_throw_3_sub_1();
    static Predicate _$catch_and_throw_3_1 = new PRED_$catch_and_throw_3_1();
    static Predicate _$catch_and_throw_3_2 = new PRED_$catch_and_throw_3_2();

    public Term arg1, arg2, arg3;

    public PRED_$catch_and_throw_3(Term a1, Term a2, Term a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_$catch_and_throw_3(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String toString() {
        return "$catch_and_throw(" + arg1 + "," + arg2 + "," + arg3 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$catch_and_throw_3_1, _$catch_and_throw_3_sub_1);
    }
}

class PRED_$catch_and_throw_3_sub_1 extends PRED_$catch_and_throw_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$catch_and_throw_3_2);
    }
}

class PRED_$catch_and_throw_3_1 extends PRED_$catch_and_throw_3 {
    public Predicate exec(Prolog engine) {
    // '$catch_and_throw'(A,A,B):-!,'$set_exception'('$no_ball'),call(B)
        Term a1, a2, a3, a4;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$catch_and_throw'(A,A,B):-['$neck_cut','$set_exception'('$no_ball'),call('jp.ac.kobe_u.cs.prolog.builtin':B)]
        if (! a1.unify(a2, engine.trail))
            return engine.fail();
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        Term[] y1 = {s3, a3};
        a4 = new StructureTerm(s2, y1);
        p1 = new PRED_call_1(a4, cont);
        return new PRED_$set_exception_1(s1, p1);
    }
}

class PRED_$catch_and_throw_3_2 extends PRED_$catch_and_throw_3 {
    public Predicate exec(Prolog engine) {
    // '$catch_and_throw'(A,B,C):-raise_exception(A)
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$catch_and_throw'(A,B,C):-[raise_exception(A)]
        return new PRED_raise_exception_1(a1, cont);
    }
}
