package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.IllegalTypeException;
import jp.ac.kobe_u.cs.prolog.lang.IntegerTerm;
import jp.ac.kobe_u.cs.prolog.lang.ListTerm;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.StructureTerm;
import jp.ac.kobe_u.cs.prolog.lang.SymbolTerm;
import jp.ac.kobe_u.cs.prolog.lang.Term;
import jp.ac.kobe_u.cs.prolog.lang.VariableTerm;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$dcg_translate_dcg'/5</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$dcg_translate_dcg_5 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol(":", 2);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("[]");
    static SymbolTerm s3 = SymbolTerm.makeSymbol("true");
    static SymbolTerm s4 = SymbolTerm.makeSymbol("C", 3);
    static SymbolTerm s5 = SymbolTerm.makeSymbol("\\+", 1);
    static SymbolTerm s6 = SymbolTerm.makeSymbol(";", 2);
    static SymbolTerm s7 = SymbolTerm.makeSymbol("->", 2);
    static SymbolTerm s8 = SymbolTerm.makeSymbol("fail");
    static SymbolTerm s9 = SymbolTerm.makeSymbol("=", 2);
    static SymbolTerm s10 = SymbolTerm.makeSymbol(",", 2);
    static SymbolTerm s11 = SymbolTerm.makeSymbol("if", 3);
    static SymbolTerm s12 = SymbolTerm.makeSymbol("!");
    static SymbolTerm s13 = SymbolTerm.makeSymbol("{}", 1);
    static SymbolTerm s14 = SymbolTerm.makeSymbol("call", 1);
    static Predicate _$dcg_translate_dcg_5_top = new PRED_$dcg_translate_dcg_5_top();
    static Predicate _$dcg_translate_dcg_5_var = new PRED_$dcg_translate_dcg_5_var();
    static Predicate _$dcg_translate_dcg_5_var_1 = new PRED_$dcg_translate_dcg_5_var_1();
    static Predicate _$dcg_translate_dcg_5_var_2 = new PRED_$dcg_translate_dcg_5_var_2();
    static Predicate _$dcg_translate_dcg_5_var_3 = new PRED_$dcg_translate_dcg_5_var_3();
    static Predicate _$dcg_translate_dcg_5_var_4 = new PRED_$dcg_translate_dcg_5_var_4();
    static Predicate _$dcg_translate_dcg_5_var_5 = new PRED_$dcg_translate_dcg_5_var_5();
    static Predicate _$dcg_translate_dcg_5_var_6 = new PRED_$dcg_translate_dcg_5_var_6();
    static Predicate _$dcg_translate_dcg_5_var_7 = new PRED_$dcg_translate_dcg_5_var_7();
    static Predicate _$dcg_translate_dcg_5_var_8 = new PRED_$dcg_translate_dcg_5_var_8();
    static Predicate _$dcg_translate_dcg_5_var_9 = new PRED_$dcg_translate_dcg_5_var_9();
    static Predicate _$dcg_translate_dcg_5_var_10 = new PRED_$dcg_translate_dcg_5_var_10();
    static Predicate _$dcg_translate_dcg_5_var_11 = new PRED_$dcg_translate_dcg_5_var_11();
    static Predicate _$dcg_translate_dcg_5_var_12 = new PRED_$dcg_translate_dcg_5_var_12();
    static Predicate _$dcg_translate_dcg_5_int = new PRED_$dcg_translate_dcg_5_int();
    static Predicate _$dcg_translate_dcg_5_int_1 = new PRED_$dcg_translate_dcg_5_int_1();
    static Predicate _$dcg_translate_dcg_5_con = new PRED_$dcg_translate_dcg_5_con();
    static Predicate _$dcg_translate_dcg_5_con_0 = new PRED_$dcg_translate_dcg_5_con_0();
    static Predicate _$dcg_translate_dcg_5_con_0_1 = new PRED_$dcg_translate_dcg_5_con_0_1();
    static Predicate _$dcg_translate_dcg_5_con_0_2 = new PRED_$dcg_translate_dcg_5_con_0_2();
    static Predicate _$dcg_translate_dcg_5_con_1 = new PRED_$dcg_translate_dcg_5_con_1();
    static Predicate _$dcg_translate_dcg_5_con_1_1 = new PRED_$dcg_translate_dcg_5_con_1_1();
    static Predicate _$dcg_translate_dcg_5_con_1_2 = new PRED_$dcg_translate_dcg_5_con_1_2();
    static Predicate _$dcg_translate_dcg_5_str = new PRED_$dcg_translate_dcg_5_str();
    static Predicate _$dcg_translate_dcg_5_str_0 = new PRED_$dcg_translate_dcg_5_str_0();
    static Predicate _$dcg_translate_dcg_5_str_0_1 = new PRED_$dcg_translate_dcg_5_str_0_1();
    static Predicate _$dcg_translate_dcg_5_str_0_2 = new PRED_$dcg_translate_dcg_5_str_0_2();
    static Predicate _$dcg_translate_dcg_5_str_1 = new PRED_$dcg_translate_dcg_5_str_1();
    static Predicate _$dcg_translate_dcg_5_str_1_1 = new PRED_$dcg_translate_dcg_5_str_1_1();
    static Predicate _$dcg_translate_dcg_5_str_1_2 = new PRED_$dcg_translate_dcg_5_str_1_2();
    static Predicate _$dcg_translate_dcg_5_str_2 = new PRED_$dcg_translate_dcg_5_str_2();
    static Predicate _$dcg_translate_dcg_5_str_2_1 = new PRED_$dcg_translate_dcg_5_str_2_1();
    static Predicate _$dcg_translate_dcg_5_str_2_2 = new PRED_$dcg_translate_dcg_5_str_2_2();
    static Predicate _$dcg_translate_dcg_5_str_3 = new PRED_$dcg_translate_dcg_5_str_3();
    static Predicate _$dcg_translate_dcg_5_str_3_1 = new PRED_$dcg_translate_dcg_5_str_3_1();
    static Predicate _$dcg_translate_dcg_5_str_3_2 = new PRED_$dcg_translate_dcg_5_str_3_2();
    static Predicate _$dcg_translate_dcg_5_str_4 = new PRED_$dcg_translate_dcg_5_str_4();
    static Predicate _$dcg_translate_dcg_5_str_4_1 = new PRED_$dcg_translate_dcg_5_str_4_1();
    static Predicate _$dcg_translate_dcg_5_str_4_2 = new PRED_$dcg_translate_dcg_5_str_4_2();
    static Predicate _$dcg_translate_dcg_5_str_5 = new PRED_$dcg_translate_dcg_5_str_5();
    static Predicate _$dcg_translate_dcg_5_str_5_1 = new PRED_$dcg_translate_dcg_5_str_5_1();
    static Predicate _$dcg_translate_dcg_5_str_5_2 = new PRED_$dcg_translate_dcg_5_str_5_2();
    static Predicate _$dcg_translate_dcg_5_str_6 = new PRED_$dcg_translate_dcg_5_str_6();
    static Predicate _$dcg_translate_dcg_5_str_6_1 = new PRED_$dcg_translate_dcg_5_str_6_1();
    static Predicate _$dcg_translate_dcg_5_str_6_2 = new PRED_$dcg_translate_dcg_5_str_6_2();
    static Predicate _$dcg_translate_dcg_5_str_6_3 = new PRED_$dcg_translate_dcg_5_str_6_3();
    static Predicate _$dcg_translate_dcg_5_lis = new PRED_$dcg_translate_dcg_5_lis();
    static Predicate _$dcg_translate_dcg_5_lis_1 = new PRED_$dcg_translate_dcg_5_lis_1();
    static Predicate _$dcg_translate_dcg_5_lis_2 = new PRED_$dcg_translate_dcg_5_lis_2();
    static Predicate _$dcg_translate_dcg_5_1 = new PRED_$dcg_translate_dcg_5_1();
    static Predicate _$dcg_translate_dcg_5_2 = new PRED_$dcg_translate_dcg_5_2();
    static Predicate _$dcg_translate_dcg_5_3 = new PRED_$dcg_translate_dcg_5_3();
    static Predicate _$dcg_translate_dcg_5_4 = new PRED_$dcg_translate_dcg_5_4();
    static Predicate _$dcg_translate_dcg_5_5 = new PRED_$dcg_translate_dcg_5_5();
    static Predicate _$dcg_translate_dcg_5_6 = new PRED_$dcg_translate_dcg_5_6();
    static Predicate _$dcg_translate_dcg_5_7 = new PRED_$dcg_translate_dcg_5_7();
    static Predicate _$dcg_translate_dcg_5_8 = new PRED_$dcg_translate_dcg_5_8();
    static Predicate _$dcg_translate_dcg_5_9 = new PRED_$dcg_translate_dcg_5_9();
    static Predicate _$dcg_translate_dcg_5_10 = new PRED_$dcg_translate_dcg_5_10();
    static Predicate _$dcg_translate_dcg_5_11 = new PRED_$dcg_translate_dcg_5_11();
    static Predicate _$dcg_translate_dcg_5_12 = new PRED_$dcg_translate_dcg_5_12();
    static Predicate _$dcg_translate_dcg_5_13 = new PRED_$dcg_translate_dcg_5_13();
    static java.util.Hashtable<Term, Predicate> con = new java.util.Hashtable<Term, Predicate>(2);
    static java.util.Hashtable<Term, Predicate> str = new java.util.Hashtable<Term, Predicate>(7);
    static {
        con.put(s2, _$dcg_translate_dcg_5_con_0);
        con.put(s12, _$dcg_translate_dcg_5_con_1);
        str.put(s1, _$dcg_translate_dcg_5_str_0);
        str.put(s5, _$dcg_translate_dcg_5_str_1);
        str.put(s10, _$dcg_translate_dcg_5_str_2);
        str.put(s7, _$dcg_translate_dcg_5_str_3);
        str.put(s11, _$dcg_translate_dcg_5_str_4);
        str.put(s6, _$dcg_translate_dcg_5_str_5);
        str.put(s13, _$dcg_translate_dcg_5_str_6);
    }

    public Term arg1, arg2, arg3, arg4, arg5;

    public PRED_$dcg_translate_dcg_5(Term a1, Term a2, Term a3, Term a4, Term a5, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        arg5 = a5;
        this.cont = cont;
    }

    public PRED_$dcg_translate_dcg_5(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        arg5 = args[4];
        this.cont = cont;
    }

    public int arity() { return 5; }

    public String toString() {
        return "$dcg_translate_dcg(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + "," + arg5 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.aregs[4] = arg4;
        engine.aregs[5] = arg5;
        engine.cont = cont;
        return _$dcg_translate_dcg_5_top;
    }
}

class PRED_$dcg_translate_dcg_5_top extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        engine.setB0();
        return engine.switch_on_term(_$dcg_translate_dcg_5_var, _$dcg_translate_dcg_5_int, _$dcg_translate_dcg_5_int, _$dcg_translate_dcg_5_con, _$dcg_translate_dcg_5_str, _$dcg_translate_dcg_5_lis);
    }
}

class PRED_$dcg_translate_dcg_5_var extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$dcg_translate_dcg_5_1, _$dcg_translate_dcg_5_var_1);
    }
}

class PRED_$dcg_translate_dcg_5_var_1 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$dcg_translate_dcg_5_2, _$dcg_translate_dcg_5_var_2);
    }
}

class PRED_$dcg_translate_dcg_5_var_2 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$dcg_translate_dcg_5_3, _$dcg_translate_dcg_5_var_3);
    }
}

class PRED_$dcg_translate_dcg_5_var_3 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$dcg_translate_dcg_5_4, _$dcg_translate_dcg_5_var_4);
    }
}

class PRED_$dcg_translate_dcg_5_var_4 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$dcg_translate_dcg_5_5, _$dcg_translate_dcg_5_var_5);
    }
}

class PRED_$dcg_translate_dcg_5_var_5 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$dcg_translate_dcg_5_6, _$dcg_translate_dcg_5_var_6);
    }
}

class PRED_$dcg_translate_dcg_5_var_6 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$dcg_translate_dcg_5_7, _$dcg_translate_dcg_5_var_7);
    }
}

class PRED_$dcg_translate_dcg_5_var_7 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$dcg_translate_dcg_5_8, _$dcg_translate_dcg_5_var_8);
    }
}

class PRED_$dcg_translate_dcg_5_var_8 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$dcg_translate_dcg_5_9, _$dcg_translate_dcg_5_var_9);
    }
}

class PRED_$dcg_translate_dcg_5_var_9 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$dcg_translate_dcg_5_10, _$dcg_translate_dcg_5_var_10);
    }
}

class PRED_$dcg_translate_dcg_5_var_10 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$dcg_translate_dcg_5_11, _$dcg_translate_dcg_5_var_11);
    }
}

class PRED_$dcg_translate_dcg_5_var_11 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$dcg_translate_dcg_5_12, _$dcg_translate_dcg_5_var_12);
    }
}

class PRED_$dcg_translate_dcg_5_var_12 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$dcg_translate_dcg_5_13);
    }
}

class PRED_$dcg_translate_dcg_5_int extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$dcg_translate_dcg_5_1, _$dcg_translate_dcg_5_int_1);
    }
}

class PRED_$dcg_translate_dcg_5_int_1 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$dcg_translate_dcg_5_13);
    }
}

class PRED_$dcg_translate_dcg_5_con extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.switch_on_hash(con, _$dcg_translate_dcg_5_int);
    }
}

class PRED_$dcg_translate_dcg_5_con_0 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$dcg_translate_dcg_5_1, _$dcg_translate_dcg_5_con_0_1);
    }
}

class PRED_$dcg_translate_dcg_5_con_0_1 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$dcg_translate_dcg_5_3, _$dcg_translate_dcg_5_con_0_2);
    }
}

class PRED_$dcg_translate_dcg_5_con_0_2 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$dcg_translate_dcg_5_13);
    }
}

class PRED_$dcg_translate_dcg_5_con_1 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$dcg_translate_dcg_5_1, _$dcg_translate_dcg_5_con_1_1);
    }
}

class PRED_$dcg_translate_dcg_5_con_1_1 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$dcg_translate_dcg_5_10, _$dcg_translate_dcg_5_con_1_2);
    }
}

class PRED_$dcg_translate_dcg_5_con_1_2 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$dcg_translate_dcg_5_13);
    }
}

class PRED_$dcg_translate_dcg_5_str extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.switch_on_hash(str, _$dcg_translate_dcg_5_int);
    }
}

class PRED_$dcg_translate_dcg_5_str_0 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$dcg_translate_dcg_5_1, _$dcg_translate_dcg_5_str_0_1);
    }
}

class PRED_$dcg_translate_dcg_5_str_0_1 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$dcg_translate_dcg_5_2, _$dcg_translate_dcg_5_str_0_2);
    }
}

class PRED_$dcg_translate_dcg_5_str_0_2 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$dcg_translate_dcg_5_13);
    }
}

class PRED_$dcg_translate_dcg_5_str_1 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$dcg_translate_dcg_5_1, _$dcg_translate_dcg_5_str_1_1);
    }
}

class PRED_$dcg_translate_dcg_5_str_1_1 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$dcg_translate_dcg_5_5, _$dcg_translate_dcg_5_str_1_2);
    }
}

class PRED_$dcg_translate_dcg_5_str_1_2 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$dcg_translate_dcg_5_13);
    }
}

class PRED_$dcg_translate_dcg_5_str_2 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$dcg_translate_dcg_5_1, _$dcg_translate_dcg_5_str_2_1);
    }
}

class PRED_$dcg_translate_dcg_5_str_2_1 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$dcg_translate_dcg_5_6, _$dcg_translate_dcg_5_str_2_2);
    }
}

class PRED_$dcg_translate_dcg_5_str_2_2 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$dcg_translate_dcg_5_13);
    }
}

class PRED_$dcg_translate_dcg_5_str_3 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$dcg_translate_dcg_5_1, _$dcg_translate_dcg_5_str_3_1);
    }
}

class PRED_$dcg_translate_dcg_5_str_3_1 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$dcg_translate_dcg_5_7, _$dcg_translate_dcg_5_str_3_2);
    }
}

class PRED_$dcg_translate_dcg_5_str_3_2 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$dcg_translate_dcg_5_13);
    }
}

class PRED_$dcg_translate_dcg_5_str_4 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$dcg_translate_dcg_5_1, _$dcg_translate_dcg_5_str_4_1);
    }
}

class PRED_$dcg_translate_dcg_5_str_4_1 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$dcg_translate_dcg_5_8, _$dcg_translate_dcg_5_str_4_2);
    }
}

class PRED_$dcg_translate_dcg_5_str_4_2 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$dcg_translate_dcg_5_13);
    }
}

class PRED_$dcg_translate_dcg_5_str_5 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$dcg_translate_dcg_5_1, _$dcg_translate_dcg_5_str_5_1);
    }
}

class PRED_$dcg_translate_dcg_5_str_5_1 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$dcg_translate_dcg_5_9, _$dcg_translate_dcg_5_str_5_2);
    }
}

class PRED_$dcg_translate_dcg_5_str_5_2 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$dcg_translate_dcg_5_13);
    }
}

class PRED_$dcg_translate_dcg_5_str_6 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$dcg_translate_dcg_5_1, _$dcg_translate_dcg_5_str_6_1);
    }
}

class PRED_$dcg_translate_dcg_5_str_6_1 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$dcg_translate_dcg_5_11, _$dcg_translate_dcg_5_str_6_2);
    }
}

class PRED_$dcg_translate_dcg_5_str_6_2 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$dcg_translate_dcg_5_12, _$dcg_translate_dcg_5_str_6_3);
    }
}

class PRED_$dcg_translate_dcg_5_str_6_3 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$dcg_translate_dcg_5_13);
    }
}

class PRED_$dcg_translate_dcg_5_lis extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$dcg_translate_dcg_5_1, _$dcg_translate_dcg_5_lis_1);
    }
}

class PRED_$dcg_translate_dcg_5_lis_1 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$dcg_translate_dcg_5_4, _$dcg_translate_dcg_5_lis_2);
    }
}

class PRED_$dcg_translate_dcg_5_lis_2 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$dcg_translate_dcg_5_13);
    }
}

class PRED_$dcg_translate_dcg_5_1 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
    // '$dcg_translate_dcg'(A,B,C,D,C):-var(A),!,'$dcg_translate_dcg_atom'(A,B,D,C)
        Term a1, a2, a3, a4, a5, a6;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$dcg_translate_dcg'(A,B,C,D,C):-['$get_level'(E),var(A),'$cut'(E),'$dcg_translate_dcg_atom'(A,B,D,C)]
        if (! a3.unify(a5, engine.trail))
            return engine.fail();
        a6 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(6))
        if (! a6.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of var(a(1))
        a1 = a1.dereference();
        if (! a1.isVariable()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(6))
        a6 = a6.dereference();
        if (! a6.isInteger()) {
            throw new IllegalTypeException("integer", a6);
        } else {
            engine.cut(((IntegerTerm) a6).intValue());
        }
        //END inline expansion
        return new PRED_$dcg_translate_dcg_atom_4(a1, a2, a4, a3, cont);
    }
}

class PRED_$dcg_translate_dcg_5_2 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
    // '$dcg_translate_dcg'(A:B,A:C,D,E,F):-!,'$dcg_translate_dcg'(B,C,D,E,F)
        Term a1, a2, a3, a4, a5, a6, a7, a8;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$dcg_translate_dcg'(A:B,A:C,D,E,F):-['$neck_cut','$dcg_translate_dcg'(B,C,D,E,F)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s1.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a6 = args[0];
            a7 = args[1];
        } else if (a1.isVariable()){
            a6 = new VariableTerm(engine);
            a7 = new VariableTerm(engine);
            Term[] args = {a6, a7};
            ((VariableTerm) a1).bind(new StructureTerm(s1, args), engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isStructure()){
            if (! s1.equals(((StructureTerm)a2).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a2).args();
            if (! a6.unify(args[0], engine.trail))
                return engine.fail();
            a8 = args[1];
        } else if (a2.isVariable()){
            a8 = new VariableTerm(engine);
            Term[] args = {a6, a8};
            ((VariableTerm) a2).bind(new StructureTerm(s1, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        engine.aregs[1] = a7;
        engine.aregs[2] = a8;
        engine.aregs[3] = a3;
        engine.aregs[4] = a4;
        engine.aregs[5] = a5;
        engine.cont = cont;
        return _$dcg_translate_dcg_5_top;
    }
}

class PRED_$dcg_translate_dcg_5_3 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
    // '$dcg_translate_dcg'([],true,A,A,B):-!
        Term a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$dcg_translate_dcg'([],true,A,A,B):-['$neck_cut']
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s2))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s2, engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isSymbol()){
            if (! a2.equals(s3))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(s3, engine.trail);
        } else {
            return engine.fail();
        }
        if (! a3.unify(a4, engine.trail))
            return engine.fail();
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_$dcg_translate_dcg_5_4 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
    // '$dcg_translate_dcg'([A|B],C,D,E,F):-!,'$dcg_translate_dcg'(B,G,D,H,F),'$dcg_and'('C'(E,A,H),G,C)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$dcg_translate_dcg'([A|B],C,D,E,F):-['$neck_cut','$dcg_translate_dcg'(B,G,D,H,F),'$dcg_and'('C'(E,A,H),G,C)]
        a1 = a1.dereference();
        if (a1.isList()){
            Term[] args = {((ListTerm)a1).car(), ((ListTerm)a1).cdr()};
            a6 = args[0];
            a7 = args[1];
        } else if (a1.isVariable()){
            a6 = new VariableTerm(engine);
            a7 = new VariableTerm(engine);
            ((VariableTerm) a1).bind(new ListTerm(a6, a7), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        a8 = new VariableTerm(engine);
        a9 = new VariableTerm(engine);
        Term[] y1 = {a4, a6, a9};
        a10 = new StructureTerm(s4, y1);
        p1 = new PRED_$dcg_and_3(a10, a8, a2, cont);
        engine.aregs[1] = a7;
        engine.aregs[2] = a8;
        engine.aregs[3] = a3;
        engine.aregs[4] = a9;
        engine.aregs[5] = a5;
        engine.cont = p1;
        return _$dcg_translate_dcg_5_top;
    }
}

class PRED_$dcg_translate_dcg_5_5 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
    // '$dcg_translate_dcg'(\+A,(B->fail;C=D),C,D,C):-!,'$dcg_translate_dcg'(A,B,E,D,E)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$dcg_translate_dcg'(\+A,(B->fail;C=D),C,D,C):-['$neck_cut','$dcg_translate_dcg'(A,B,E,D,E)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s5.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a6 = args[0];
        } else if (a1.isVariable()){
            a6 = new VariableTerm(engine);
            Term[] args = {a6};
            ((VariableTerm) a1).bind(new StructureTerm(s5, args), engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isStructure()){
            if (! s6.equals(((StructureTerm)a2).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a2).args();
            a7 = args[0];
            a8 = args[1];
        } else if (a2.isVariable()){
            a7 = new VariableTerm(engine);
            a8 = new VariableTerm(engine);
            Term[] args = {a7, a8};
            ((VariableTerm) a2).bind(new StructureTerm(s6, args), engine.trail);
        } else {
            return engine.fail();
        }
        a7 = a7.dereference();
        if (a7.isStructure()){
            if (! s7.equals(((StructureTerm)a7).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a7).args();
            a9 = args[0];
            if (! s8.unify(args[1], engine.trail))
                return engine.fail();
        } else if (a7.isVariable()){
            a9 = new VariableTerm(engine);
            Term[] args = {a9, s8};
            ((VariableTerm) a7).bind(new StructureTerm(s7, args), engine.trail);
        } else {
            return engine.fail();
        }
        a8 = a8.dereference();
        if (a8.isStructure()){
            if (! s9.equals(((StructureTerm)a8).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a8).args();
            a10 = args[0];
            a11 = args[1];
        } else if (a8.isVariable()){
            a10 = new VariableTerm(engine);
            a11 = new VariableTerm(engine);
            Term[] args = {a10, a11};
            ((VariableTerm) a8).bind(new StructureTerm(s9, args), engine.trail);
        } else {
            return engine.fail();
        }
        if (! a10.unify(a3, engine.trail))
            return engine.fail();
        if (! a11.unify(a4, engine.trail))
            return engine.fail();
        if (! a10.unify(a5, engine.trail))
            return engine.fail();
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        a12 = new VariableTerm(engine);
        engine.aregs[1] = a6;
        engine.aregs[2] = a9;
        engine.aregs[3] = a12;
        engine.aregs[4] = a11;
        engine.aregs[5] = a12;
        engine.cont = cont;
        return _$dcg_translate_dcg_5_top;
    }
}

class PRED_$dcg_translate_dcg_5_6 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
    // '$dcg_translate_dcg'((A,B),C,D,E,F):-!,'$dcg_translate_dcg'(A,G,H,E,H),'$dcg_translate_dcg'(B,I,D,H,F),'$dcg_and'(G,I,C)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$dcg_translate_dcg'((A,B),C,D,E,F):-['$neck_cut','$dcg_translate_dcg'(A,G,H,E,H),'$dcg_translate_dcg'(B,I,D,H,F),'$dcg_and'(G,I,C)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s10.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a6 = args[0];
            a7 = args[1];
        } else if (a1.isVariable()){
            a6 = new VariableTerm(engine);
            a7 = new VariableTerm(engine);
            Term[] args = {a6, a7};
            ((VariableTerm) a1).bind(new StructureTerm(s10, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        a8 = new VariableTerm(engine);
        a9 = new VariableTerm(engine);
        a10 = new VariableTerm(engine);
        p1 = new PRED_$dcg_and_3(a8, a10, a2, cont);
        p2 = new PRED_$dcg_translate_dcg_5(a7, a10, a3, a9, a5, p1);
        engine.aregs[1] = a6;
        engine.aregs[2] = a8;
        engine.aregs[3] = a9;
        engine.aregs[4] = a4;
        engine.aregs[5] = a9;
        engine.cont = p2;
        return _$dcg_translate_dcg_5_top;
    }
}

class PRED_$dcg_translate_dcg_5_7 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
    // '$dcg_translate_dcg'((A->B),(C->D),E,F,G):-!,'$dcg_translate_dcg'(A,C,H,F,H),'$dcg_translate_dcg'(B,D,E,H,G)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$dcg_translate_dcg'((A->B),(C->D),E,F,G):-['$neck_cut','$dcg_translate_dcg'(A,C,H,F,H),'$dcg_translate_dcg'(B,D,E,H,G)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s7.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a6 = args[0];
            a7 = args[1];
        } else if (a1.isVariable()){
            a6 = new VariableTerm(engine);
            a7 = new VariableTerm(engine);
            Term[] args = {a6, a7};
            ((VariableTerm) a1).bind(new StructureTerm(s7, args), engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isStructure()){
            if (! s7.equals(((StructureTerm)a2).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a2).args();
            a8 = args[0];
            a9 = args[1];
        } else if (a2.isVariable()){
            a8 = new VariableTerm(engine);
            a9 = new VariableTerm(engine);
            Term[] args = {a8, a9};
            ((VariableTerm) a2).bind(new StructureTerm(s7, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        a10 = new VariableTerm(engine);
        p1 = new PRED_$dcg_translate_dcg_5(a7, a9, a3, a10, a5, cont);
        engine.aregs[1] = a6;
        engine.aregs[2] = a8;
        engine.aregs[3] = a10;
        engine.aregs[4] = a4;
        engine.aregs[5] = a10;
        engine.cont = p1;
        return _$dcg_translate_dcg_5_top;
    }
}

class PRED_$dcg_translate_dcg_5_8 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
    // '$dcg_translate_dcg'(if(A,B,C),if(D,E,F),G,H,G):-!,'$dcg_translate_dcg'(A,D,H,I),'$dcg_translate_dcg'(B,E,I,G),'$dcg_translate_dcg'(C,F,I,G)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$dcg_translate_dcg'(if(A,B,C),if(D,E,F),G,H,G):-['$neck_cut','$dcg_translate_dcg'(A,D,H,I),'$dcg_translate_dcg'(B,E,I,G),'$dcg_translate_dcg'(C,F,I,G)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s11.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a6 = args[0];
            a7 = args[1];
            a8 = args[2];
        } else if (a1.isVariable()){
            a6 = new VariableTerm(engine);
            a7 = new VariableTerm(engine);
            a8 = new VariableTerm(engine);
            Term[] args = {a6, a7, a8};
            ((VariableTerm) a1).bind(new StructureTerm(s11, args), engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isStructure()){
            if (! s11.equals(((StructureTerm)a2).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a2).args();
            a9 = args[0];
            a10 = args[1];
            a11 = args[2];
        } else if (a2.isVariable()){
            a9 = new VariableTerm(engine);
            a10 = new VariableTerm(engine);
            a11 = new VariableTerm(engine);
            Term[] args = {a9, a10, a11};
            ((VariableTerm) a2).bind(new StructureTerm(s11, args), engine.trail);
        } else {
            return engine.fail();
        }
        if (! a3.unify(a5, engine.trail))
            return engine.fail();
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        a12 = new VariableTerm(engine);
        p1 = new PRED_$dcg_translate_dcg_4(a8, a11, a12, a3, cont);
        p2 = new PRED_$dcg_translate_dcg_4(a7, a10, a12, a3, p1);
        return new PRED_$dcg_translate_dcg_4(a6, a9, a4, a12, p2);
    }
}

class PRED_$dcg_translate_dcg_5_9 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
    // '$dcg_translate_dcg'((A;B),(C;D),E,F,E):-!,'$dcg_translate_dcg'(A,C,F,E),'$dcg_translate_dcg'(B,D,F,E)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$dcg_translate_dcg'((A;B),(C;D),E,F,E):-['$neck_cut','$dcg_translate_dcg'(A,C,F,E),'$dcg_translate_dcg'(B,D,F,E)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s6.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a6 = args[0];
            a7 = args[1];
        } else if (a1.isVariable()){
            a6 = new VariableTerm(engine);
            a7 = new VariableTerm(engine);
            Term[] args = {a6, a7};
            ((VariableTerm) a1).bind(new StructureTerm(s6, args), engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isStructure()){
            if (! s6.equals(((StructureTerm)a2).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a2).args();
            a8 = args[0];
            a9 = args[1];
        } else if (a2.isVariable()){
            a8 = new VariableTerm(engine);
            a9 = new VariableTerm(engine);
            Term[] args = {a8, a9};
            ((VariableTerm) a2).bind(new StructureTerm(s6, args), engine.trail);
        } else {
            return engine.fail();
        }
        if (! a3.unify(a5, engine.trail))
            return engine.fail();
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_$dcg_translate_dcg_4(a7, a9, a4, a3, cont);
        return new PRED_$dcg_translate_dcg_4(a6, a8, a4, a3, p1);
    }
}

class PRED_$dcg_translate_dcg_5_10 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
    // '$dcg_translate_dcg'(!,!,A,A,B):-!
        Term a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$dcg_translate_dcg'(!,!,A,A,B):-['$neck_cut']
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s12))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s12, engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isSymbol()){
            if (! a2.equals(s12))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(s12, engine.trail);
        } else {
            return engine.fail();
        }
        if (! a3.unify(a4, engine.trail))
            return engine.fail();
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_$dcg_translate_dcg_5_11 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
    // '$dcg_translate_dcg'({A},call(A),B,B,C):-var(A),!
        Term a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$dcg_translate_dcg'({A},call(A),B,B,C):-['$get_level'(D),var(A),'$cut'(D)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s13.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a6 = args[0];
        } else if (a1.isVariable()){
            a6 = new VariableTerm(engine);
            Term[] args = {a6};
            ((VariableTerm) a1).bind(new StructureTerm(s13, args), engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isStructure()){
            if (! s14.equals(((StructureTerm)a2).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a2).args();
            if (! a6.unify(args[0], engine.trail))
                return engine.fail();
        } else if (a2.isVariable()){
            Term[] args = {a6};
            ((VariableTerm) a2).bind(new StructureTerm(s14, args), engine.trail);
        } else {
            return engine.fail();
        }
        if (! a3.unify(a4, engine.trail))
            return engine.fail();
        a7 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(7))
        if (! a7.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of var(a(6))
        a6 = a6.dereference();
        if (! a6.isVariable()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(7))
        a7 = a7.dereference();
        if (! a7.isInteger()) {
            throw new IllegalTypeException("integer", a7);
        } else {
            engine.cut(((IntegerTerm) a7).intValue());
        }
        //END inline expansion
        return cont;
    }
}

class PRED_$dcg_translate_dcg_5_12 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
    // '$dcg_translate_dcg'({A},A,B,B,C):-!
        Term a1, a2, a3, a4, a5, a6;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$dcg_translate_dcg'({A},A,B,B,C):-['$neck_cut']
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s13.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a6 = args[0];
        } else if (a1.isVariable()){
            a6 = new VariableTerm(engine);
            Term[] args = {a6};
            ((VariableTerm) a1).bind(new StructureTerm(s13, args), engine.trail);
        } else {
            return engine.fail();
        }
        if (! a6.unify(a2, engine.trail))
            return engine.fail();
        if (! a3.unify(a4, engine.trail))
            return engine.fail();
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_$dcg_translate_dcg_5_13 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) {
    // '$dcg_translate_dcg'(A,B,C,D,C):-'$dcg_translate_dcg_atom'(A,B,D,C)
        Term a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$dcg_translate_dcg'(A,B,C,D,C):-['$dcg_translate_dcg_atom'(A,B,D,C)]
        if (! a3.unify(a5, engine.trail))
            return engine.fail();
        return new PRED_$dcg_translate_dcg_atom_4(a1, a2, a4, a3, cont);
    }
}
