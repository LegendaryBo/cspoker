package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$dcg_and'/3</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$dcg_and_3 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("true");
    static SymbolTerm s2 = SymbolTerm.makeSymbol(",", 2);
    static Predicate _$dcg_and_3_sub_1 = new PRED_$dcg_and_3_sub_1();
    static Predicate _$dcg_and_3_sub_2 = new PRED_$dcg_and_3_sub_2();
    static Predicate _$dcg_and_3_1 = new PRED_$dcg_and_3_1();
    static Predicate _$dcg_and_3_2 = new PRED_$dcg_and_3_2();
    static Predicate _$dcg_and_3_3 = new PRED_$dcg_and_3_3();

    public Term arg1, arg2, arg3;

    public PRED_$dcg_and_3(Term a1, Term a2, Term a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_$dcg_and_3(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String toString() {
        return "$dcg_and(" + arg1 + "," + arg2 + "," + arg3 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$dcg_and_3_1, _$dcg_and_3_sub_1);
    }
}

class PRED_$dcg_and_3_sub_1 extends PRED_$dcg_and_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$dcg_and_3_2, _$dcg_and_3_sub_2);
    }
}

class PRED_$dcg_and_3_sub_2 extends PRED_$dcg_and_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$dcg_and_3_3);
    }
}

class PRED_$dcg_and_3_1 extends PRED_$dcg_and_3 {
    public Predicate exec(Prolog engine) {
    // '$dcg_and'(A,B,C):-A==true,!,C=B
        Term a1, a2, a3, a4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$dcg_and'(A,B,C):-['$get_level'(D),'$equality_of_term'(A,true),'$cut'(D),'$unify'(C,B)]
        a4 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(4))
        if (! a4.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $equality_of_term(a(1),s(1))
        a1 = a1.dereference();
        if (! a1.equals(s1)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(4))
        a4 = a4.dereference();
        if (! a4.isInteger()) {
            throw new IllegalTypeException("integer", a4);
        } else {
            engine.cut(((IntegerTerm) a4).intValue());
        }
        //END inline expansion
        //START inline expansion of $unify(a(3),a(2))
        if (! a3.unify(a2, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        return cont;
    }
}

class PRED_$dcg_and_3_2 extends PRED_$dcg_and_3 {
    public Predicate exec(Prolog engine) {
    // '$dcg_and'(A,B,C):-B==true,!,C=A
        Term a1, a2, a3, a4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$dcg_and'(A,B,C):-['$get_level'(D),'$equality_of_term'(B,true),'$cut'(D),'$unify'(C,A)]
        a4 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(4))
        if (! a4.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $equality_of_term(a(2),s(1))
        a2 = a2.dereference();
        if (! a2.equals(s1)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(4))
        a4 = a4.dereference();
        if (! a4.isInteger()) {
            throw new IllegalTypeException("integer", a4);
        } else {
            engine.cut(((IntegerTerm) a4).intValue());
        }
        //END inline expansion
        //START inline expansion of $unify(a(3),a(1))
        if (! a3.unify(a1, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        return cont;
    }
}

class PRED_$dcg_and_3_3 extends PRED_$dcg_and_3 {
    public Predicate exec(Prolog engine) {
    // '$dcg_and'(A,B,(A,B)):-true
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$dcg_and'(A,B,(A,B)):-[]
        a3 = a3.dereference();
        if (a3.isStructure()){
            if (! s2.equals(((StructureTerm)a3).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a3).args();
            if (! a1.unify(args[0], engine.trail))
                return engine.fail();
            if (! a2.unify(args[1], engine.trail))
                return engine.fail();
        } else if (a3.isVariable()){
            Term[] args = {a1, a2};
            ((VariableTerm) a3).bind(new StructureTerm(s2, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}
