package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$assert_spypoint'/1</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$assert_spypoint_1 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol(":", 2);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("/", 2);
    static SymbolTerm s3 = SymbolTerm.makeSymbol("jp.ac.kobe_u.cs.prolog.builtin");
    static SymbolTerm s4 = SymbolTerm.makeSymbol("$current_spypoint", 3);
    static SymbolTerm s5 = SymbolTerm.makeSymbol("info");
    static SymbolTerm s6 = SymbolTerm.makeSymbol("spypoint");
    static SymbolTerm s7 = SymbolTerm.makeSymbol("is");
    static SymbolTerm s8 = SymbolTerm.makeSymbol("already");
    static SymbolTerm s9 = SymbolTerm.makeSymbol("added");
    static SymbolTerm s10 = SymbolTerm.makeSymbol("[]");
    static ListTerm s11 = new ListTerm(s9, s10);
    static ListTerm s12 = new ListTerm(s8, s11);
    static ListTerm s13 = new ListTerm(s7, s12);
    static SymbolTerm s14 = SymbolTerm.makeSymbol("$consulted_predicate", 3);
    static ListTerm s15 = new ListTerm(s7, s11);
    static SymbolTerm s16 = SymbolTerm.makeSymbol("warning");
    static SymbolTerm s17 = SymbolTerm.makeSymbol("no");
    static SymbolTerm s18 = SymbolTerm.makeSymbol("matching");
    static SymbolTerm s19 = SymbolTerm.makeSymbol("predicate");
    static SymbolTerm s20 = SymbolTerm.makeSymbol("for");
    static SymbolTerm s21 = SymbolTerm.makeSymbol("spy");
    static Predicate _fail_0 = new PRED_fail_0();
    static Predicate _$assert_spypoint_1_var = new PRED_$assert_spypoint_1_var();
    static Predicate _$assert_spypoint_1_var_1 = new PRED_$assert_spypoint_1_var_1();
    static Predicate _$assert_spypoint_1_var_2 = new PRED_$assert_spypoint_1_var_2();
    static Predicate _$assert_spypoint_1_1 = new PRED_$assert_spypoint_1_1();
    static Predicate _$assert_spypoint_1_2 = new PRED_$assert_spypoint_1_2();
    static Predicate _$assert_spypoint_1_3 = new PRED_$assert_spypoint_1_3();

    public Term arg1;

    public PRED_$assert_spypoint_1(Term a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_$assert_spypoint_1(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String toString() {
        return "$assert_spypoint(" + arg1 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$assert_spypoint_1_var, _fail_0, _fail_0, _fail_0, _$assert_spypoint_1_var, _fail_0);
    }
}

class PRED_$assert_spypoint_1_var extends PRED_$assert_spypoint_1 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$assert_spypoint_1_1, _$assert_spypoint_1_var_1);
    }
}

class PRED_$assert_spypoint_1_var_1 extends PRED_$assert_spypoint_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$assert_spypoint_1_2, _$assert_spypoint_1_var_2);
    }
}

class PRED_$assert_spypoint_1_var_2 extends PRED_$assert_spypoint_1 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$assert_spypoint_1_3);
    }
}

class PRED_$assert_spypoint_1_1 extends PRED_$assert_spypoint_1 {
    public Predicate exec(Prolog engine) {
    // '$assert_spypoint'(A:B/C):-clause('$current_spypoint'(A,B,C),D),print_message(info,[spypoint,A:B/C,is,already,added]),!
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$assert_spypoint'(A:B/C):-['$get_level'(D),clause('jp.ac.kobe_u.cs.prolog.builtin':'$current_spypoint'(A,B,C),E),print_message(info,[spypoint,A:B/C,is,already,added]),'$cut'(D)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s1.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a2 = args[0];
            a3 = args[1];
        } else if (a1.isVariable()){
            a2 = new VariableTerm(engine);
            a3 = new VariableTerm(engine);
            Term[] args = {a2, a3};
            ((VariableTerm) a1).bind(new StructureTerm(s1, args), engine.trail);
        } else {
            return engine.fail();
        }
        a3 = a3.dereference();
        if (a3.isStructure()){
            if (! s2.equals(((StructureTerm)a3).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a3).args();
            a4 = args[0];
            a5 = args[1];
        } else if (a3.isVariable()){
            a4 = new VariableTerm(engine);
            a5 = new VariableTerm(engine);
            Term[] args = {a4, a5};
            ((VariableTerm) a3).bind(new StructureTerm(s2, args), engine.trail);
        } else {
            return engine.fail();
        }
        a6 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(6))
        if (! a6.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        Term[] y1 = {a2, a4, a5};
        a7 = new StructureTerm(s4, y1);
        Term[] y2 = {s3, a7};
        a8 = new StructureTerm(s1, y2);
        Term[] y3 = {a4, a5};
        a9 = new StructureTerm(s2, y3);
        Term[] y4 = {a2, a9};
        a10 = new StructureTerm(s1, y4);
        a11 = new ListTerm(a10, s13);
        a12 = new ListTerm(s6, a11);
        p1 = new PRED_$cut_1(a6, cont);
        p2 = new PRED_print_message_2(s5, a12, p1);
        return new PRED_clause_2(a8, new VariableTerm(engine), p2);
    }
}

class PRED_$assert_spypoint_1_2 extends PRED_$assert_spypoint_1 {
    public Predicate exec(Prolog engine) {
    // '$assert_spypoint'(A:B/C):-clause('$consulted_predicate'(A,B/C,D),E),assertz('$current_spypoint'(A,B,C)),print_message(info,[spypoint,A:B/C,is,added]),!
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15;
        Predicate p1, p2, p3;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$assert_spypoint'(A:B/C):-['$get_level'(D),clause('jp.ac.kobe_u.cs.prolog.builtin':'$consulted_predicate'(A,B/C,E),F),assertz('jp.ac.kobe_u.cs.prolog.builtin':'$current_spypoint'(A,B,C)),print_message(info,[spypoint,A:B/C,is,added]),'$cut'(D)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s1.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a2 = args[0];
            a3 = args[1];
        } else if (a1.isVariable()){
            a2 = new VariableTerm(engine);
            a3 = new VariableTerm(engine);
            Term[] args = {a2, a3};
            ((VariableTerm) a1).bind(new StructureTerm(s1, args), engine.trail);
        } else {
            return engine.fail();
        }
        a3 = a3.dereference();
        if (a3.isStructure()){
            if (! s2.equals(((StructureTerm)a3).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a3).args();
            a4 = args[0];
            a5 = args[1];
        } else if (a3.isVariable()){
            a4 = new VariableTerm(engine);
            a5 = new VariableTerm(engine);
            Term[] args = {a4, a5};
            ((VariableTerm) a3).bind(new StructureTerm(s2, args), engine.trail);
        } else {
            return engine.fail();
        }
        a6 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(6))
        if (! a6.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        Term[] y1 = {a4, a5};
        a7 = new StructureTerm(s2, y1);
        Term[] y2 = {a2, a7, new VariableTerm(engine)};
        a8 = new StructureTerm(s14, y2);
        Term[] y3 = {s3, a8};
        a9 = new StructureTerm(s1, y3);
        Term[] y4 = {a2, a4, a5};
        a10 = new StructureTerm(s4, y4);
        Term[] y5 = {s3, a10};
        a11 = new StructureTerm(s1, y5);
        Term[] y6 = {a4, a5};
        a12 = new StructureTerm(s2, y6);
        Term[] y7 = {a2, a12};
        a13 = new StructureTerm(s1, y7);
        a14 = new ListTerm(a13, s15);
        a15 = new ListTerm(s6, a14);
        p1 = new PRED_$cut_1(a6, cont);
        p2 = new PRED_print_message_2(s5, a15, p1);
        p3 = new PRED_assertz_1(a11, p2);
        return new PRED_clause_2(a9, new VariableTerm(engine), p3);
    }
}

class PRED_$assert_spypoint_1_3 extends PRED_$assert_spypoint_1 {
    public Predicate exec(Prolog engine) {
    // '$assert_spypoint'(A:B/C):-print_message(warning,[no,matching,predicate,for,spy,A:B/C])
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$assert_spypoint'(A:B/C):-[print_message(warning,[no,matching,predicate,for,spy,A:B/C])]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s1.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a2 = args[0];
            a3 = args[1];
        } else if (a1.isVariable()){
            a2 = new VariableTerm(engine);
            a3 = new VariableTerm(engine);
            Term[] args = {a2, a3};
            ((VariableTerm) a1).bind(new StructureTerm(s1, args), engine.trail);
        } else {
            return engine.fail();
        }
        a3 = a3.dereference();
        if (a3.isStructure()){
            if (! s2.equals(((StructureTerm)a3).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a3).args();
            a4 = args[0];
            a5 = args[1];
        } else if (a3.isVariable()){
            a4 = new VariableTerm(engine);
            a5 = new VariableTerm(engine);
            Term[] args = {a4, a5};
            ((VariableTerm) a3).bind(new StructureTerm(s2, args), engine.trail);
        } else {
            return engine.fail();
        }
        Term[] y1 = {a4, a5};
        a6 = new StructureTerm(s2, y1);
        Term[] y2 = {a2, a6};
        a7 = new StructureTerm(s1, y2);
        a8 = new ListTerm(a7, s10);
        a9 = new ListTerm(s21, a8);
        a10 = new ListTerm(s20, a9);
        a11 = new ListTerm(s19, a10);
        a12 = new ListTerm(s18, a11);
        a13 = new ListTerm(s17, a12);
        return new PRED_print_message_2(s16, a13, cont);
    }
}
