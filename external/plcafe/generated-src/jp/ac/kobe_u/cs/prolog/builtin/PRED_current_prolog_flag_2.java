package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.IllegalTypeException;
import jp.ac.kobe_u.cs.prolog.lang.IntegerTerm;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.StructureTerm;
import jp.ac.kobe_u.cs.prolog.lang.SymbolTerm;
import jp.ac.kobe_u.cs.prolog.lang.Term;
import jp.ac.kobe_u.cs.prolog.lang.VariableTerm;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>current_prolog_flag/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_current_prolog_flag_2 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("type", 1);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("atom");
    static Term[] s3 = {s2};
    static StructureTerm s4 = new StructureTerm(s1, s3);
    static SymbolTerm s5 = SymbolTerm.makeSymbol("current_prolog_flag", 2);
    static IntegerTerm si6 = new IntegerTerm(1);
    static Predicate _current_prolog_flag_2_sub_1 = new PRED_current_prolog_flag_2_sub_1();
    static Predicate _current_prolog_flag_2_sub_2 = new PRED_current_prolog_flag_2_sub_2();
    static Predicate _current_prolog_flag_2_1 = new PRED_current_prolog_flag_2_1();
    static Predicate _current_prolog_flag_2_2 = new PRED_current_prolog_flag_2_2();
    static Predicate _current_prolog_flag_2_3 = new PRED_current_prolog_flag_2_3();

    public Term arg1, arg2;

    public PRED_current_prolog_flag_2(Term a1, Term a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_current_prolog_flag_2(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String toString() {
        return "current_prolog_flag(" + arg1 + "," + arg2 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_current_prolog_flag_2_1, _current_prolog_flag_2_sub_1);
    }
}

class PRED_current_prolog_flag_2_sub_1 extends PRED_current_prolog_flag_2 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_current_prolog_flag_2_2, _current_prolog_flag_2_sub_2);
    }
}

class PRED_current_prolog_flag_2_sub_2 extends PRED_current_prolog_flag_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_current_prolog_flag_2_3);
    }
}

class PRED_current_prolog_flag_2_1 extends PRED_current_prolog_flag_2 {
    public Predicate exec(Prolog engine) {
    // current_prolog_flag(A,B):-var(A),!,'$prolog_impl_flag'(A,C,D),'$get_prolog_impl_flag'(A,B)
        Term a1, a2, a3;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // current_prolog_flag(A,B):-['$get_level'(C),var(A),'$cut'(C),'$prolog_impl_flag'(A,D,E),'$get_prolog_impl_flag'(A,B)]
        a3 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(3))
        if (! a3.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of var(a(1))
        a1 = a1.dereference();
        if (! a1.isVariable()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(3))
        a3 = a3.dereference();
        if (! a3.isInteger()) {
            throw new IllegalTypeException("integer", a3);
        } else {
            engine.cut(((IntegerTerm) a3).intValue());
        }
        //END inline expansion
        p1 = new PRED_$get_prolog_impl_flag_2(a1, a2, cont);
        return new PRED_$prolog_impl_flag_3(a1, new VariableTerm(engine), new VariableTerm(engine), p1);
    }
}

class PRED_current_prolog_flag_2_2 extends PRED_current_prolog_flag_2 {
    public Predicate exec(Prolog engine) {
    // current_prolog_flag(A,B):-atom(A),!,'$dummy_23_builtins.pl'(A,C,D,B)
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // current_prolog_flag(A,B):-['$get_level'(C),atom(A),'$cut'(C),'$dummy_23_builtins.pl'(A,D,E,B)]
        a3 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(3))
        if (! a3.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of atom(a(1))
        a1 = a1.dereference();
        if (! a1.isSymbol()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(3))
        a3 = a3.dereference();
        if (! a3.isInteger()) {
            throw new IllegalTypeException("integer", a3);
        } else {
            engine.cut(((IntegerTerm) a3).intValue());
        }
        //END inline expansion
        return new PRED_$dummy_23_builtins$002Epl_4(a1, new VariableTerm(engine), new VariableTerm(engine), a2, cont);
    }
}

class PRED_current_prolog_flag_2_3 extends PRED_current_prolog_flag_2 {
    public Predicate exec(Prolog engine) {
    // current_prolog_flag(A,B):-illarg(type(atom),current_prolog_flag(A,B),1)
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // current_prolog_flag(A,B):-[illarg(type(atom),current_prolog_flag(A,B),1)]
        Term[] y1 = {a1, a2};
        a3 = new StructureTerm(s5, y1);
        return new PRED_illarg_3(s4, a3, si6, cont);
    }
}
