package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.ListTerm;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.SymbolTerm;
import jp.ac.kobe_u.cs.prolog.lang.Term;
import jp.ac.kobe_u.cs.prolog.lang.VariableTerm;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$give_an_answer'/1</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$give_an_answer_1 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("[]");
    static SymbolTerm s2 = SymbolTerm.makeSymbol("true");
    static SymbolTerm s3 = SymbolTerm.makeSymbol(",");
    static Predicate _fail_0 = new PRED_fail_0();
    static Predicate _$give_an_answer_1_var = new PRED_$give_an_answer_1_var();
    static Predicate _$give_an_answer_1_var_1 = new PRED_$give_an_answer_1_var_1();
    static Predicate _$give_an_answer_1_var_2 = new PRED_$give_an_answer_1_var_2();
    static Predicate _$give_an_answer_1_lis = new PRED_$give_an_answer_1_lis();
    static Predicate _$give_an_answer_1_lis_1 = new PRED_$give_an_answer_1_lis_1();
    static Predicate _$give_an_answer_1_1 = new PRED_$give_an_answer_1_1();
    static Predicate _$give_an_answer_1_2 = new PRED_$give_an_answer_1_2();
    static Predicate _$give_an_answer_1_3 = new PRED_$give_an_answer_1_3();

    public Term arg1;

    public PRED_$give_an_answer_1(Term a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_$give_an_answer_1(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String toString() {
        return "$give_an_answer(" + arg1 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$give_an_answer_1_var, _fail_0, _fail_0, _$give_an_answer_1_1, _fail_0, _$give_an_answer_1_lis);
    }
}

class PRED_$give_an_answer_1_var extends PRED_$give_an_answer_1 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$give_an_answer_1_1, _$give_an_answer_1_var_1);
    }
}

class PRED_$give_an_answer_1_var_1 extends PRED_$give_an_answer_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$give_an_answer_1_2, _$give_an_answer_1_var_2);
    }
}

class PRED_$give_an_answer_1_var_2 extends PRED_$give_an_answer_1 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$give_an_answer_1_3);
    }
}

class PRED_$give_an_answer_1_lis extends PRED_$give_an_answer_1 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$give_an_answer_1_2, _$give_an_answer_1_lis_1);
    }
}

class PRED_$give_an_answer_1_lis_1 extends PRED_$give_an_answer_1 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$give_an_answer_1_3);
    }
}

class PRED_$give_an_answer_1_1 extends PRED_$give_an_answer_1 {
    public Predicate exec(Prolog engine) {
    // '$give_an_answer'([]):-!,'$fast_write'(true)
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$give_an_answer'([]):-['$neck_cut','$fast_write'(true)]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s1))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return new PRED_$fast_write_1(s2, cont);
    }
}

class PRED_$give_an_answer_1_2 extends PRED_$give_an_answer_1 {
    public Predicate exec(Prolog engine) {
    // '$give_an_answer'([A]):-!,'$print_an answer'(A)
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$give_an_answer'([A]):-['$neck_cut','$print_an answer'(A)]
        a1 = a1.dereference();
        if (a1.isList()){
            Term[] args = {((ListTerm)a1).car(), ((ListTerm)a1).cdr()};
            a2 = args[0];
            if (! s1.unify(args[1], engine.trail))
                return engine.fail();
        } else if (a1.isVariable()){
            a2 = new VariableTerm(engine);
            ((VariableTerm) a1).bind(new ListTerm(a2, s1), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return new PRED_$print_an$0020answer_1(a2, cont);
    }
}

class PRED_$give_an_answer_1_3 extends PRED_$give_an_answer_1 {
    public Predicate exec(Prolog engine) {
    // '$give_an_answer'([A|B]):-'$print_an answer'(A),'$fast_write'(','),nl,'$give_an_answer'(B)
        Term a1, a2, a3;
        Predicate p1, p2, p3;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$give_an_answer'([A|B]):-['$print_an answer'(A),'$fast_write'(','),nl,'$give_an_answer'(B)]
        a1 = a1.dereference();
        if (a1.isList()){
            Term[] args = {((ListTerm)a1).car(), ((ListTerm)a1).cdr()};
            a2 = args[0];
            a3 = args[1];
        } else if (a1.isVariable()){
            a2 = new VariableTerm(engine);
            a3 = new VariableTerm(engine);
            ((VariableTerm) a1).bind(new ListTerm(a2, a3), engine.trail);
        } else {
            return engine.fail();
        }
        p1 = new PRED_$give_an_answer_1(a3, cont);
        p2 = new PRED_nl_0(p1);
        p3 = new PRED_$fast_write_1(s3, p2);
        return new PRED_$print_an$0020answer_1(a2, p3);
    }
}
