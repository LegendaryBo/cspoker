package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.IllegalTypeException;
import jp.ac.kobe_u.cs.prolog.lang.IntegerTerm;
import jp.ac.kobe_u.cs.prolog.lang.ListTerm;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.StructureTerm;
import jp.ac.kobe_u.cs.prolog.lang.SymbolTerm;
import jp.ac.kobe_u.cs.prolog.lang.Term;
import jp.ac.kobe_u.cs.prolog.lang.VariableTerm;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$meta_call'/5</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$meta_call_5 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("var");
    static SymbolTerm s2 = SymbolTerm.makeSymbol("call", 1);
    static IntegerTerm si3 = new IntegerTerm(1);
    static SymbolTerm s4 = SymbolTerm.makeSymbol("true");
    static SymbolTerm s5 = SymbolTerm.makeSymbol("trace");
    static SymbolTerm s6 = SymbolTerm.makeSymbol("debug");
    static SymbolTerm s7 = SymbolTerm.makeSymbol("notrace");
    static SymbolTerm s8 = SymbolTerm.makeSymbol("nodebug");
    static SymbolTerm s9 = SymbolTerm.makeSymbol("spy", 1);
    static SymbolTerm s10 = SymbolTerm.makeSymbol("nospy", 1);
    static SymbolTerm s11 = SymbolTerm.makeSymbol("nospyall");
    static SymbolTerm s12 = SymbolTerm.makeSymbol("leash", 1);
    static SymbolTerm s13 = SymbolTerm.makeSymbol("^", 2);
    static SymbolTerm s14 = SymbolTerm.makeSymbol(":", 2);
    static SymbolTerm s15 = SymbolTerm.makeSymbol("!");
    static SymbolTerm s16 = SymbolTerm.makeSymbol("no");
    static SymbolTerm s17 = SymbolTerm.makeSymbol("context", 2);
    static SymbolTerm s18 = SymbolTerm.makeSymbol("if");
    static SymbolTerm s19 = SymbolTerm.makeSymbol("cut");
    static Term[] s20 = {s18, s19};
    static StructureTerm s21 = new StructureTerm(s17, s20);
    static IntegerTerm si22 = new IntegerTerm(0);
    static SymbolTerm s23 = SymbolTerm.makeSymbol(",", 2);
    static SymbolTerm s24 = SymbolTerm.makeSymbol(";", 2);
    static SymbolTerm s25 = SymbolTerm.makeSymbol("->", 2);
    static SymbolTerm s26 = SymbolTerm.makeSymbol("\\+", 1);
    static SymbolTerm s27 = SymbolTerm.makeSymbol("findall", 3);
    static SymbolTerm s28 = SymbolTerm.makeSymbol("jp.ac.kobe_u.cs.prolog.builtin");
    static SymbolTerm s29 = SymbolTerm.makeSymbol("$meta_call", 5);
    static SymbolTerm s30 = SymbolTerm.makeSymbol("bagof", 3);
    static SymbolTerm s31 = SymbolTerm.makeSymbol("setof", 3);
    static SymbolTerm s32 = SymbolTerm.makeSymbol("once", 1);
    static SymbolTerm s33 = SymbolTerm.makeSymbol("on_exception", 3);
    static SymbolTerm s34 = SymbolTerm.makeSymbol("catch", 3);
    static SymbolTerm s35 = SymbolTerm.makeSymbol("clause", 2);
    static SymbolTerm s36 = SymbolTerm.makeSymbol("assert", 1);
    static SymbolTerm s37 = SymbolTerm.makeSymbol("assertz", 1);
    static SymbolTerm s38 = SymbolTerm.makeSymbol("asserta", 1);
    static SymbolTerm s39 = SymbolTerm.makeSymbol("retract", 1);
    static SymbolTerm s40 = SymbolTerm.makeSymbol("abolish", 1);
    static SymbolTerm s41 = SymbolTerm.makeSymbol("retractall", 1);
    static SymbolTerm s42 = SymbolTerm.makeSymbol("type", 1);
    static SymbolTerm s43 = SymbolTerm.makeSymbol("callable");
    static Term[] s44 = {s43};
    static StructureTerm s45 = new StructureTerm(s42, s44);
    static Predicate _$meta_call_5_top = new PRED_$meta_call_5_top();
    static Predicate _$meta_call_5_var = new PRED_$meta_call_5_var();
    static Predicate _$meta_call_5_var_1 = new PRED_$meta_call_5_var_1();
    static Predicate _$meta_call_5_var_2 = new PRED_$meta_call_5_var_2();
    static Predicate _$meta_call_5_var_3 = new PRED_$meta_call_5_var_3();
    static Predicate _$meta_call_5_var_4 = new PRED_$meta_call_5_var_4();
    static Predicate _$meta_call_5_var_5 = new PRED_$meta_call_5_var_5();
    static Predicate _$meta_call_5_var_6 = new PRED_$meta_call_5_var_6();
    static Predicate _$meta_call_5_var_7 = new PRED_$meta_call_5_var_7();
    static Predicate _$meta_call_5_var_8 = new PRED_$meta_call_5_var_8();
    static Predicate _$meta_call_5_var_9 = new PRED_$meta_call_5_var_9();
    static Predicate _$meta_call_5_var_10 = new PRED_$meta_call_5_var_10();
    static Predicate _$meta_call_5_var_11 = new PRED_$meta_call_5_var_11();
    static Predicate _$meta_call_5_var_12 = new PRED_$meta_call_5_var_12();
    static Predicate _$meta_call_5_var_13 = new PRED_$meta_call_5_var_13();
    static Predicate _$meta_call_5_var_14 = new PRED_$meta_call_5_var_14();
    static Predicate _$meta_call_5_var_15 = new PRED_$meta_call_5_var_15();
    static Predicate _$meta_call_5_var_16 = new PRED_$meta_call_5_var_16();
    static Predicate _$meta_call_5_var_17 = new PRED_$meta_call_5_var_17();
    static Predicate _$meta_call_5_var_18 = new PRED_$meta_call_5_var_18();
    static Predicate _$meta_call_5_var_19 = new PRED_$meta_call_5_var_19();
    static Predicate _$meta_call_5_var_20 = new PRED_$meta_call_5_var_20();
    static Predicate _$meta_call_5_var_21 = new PRED_$meta_call_5_var_21();
    static Predicate _$meta_call_5_var_22 = new PRED_$meta_call_5_var_22();
    static Predicate _$meta_call_5_var_23 = new PRED_$meta_call_5_var_23();
    static Predicate _$meta_call_5_var_24 = new PRED_$meta_call_5_var_24();
    static Predicate _$meta_call_5_var_25 = new PRED_$meta_call_5_var_25();
    static Predicate _$meta_call_5_var_26 = new PRED_$meta_call_5_var_26();
    static Predicate _$meta_call_5_var_27 = new PRED_$meta_call_5_var_27();
    static Predicate _$meta_call_5_var_28 = new PRED_$meta_call_5_var_28();
    static Predicate _$meta_call_5_var_29 = new PRED_$meta_call_5_var_29();
    static Predicate _$meta_call_5_var_30 = new PRED_$meta_call_5_var_30();
    static Predicate _$meta_call_5_var_31 = new PRED_$meta_call_5_var_31();
    static Predicate _$meta_call_5_var_32 = new PRED_$meta_call_5_var_32();
    static Predicate _$meta_call_5_var_33 = new PRED_$meta_call_5_var_33();
    static Predicate _$meta_call_5_var_34 = new PRED_$meta_call_5_var_34();
    static Predicate _$meta_call_5_var_35 = new PRED_$meta_call_5_var_35();
    static Predicate _$meta_call_5_int = new PRED_$meta_call_5_int();
    static Predicate _$meta_call_5_int_1 = new PRED_$meta_call_5_int_1();
    static Predicate _$meta_call_5_int_2 = new PRED_$meta_call_5_int_2();
    static Predicate _$meta_call_5_int_3 = new PRED_$meta_call_5_int_3();
    static Predicate _$meta_call_5_con = new PRED_$meta_call_5_con();
    static Predicate _$meta_call_5_con_0 = new PRED_$meta_call_5_con_0();
    static Predicate _$meta_call_5_con_0_1 = new PRED_$meta_call_5_con_0_1();
    static Predicate _$meta_call_5_con_0_2 = new PRED_$meta_call_5_con_0_2();
    static Predicate _$meta_call_5_con_0_3 = new PRED_$meta_call_5_con_0_3();
    static Predicate _$meta_call_5_con_0_4 = new PRED_$meta_call_5_con_0_4();
    static Predicate _$meta_call_5_con_1 = new PRED_$meta_call_5_con_1();
    static Predicate _$meta_call_5_con_1_1 = new PRED_$meta_call_5_con_1_1();
    static Predicate _$meta_call_5_con_1_2 = new PRED_$meta_call_5_con_1_2();
    static Predicate _$meta_call_5_con_1_3 = new PRED_$meta_call_5_con_1_3();
    static Predicate _$meta_call_5_con_1_4 = new PRED_$meta_call_5_con_1_4();
    static Predicate _$meta_call_5_con_2 = new PRED_$meta_call_5_con_2();
    static Predicate _$meta_call_5_con_2_1 = new PRED_$meta_call_5_con_2_1();
    static Predicate _$meta_call_5_con_2_2 = new PRED_$meta_call_5_con_2_2();
    static Predicate _$meta_call_5_con_2_3 = new PRED_$meta_call_5_con_2_3();
    static Predicate _$meta_call_5_con_2_4 = new PRED_$meta_call_5_con_2_4();
    static Predicate _$meta_call_5_con_3 = new PRED_$meta_call_5_con_3();
    static Predicate _$meta_call_5_con_3_1 = new PRED_$meta_call_5_con_3_1();
    static Predicate _$meta_call_5_con_3_2 = new PRED_$meta_call_5_con_3_2();
    static Predicate _$meta_call_5_con_3_3 = new PRED_$meta_call_5_con_3_3();
    static Predicate _$meta_call_5_con_3_4 = new PRED_$meta_call_5_con_3_4();
    static Predicate _$meta_call_5_con_4 = new PRED_$meta_call_5_con_4();
    static Predicate _$meta_call_5_con_4_1 = new PRED_$meta_call_5_con_4_1();
    static Predicate _$meta_call_5_con_4_2 = new PRED_$meta_call_5_con_4_2();
    static Predicate _$meta_call_5_con_4_3 = new PRED_$meta_call_5_con_4_3();
    static Predicate _$meta_call_5_con_4_4 = new PRED_$meta_call_5_con_4_4();
    static Predicate _$meta_call_5_con_5 = new PRED_$meta_call_5_con_5();
    static Predicate _$meta_call_5_con_5_1 = new PRED_$meta_call_5_con_5_1();
    static Predicate _$meta_call_5_con_5_2 = new PRED_$meta_call_5_con_5_2();
    static Predicate _$meta_call_5_con_5_3 = new PRED_$meta_call_5_con_5_3();
    static Predicate _$meta_call_5_con_5_4 = new PRED_$meta_call_5_con_5_4();
    static Predicate _$meta_call_5_con_6 = new PRED_$meta_call_5_con_6();
    static Predicate _$meta_call_5_con_6_1 = new PRED_$meta_call_5_con_6_1();
    static Predicate _$meta_call_5_con_6_2 = new PRED_$meta_call_5_con_6_2();
    static Predicate _$meta_call_5_con_6_3 = new PRED_$meta_call_5_con_6_3();
    static Predicate _$meta_call_5_con_6_4 = new PRED_$meta_call_5_con_6_4();
    static Predicate _$meta_call_5_con_6_5 = new PRED_$meta_call_5_con_6_5();
    static Predicate _$meta_call_5_str = new PRED_$meta_call_5_str();
    static Predicate _$meta_call_5_str_0 = new PRED_$meta_call_5_str_0();
    static Predicate _$meta_call_5_str_0_1 = new PRED_$meta_call_5_str_0_1();
    static Predicate _$meta_call_5_str_0_2 = new PRED_$meta_call_5_str_0_2();
    static Predicate _$meta_call_5_str_0_3 = new PRED_$meta_call_5_str_0_3();
    static Predicate _$meta_call_5_str_0_4 = new PRED_$meta_call_5_str_0_4();
    static Predicate _$meta_call_5_str_1 = new PRED_$meta_call_5_str_1();
    static Predicate _$meta_call_5_str_1_1 = new PRED_$meta_call_5_str_1_1();
    static Predicate _$meta_call_5_str_1_2 = new PRED_$meta_call_5_str_1_2();
    static Predicate _$meta_call_5_str_1_3 = new PRED_$meta_call_5_str_1_3();
    static Predicate _$meta_call_5_str_1_4 = new PRED_$meta_call_5_str_1_4();
    static Predicate _$meta_call_5_str_2 = new PRED_$meta_call_5_str_2();
    static Predicate _$meta_call_5_str_2_1 = new PRED_$meta_call_5_str_2_1();
    static Predicate _$meta_call_5_str_2_2 = new PRED_$meta_call_5_str_2_2();
    static Predicate _$meta_call_5_str_2_3 = new PRED_$meta_call_5_str_2_3();
    static Predicate _$meta_call_5_str_2_4 = new PRED_$meta_call_5_str_2_4();
    static Predicate _$meta_call_5_str_3 = new PRED_$meta_call_5_str_3();
    static Predicate _$meta_call_5_str_3_1 = new PRED_$meta_call_5_str_3_1();
    static Predicate _$meta_call_5_str_3_2 = new PRED_$meta_call_5_str_3_2();
    static Predicate _$meta_call_5_str_3_3 = new PRED_$meta_call_5_str_3_3();
    static Predicate _$meta_call_5_str_3_4 = new PRED_$meta_call_5_str_3_4();
    static Predicate _$meta_call_5_str_4 = new PRED_$meta_call_5_str_4();
    static Predicate _$meta_call_5_str_4_1 = new PRED_$meta_call_5_str_4_1();
    static Predicate _$meta_call_5_str_4_2 = new PRED_$meta_call_5_str_4_2();
    static Predicate _$meta_call_5_str_4_3 = new PRED_$meta_call_5_str_4_3();
    static Predicate _$meta_call_5_str_4_4 = new PRED_$meta_call_5_str_4_4();
    static Predicate _$meta_call_5_str_5 = new PRED_$meta_call_5_str_5();
    static Predicate _$meta_call_5_str_5_1 = new PRED_$meta_call_5_str_5_1();
    static Predicate _$meta_call_5_str_5_2 = new PRED_$meta_call_5_str_5_2();
    static Predicate _$meta_call_5_str_5_3 = new PRED_$meta_call_5_str_5_3();
    static Predicate _$meta_call_5_str_5_4 = new PRED_$meta_call_5_str_5_4();
    static Predicate _$meta_call_5_str_6 = new PRED_$meta_call_5_str_6();
    static Predicate _$meta_call_5_str_6_1 = new PRED_$meta_call_5_str_6_1();
    static Predicate _$meta_call_5_str_6_2 = new PRED_$meta_call_5_str_6_2();
    static Predicate _$meta_call_5_str_6_3 = new PRED_$meta_call_5_str_6_3();
    static Predicate _$meta_call_5_str_6_4 = new PRED_$meta_call_5_str_6_4();
    static Predicate _$meta_call_5_str_7 = new PRED_$meta_call_5_str_7();
    static Predicate _$meta_call_5_str_7_1 = new PRED_$meta_call_5_str_7_1();
    static Predicate _$meta_call_5_str_7_2 = new PRED_$meta_call_5_str_7_2();
    static Predicate _$meta_call_5_str_7_3 = new PRED_$meta_call_5_str_7_3();
    static Predicate _$meta_call_5_str_7_4 = new PRED_$meta_call_5_str_7_4();
    static Predicate _$meta_call_5_str_7_5 = new PRED_$meta_call_5_str_7_5();
    static Predicate _$meta_call_5_str_8 = new PRED_$meta_call_5_str_8();
    static Predicate _$meta_call_5_str_8_1 = new PRED_$meta_call_5_str_8_1();
    static Predicate _$meta_call_5_str_8_2 = new PRED_$meta_call_5_str_8_2();
    static Predicate _$meta_call_5_str_8_3 = new PRED_$meta_call_5_str_8_3();
    static Predicate _$meta_call_5_str_8_4 = new PRED_$meta_call_5_str_8_4();
    static Predicate _$meta_call_5_str_9 = new PRED_$meta_call_5_str_9();
    static Predicate _$meta_call_5_str_9_1 = new PRED_$meta_call_5_str_9_1();
    static Predicate _$meta_call_5_str_9_2 = new PRED_$meta_call_5_str_9_2();
    static Predicate _$meta_call_5_str_9_3 = new PRED_$meta_call_5_str_9_3();
    static Predicate _$meta_call_5_str_9_4 = new PRED_$meta_call_5_str_9_4();
    static Predicate _$meta_call_5_str_10 = new PRED_$meta_call_5_str_10();
    static Predicate _$meta_call_5_str_10_1 = new PRED_$meta_call_5_str_10_1();
    static Predicate _$meta_call_5_str_10_2 = new PRED_$meta_call_5_str_10_2();
    static Predicate _$meta_call_5_str_10_3 = new PRED_$meta_call_5_str_10_3();
    static Predicate _$meta_call_5_str_10_4 = new PRED_$meta_call_5_str_10_4();
    static Predicate _$meta_call_5_str_11 = new PRED_$meta_call_5_str_11();
    static Predicate _$meta_call_5_str_11_1 = new PRED_$meta_call_5_str_11_1();
    static Predicate _$meta_call_5_str_11_2 = new PRED_$meta_call_5_str_11_2();
    static Predicate _$meta_call_5_str_11_3 = new PRED_$meta_call_5_str_11_3();
    static Predicate _$meta_call_5_str_11_4 = new PRED_$meta_call_5_str_11_4();
    static Predicate _$meta_call_5_str_12 = new PRED_$meta_call_5_str_12();
    static Predicate _$meta_call_5_str_12_1 = new PRED_$meta_call_5_str_12_1();
    static Predicate _$meta_call_5_str_12_2 = new PRED_$meta_call_5_str_12_2();
    static Predicate _$meta_call_5_str_12_3 = new PRED_$meta_call_5_str_12_3();
    static Predicate _$meta_call_5_str_12_4 = new PRED_$meta_call_5_str_12_4();
    static Predicate _$meta_call_5_str_13 = new PRED_$meta_call_5_str_13();
    static Predicate _$meta_call_5_str_13_1 = new PRED_$meta_call_5_str_13_1();
    static Predicate _$meta_call_5_str_13_2 = new PRED_$meta_call_5_str_13_2();
    static Predicate _$meta_call_5_str_13_3 = new PRED_$meta_call_5_str_13_3();
    static Predicate _$meta_call_5_str_13_4 = new PRED_$meta_call_5_str_13_4();
    static Predicate _$meta_call_5_str_14 = new PRED_$meta_call_5_str_14();
    static Predicate _$meta_call_5_str_14_1 = new PRED_$meta_call_5_str_14_1();
    static Predicate _$meta_call_5_str_14_2 = new PRED_$meta_call_5_str_14_2();
    static Predicate _$meta_call_5_str_14_3 = new PRED_$meta_call_5_str_14_3();
    static Predicate _$meta_call_5_str_14_4 = new PRED_$meta_call_5_str_14_4();
    static Predicate _$meta_call_5_str_15 = new PRED_$meta_call_5_str_15();
    static Predicate _$meta_call_5_str_15_1 = new PRED_$meta_call_5_str_15_1();
    static Predicate _$meta_call_5_str_15_2 = new PRED_$meta_call_5_str_15_2();
    static Predicate _$meta_call_5_str_15_3 = new PRED_$meta_call_5_str_15_3();
    static Predicate _$meta_call_5_str_15_4 = new PRED_$meta_call_5_str_15_4();
    static Predicate _$meta_call_5_str_16 = new PRED_$meta_call_5_str_16();
    static Predicate _$meta_call_5_str_16_1 = new PRED_$meta_call_5_str_16_1();
    static Predicate _$meta_call_5_str_16_2 = new PRED_$meta_call_5_str_16_2();
    static Predicate _$meta_call_5_str_16_3 = new PRED_$meta_call_5_str_16_3();
    static Predicate _$meta_call_5_str_16_4 = new PRED_$meta_call_5_str_16_4();
    static Predicate _$meta_call_5_str_17 = new PRED_$meta_call_5_str_17();
    static Predicate _$meta_call_5_str_17_1 = new PRED_$meta_call_5_str_17_1();
    static Predicate _$meta_call_5_str_17_2 = new PRED_$meta_call_5_str_17_2();
    static Predicate _$meta_call_5_str_17_3 = new PRED_$meta_call_5_str_17_3();
    static Predicate _$meta_call_5_str_17_4 = new PRED_$meta_call_5_str_17_4();
    static Predicate _$meta_call_5_str_18 = new PRED_$meta_call_5_str_18();
    static Predicate _$meta_call_5_str_18_1 = new PRED_$meta_call_5_str_18_1();
    static Predicate _$meta_call_5_str_18_2 = new PRED_$meta_call_5_str_18_2();
    static Predicate _$meta_call_5_str_18_3 = new PRED_$meta_call_5_str_18_3();
    static Predicate _$meta_call_5_str_18_4 = new PRED_$meta_call_5_str_18_4();
    static Predicate _$meta_call_5_str_19 = new PRED_$meta_call_5_str_19();
    static Predicate _$meta_call_5_str_19_1 = new PRED_$meta_call_5_str_19_1();
    static Predicate _$meta_call_5_str_19_2 = new PRED_$meta_call_5_str_19_2();
    static Predicate _$meta_call_5_str_19_3 = new PRED_$meta_call_5_str_19_3();
    static Predicate _$meta_call_5_str_19_4 = new PRED_$meta_call_5_str_19_4();
    static Predicate _$meta_call_5_str_20 = new PRED_$meta_call_5_str_20();
    static Predicate _$meta_call_5_str_20_1 = new PRED_$meta_call_5_str_20_1();
    static Predicate _$meta_call_5_str_20_2 = new PRED_$meta_call_5_str_20_2();
    static Predicate _$meta_call_5_str_20_3 = new PRED_$meta_call_5_str_20_3();
    static Predicate _$meta_call_5_str_20_4 = new PRED_$meta_call_5_str_20_4();
    static Predicate _$meta_call_5_str_21 = new PRED_$meta_call_5_str_21();
    static Predicate _$meta_call_5_str_21_1 = new PRED_$meta_call_5_str_21_1();
    static Predicate _$meta_call_5_str_21_2 = new PRED_$meta_call_5_str_21_2();
    static Predicate _$meta_call_5_str_21_3 = new PRED_$meta_call_5_str_21_3();
    static Predicate _$meta_call_5_str_21_4 = new PRED_$meta_call_5_str_21_4();
    static Predicate _$meta_call_5_lis = new PRED_$meta_call_5_lis();
    static Predicate _$meta_call_5_lis_1 = new PRED_$meta_call_5_lis_1();
    static Predicate _$meta_call_5_lis_2 = new PRED_$meta_call_5_lis_2();
    static Predicate _$meta_call_5_lis_3 = new PRED_$meta_call_5_lis_3();
    static Predicate _$meta_call_5_lis_4 = new PRED_$meta_call_5_lis_4();
    static Predicate _$meta_call_5_1 = new PRED_$meta_call_5_1();
    static Predicate _$meta_call_5_2 = new PRED_$meta_call_5_2();
    static Predicate _$meta_call_5_3 = new PRED_$meta_call_5_3();
    static Predicate _$meta_call_5_4 = new PRED_$meta_call_5_4();
    static Predicate _$meta_call_5_5 = new PRED_$meta_call_5_5();
    static Predicate _$meta_call_5_6 = new PRED_$meta_call_5_6();
    static Predicate _$meta_call_5_7 = new PRED_$meta_call_5_7();
    static Predicate _$meta_call_5_8 = new PRED_$meta_call_5_8();
    static Predicate _$meta_call_5_9 = new PRED_$meta_call_5_9();
    static Predicate _$meta_call_5_10 = new PRED_$meta_call_5_10();
    static Predicate _$meta_call_5_11 = new PRED_$meta_call_5_11();
    static Predicate _$meta_call_5_12 = new PRED_$meta_call_5_12();
    static Predicate _$meta_call_5_13 = new PRED_$meta_call_5_13();
    static Predicate _$meta_call_5_14 = new PRED_$meta_call_5_14();
    static Predicate _$meta_call_5_15 = new PRED_$meta_call_5_15();
    static Predicate _$meta_call_5_16 = new PRED_$meta_call_5_16();
    static Predicate _$meta_call_5_17 = new PRED_$meta_call_5_17();
    static Predicate _$meta_call_5_18 = new PRED_$meta_call_5_18();
    static Predicate _$meta_call_5_19 = new PRED_$meta_call_5_19();
    static Predicate _$meta_call_5_20 = new PRED_$meta_call_5_20();
    static Predicate _$meta_call_5_21 = new PRED_$meta_call_5_21();
    static Predicate _$meta_call_5_22 = new PRED_$meta_call_5_22();
    static Predicate _$meta_call_5_23 = new PRED_$meta_call_5_23();
    static Predicate _$meta_call_5_24 = new PRED_$meta_call_5_24();
    static Predicate _$meta_call_5_25 = new PRED_$meta_call_5_25();
    static Predicate _$meta_call_5_26 = new PRED_$meta_call_5_26();
    static Predicate _$meta_call_5_27 = new PRED_$meta_call_5_27();
    static Predicate _$meta_call_5_28 = new PRED_$meta_call_5_28();
    static Predicate _$meta_call_5_29 = new PRED_$meta_call_5_29();
    static Predicate _$meta_call_5_30 = new PRED_$meta_call_5_30();
    static Predicate _$meta_call_5_31 = new PRED_$meta_call_5_31();
    static Predicate _$meta_call_5_32 = new PRED_$meta_call_5_32();
    static Predicate _$meta_call_5_33 = new PRED_$meta_call_5_33();
    static Predicate _$meta_call_5_34 = new PRED_$meta_call_5_34();
    static Predicate _$meta_call_5_35 = new PRED_$meta_call_5_35();
    static Predicate _$meta_call_5_36 = new PRED_$meta_call_5_36();
    static java.util.Hashtable<Term, Predicate> con = new java.util.Hashtable<Term, Predicate>(7);
    static java.util.Hashtable<Term, Predicate> str = new java.util.Hashtable<Term, Predicate>(22);
    static {
        con.put(s4, _$meta_call_5_con_0);
        con.put(s5, _$meta_call_5_con_1);
        con.put(s6, _$meta_call_5_con_2);
        con.put(s7, _$meta_call_5_con_3);
        con.put(s8, _$meta_call_5_con_4);
        con.put(s11, _$meta_call_5_con_5);
        con.put(s15, _$meta_call_5_con_6);
        str.put(s9, _$meta_call_5_str_0);
        str.put(s10, _$meta_call_5_str_1);
        str.put(s12, _$meta_call_5_str_2);
        str.put(s13, _$meta_call_5_str_3);
        str.put(s14, _$meta_call_5_str_4);
        str.put(s23, _$meta_call_5_str_5);
        str.put(s25, _$meta_call_5_str_6);
        str.put(s24, _$meta_call_5_str_7);
        str.put(s26, _$meta_call_5_str_8);
        str.put(s27, _$meta_call_5_str_9);
        str.put(s30, _$meta_call_5_str_10);
        str.put(s31, _$meta_call_5_str_11);
        str.put(s32, _$meta_call_5_str_12);
        str.put(s33, _$meta_call_5_str_13);
        str.put(s34, _$meta_call_5_str_14);
        str.put(s35, _$meta_call_5_str_15);
        str.put(s36, _$meta_call_5_str_16);
        str.put(s37, _$meta_call_5_str_17);
        str.put(s38, _$meta_call_5_str_18);
        str.put(s39, _$meta_call_5_str_19);
        str.put(s40, _$meta_call_5_str_20);
        str.put(s41, _$meta_call_5_str_21);
    }

    public Term arg1, arg2, arg3, arg4, arg5;

    public PRED_$meta_call_5(Term a1, Term a2, Term a3, Term a4, Term a5, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        arg5 = a5;
        this.cont = cont;
    }

    public PRED_$meta_call_5(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        arg5 = args[4];
        this.cont = cont;
    }

    public int arity() { return 5; }

    public String toString() {
        return "$meta_call(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + "," + arg5 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.aregs[4] = arg4;
        engine.aregs[5] = arg5;
        engine.cont = cont;
        return _$meta_call_5_top;
    }
}

class PRED_$meta_call_5_top extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        engine.setB0();
        return engine.switch_on_term(_$meta_call_5_var, _$meta_call_5_int, _$meta_call_5_int, _$meta_call_5_con, _$meta_call_5_str, _$meta_call_5_lis);
    }
}

class PRED_$meta_call_5_var extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_var_1);
    }
}

class PRED_$meta_call_5_var_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_2, _$meta_call_5_var_2);
    }
}

class PRED_$meta_call_5_var_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_3, _$meta_call_5_var_3);
    }
}

class PRED_$meta_call_5_var_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_4, _$meta_call_5_var_4);
    }
}

class PRED_$meta_call_5_var_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_5, _$meta_call_5_var_5);
    }
}

class PRED_$meta_call_5_var_5 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_6, _$meta_call_5_var_6);
    }
}

class PRED_$meta_call_5_var_6 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_7, _$meta_call_5_var_7);
    }
}

class PRED_$meta_call_5_var_7 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_8, _$meta_call_5_var_8);
    }
}

class PRED_$meta_call_5_var_8 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_9, _$meta_call_5_var_9);
    }
}

class PRED_$meta_call_5_var_9 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_10, _$meta_call_5_var_10);
    }
}

class PRED_$meta_call_5_var_10 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_11, _$meta_call_5_var_11);
    }
}

class PRED_$meta_call_5_var_11 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_12, _$meta_call_5_var_12);
    }
}

class PRED_$meta_call_5_var_12 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_13, _$meta_call_5_var_13);
    }
}

class PRED_$meta_call_5_var_13 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_14, _$meta_call_5_var_14);
    }
}

class PRED_$meta_call_5_var_14 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_15, _$meta_call_5_var_15);
    }
}

class PRED_$meta_call_5_var_15 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_16, _$meta_call_5_var_16);
    }
}

class PRED_$meta_call_5_var_16 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_17, _$meta_call_5_var_17);
    }
}

class PRED_$meta_call_5_var_17 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_18, _$meta_call_5_var_18);
    }
}

class PRED_$meta_call_5_var_18 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_19, _$meta_call_5_var_19);
    }
}

class PRED_$meta_call_5_var_19 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_20, _$meta_call_5_var_20);
    }
}

class PRED_$meta_call_5_var_20 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_21, _$meta_call_5_var_21);
    }
}

class PRED_$meta_call_5_var_21 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_22, _$meta_call_5_var_22);
    }
}

class PRED_$meta_call_5_var_22 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_23, _$meta_call_5_var_23);
    }
}

class PRED_$meta_call_5_var_23 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_24, _$meta_call_5_var_24);
    }
}

class PRED_$meta_call_5_var_24 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_25, _$meta_call_5_var_25);
    }
}

class PRED_$meta_call_5_var_25 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_26, _$meta_call_5_var_26);
    }
}

class PRED_$meta_call_5_var_26 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_27, _$meta_call_5_var_27);
    }
}

class PRED_$meta_call_5_var_27 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_28, _$meta_call_5_var_28);
    }
}

class PRED_$meta_call_5_var_28 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_29, _$meta_call_5_var_29);
    }
}

class PRED_$meta_call_5_var_29 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_30, _$meta_call_5_var_30);
    }
}

class PRED_$meta_call_5_var_30 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_31, _$meta_call_5_var_31);
    }
}

class PRED_$meta_call_5_var_31 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_32, _$meta_call_5_var_32);
    }
}

class PRED_$meta_call_5_var_32 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_33, _$meta_call_5_var_33);
    }
}

class PRED_$meta_call_5_var_33 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_34, _$meta_call_5_var_34);
    }
}

class PRED_$meta_call_5_var_34 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_35, _$meta_call_5_var_35);
    }
}

class PRED_$meta_call_5_var_35 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$meta_call_5_36);
    }
}

class PRED_$meta_call_5_int extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_int_1);
    }
}

class PRED_$meta_call_5_int_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_2, _$meta_call_5_int_2);
    }
}

class PRED_$meta_call_5_int_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_35, _$meta_call_5_int_3);
    }
}

class PRED_$meta_call_5_int_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$meta_call_5_36);
    }
}

class PRED_$meta_call_5_con extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.switch_on_hash(con, _$meta_call_5_int);
    }
}

class PRED_$meta_call_5_con_0 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_con_0_1);
    }
}

class PRED_$meta_call_5_con_0_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_2, _$meta_call_5_con_0_2);
    }
}

class PRED_$meta_call_5_con_0_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_3, _$meta_call_5_con_0_3);
    }
}

class PRED_$meta_call_5_con_0_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_35, _$meta_call_5_con_0_4);
    }
}

class PRED_$meta_call_5_con_0_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$meta_call_5_36);
    }
}

class PRED_$meta_call_5_con_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_con_1_1);
    }
}

class PRED_$meta_call_5_con_1_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_2, _$meta_call_5_con_1_2);
    }
}

class PRED_$meta_call_5_con_1_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_4, _$meta_call_5_con_1_3);
    }
}

class PRED_$meta_call_5_con_1_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_35, _$meta_call_5_con_1_4);
    }
}

class PRED_$meta_call_5_con_1_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$meta_call_5_36);
    }
}

class PRED_$meta_call_5_con_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_con_2_1);
    }
}

class PRED_$meta_call_5_con_2_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_2, _$meta_call_5_con_2_2);
    }
}

class PRED_$meta_call_5_con_2_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_5, _$meta_call_5_con_2_3);
    }
}

class PRED_$meta_call_5_con_2_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_35, _$meta_call_5_con_2_4);
    }
}

class PRED_$meta_call_5_con_2_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$meta_call_5_36);
    }
}

class PRED_$meta_call_5_con_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_con_3_1);
    }
}

class PRED_$meta_call_5_con_3_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_2, _$meta_call_5_con_3_2);
    }
}

class PRED_$meta_call_5_con_3_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_6, _$meta_call_5_con_3_3);
    }
}

class PRED_$meta_call_5_con_3_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_35, _$meta_call_5_con_3_4);
    }
}

class PRED_$meta_call_5_con_3_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$meta_call_5_36);
    }
}

class PRED_$meta_call_5_con_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_con_4_1);
    }
}

class PRED_$meta_call_5_con_4_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_2, _$meta_call_5_con_4_2);
    }
}

class PRED_$meta_call_5_con_4_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_7, _$meta_call_5_con_4_3);
    }
}

class PRED_$meta_call_5_con_4_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_35, _$meta_call_5_con_4_4);
    }
}

class PRED_$meta_call_5_con_4_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$meta_call_5_36);
    }
}

class PRED_$meta_call_5_con_5 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_con_5_1);
    }
}

class PRED_$meta_call_5_con_5_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_2, _$meta_call_5_con_5_2);
    }
}

class PRED_$meta_call_5_con_5_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_10, _$meta_call_5_con_5_3);
    }
}

class PRED_$meta_call_5_con_5_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_35, _$meta_call_5_con_5_4);
    }
}

class PRED_$meta_call_5_con_5_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$meta_call_5_36);
    }
}

class PRED_$meta_call_5_con_6 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_con_6_1);
    }
}

class PRED_$meta_call_5_con_6_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_2, _$meta_call_5_con_6_2);
    }
}

class PRED_$meta_call_5_con_6_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_15, _$meta_call_5_con_6_3);
    }
}

class PRED_$meta_call_5_con_6_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_16, _$meta_call_5_con_6_4);
    }
}

class PRED_$meta_call_5_con_6_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_35, _$meta_call_5_con_6_5);
    }
}

class PRED_$meta_call_5_con_6_5 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$meta_call_5_36);
    }
}

class PRED_$meta_call_5_str extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.switch_on_hash(str, _$meta_call_5_int);
    }
}

class PRED_$meta_call_5_str_0 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_0_1);
    }
}

class PRED_$meta_call_5_str_0_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_0_2);
    }
}

class PRED_$meta_call_5_str_0_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_8, _$meta_call_5_str_0_3);
    }
}

class PRED_$meta_call_5_str_0_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_35, _$meta_call_5_str_0_4);
    }
}

class PRED_$meta_call_5_str_0_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$meta_call_5_36);
    }
}

class PRED_$meta_call_5_str_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_1_1);
    }
}

class PRED_$meta_call_5_str_1_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_1_2);
    }
}

class PRED_$meta_call_5_str_1_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_9, _$meta_call_5_str_1_3);
    }
}

class PRED_$meta_call_5_str_1_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_35, _$meta_call_5_str_1_4);
    }
}

class PRED_$meta_call_5_str_1_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$meta_call_5_36);
    }
}

class PRED_$meta_call_5_str_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_2_1);
    }
}

class PRED_$meta_call_5_str_2_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_2_2);
    }
}

class PRED_$meta_call_5_str_2_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_11, _$meta_call_5_str_2_3);
    }
}

class PRED_$meta_call_5_str_2_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_35, _$meta_call_5_str_2_4);
    }
}

class PRED_$meta_call_5_str_2_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$meta_call_5_36);
    }
}

class PRED_$meta_call_5_str_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_3_1);
    }
}

class PRED_$meta_call_5_str_3_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_3_2);
    }
}

class PRED_$meta_call_5_str_3_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_13, _$meta_call_5_str_3_3);
    }
}

class PRED_$meta_call_5_str_3_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_35, _$meta_call_5_str_3_4);
    }
}

class PRED_$meta_call_5_str_3_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$meta_call_5_36);
    }
}

class PRED_$meta_call_5_str_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_4_1);
    }
}

class PRED_$meta_call_5_str_4_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_4_2);
    }
}

class PRED_$meta_call_5_str_4_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_14, _$meta_call_5_str_4_3);
    }
}

class PRED_$meta_call_5_str_4_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_35, _$meta_call_5_str_4_4);
    }
}

class PRED_$meta_call_5_str_4_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$meta_call_5_36);
    }
}

class PRED_$meta_call_5_str_5 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_5_1);
    }
}

class PRED_$meta_call_5_str_5_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_5_2);
    }
}

class PRED_$meta_call_5_str_5_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_17, _$meta_call_5_str_5_3);
    }
}

class PRED_$meta_call_5_str_5_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_35, _$meta_call_5_str_5_4);
    }
}

class PRED_$meta_call_5_str_5_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$meta_call_5_36);
    }
}

class PRED_$meta_call_5_str_6 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_6_1);
    }
}

class PRED_$meta_call_5_str_6_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_6_2);
    }
}

class PRED_$meta_call_5_str_6_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_19, _$meta_call_5_str_6_3);
    }
}

class PRED_$meta_call_5_str_6_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_35, _$meta_call_5_str_6_4);
    }
}

class PRED_$meta_call_5_str_6_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$meta_call_5_36);
    }
}

class PRED_$meta_call_5_str_7 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_7_1);
    }
}

class PRED_$meta_call_5_str_7_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_7_2);
    }
}

class PRED_$meta_call_5_str_7_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_18, _$meta_call_5_str_7_3);
    }
}

class PRED_$meta_call_5_str_7_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_20, _$meta_call_5_str_7_4);
    }
}

class PRED_$meta_call_5_str_7_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_35, _$meta_call_5_str_7_5);
    }
}

class PRED_$meta_call_5_str_7_5 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$meta_call_5_36);
    }
}

class PRED_$meta_call_5_str_8 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_8_1);
    }
}

class PRED_$meta_call_5_str_8_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_8_2);
    }
}

class PRED_$meta_call_5_str_8_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_21, _$meta_call_5_str_8_3);
    }
}

class PRED_$meta_call_5_str_8_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_35, _$meta_call_5_str_8_4);
    }
}

class PRED_$meta_call_5_str_8_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$meta_call_5_36);
    }
}

class PRED_$meta_call_5_str_9 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_9_1);
    }
}

class PRED_$meta_call_5_str_9_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_9_2);
    }
}

class PRED_$meta_call_5_str_9_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_22, _$meta_call_5_str_9_3);
    }
}

class PRED_$meta_call_5_str_9_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_35, _$meta_call_5_str_9_4);
    }
}

class PRED_$meta_call_5_str_9_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$meta_call_5_36);
    }
}

class PRED_$meta_call_5_str_10 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_10_1);
    }
}

class PRED_$meta_call_5_str_10_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_10_2);
    }
}

class PRED_$meta_call_5_str_10_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_23, _$meta_call_5_str_10_3);
    }
}

class PRED_$meta_call_5_str_10_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_35, _$meta_call_5_str_10_4);
    }
}

class PRED_$meta_call_5_str_10_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$meta_call_5_36);
    }
}

class PRED_$meta_call_5_str_11 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_11_1);
    }
}

class PRED_$meta_call_5_str_11_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_11_2);
    }
}

class PRED_$meta_call_5_str_11_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_24, _$meta_call_5_str_11_3);
    }
}

class PRED_$meta_call_5_str_11_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_35, _$meta_call_5_str_11_4);
    }
}

class PRED_$meta_call_5_str_11_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$meta_call_5_36);
    }
}

class PRED_$meta_call_5_str_12 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_12_1);
    }
}

class PRED_$meta_call_5_str_12_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_12_2);
    }
}

class PRED_$meta_call_5_str_12_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_25, _$meta_call_5_str_12_3);
    }
}

class PRED_$meta_call_5_str_12_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_35, _$meta_call_5_str_12_4);
    }
}

class PRED_$meta_call_5_str_12_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$meta_call_5_36);
    }
}

class PRED_$meta_call_5_str_13 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_13_1);
    }
}

class PRED_$meta_call_5_str_13_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_13_2);
    }
}

class PRED_$meta_call_5_str_13_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_26, _$meta_call_5_str_13_3);
    }
}

class PRED_$meta_call_5_str_13_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_35, _$meta_call_5_str_13_4);
    }
}

class PRED_$meta_call_5_str_13_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$meta_call_5_36);
    }
}

class PRED_$meta_call_5_str_14 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_14_1);
    }
}

class PRED_$meta_call_5_str_14_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_14_2);
    }
}

class PRED_$meta_call_5_str_14_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_27, _$meta_call_5_str_14_3);
    }
}

class PRED_$meta_call_5_str_14_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_35, _$meta_call_5_str_14_4);
    }
}

class PRED_$meta_call_5_str_14_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$meta_call_5_36);
    }
}

class PRED_$meta_call_5_str_15 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_15_1);
    }
}

class PRED_$meta_call_5_str_15_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_15_2);
    }
}

class PRED_$meta_call_5_str_15_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_28, _$meta_call_5_str_15_3);
    }
}

class PRED_$meta_call_5_str_15_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_35, _$meta_call_5_str_15_4);
    }
}

class PRED_$meta_call_5_str_15_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$meta_call_5_36);
    }
}

class PRED_$meta_call_5_str_16 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_16_1);
    }
}

class PRED_$meta_call_5_str_16_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_16_2);
    }
}

class PRED_$meta_call_5_str_16_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_29, _$meta_call_5_str_16_3);
    }
}

class PRED_$meta_call_5_str_16_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_35, _$meta_call_5_str_16_4);
    }
}

class PRED_$meta_call_5_str_16_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$meta_call_5_36);
    }
}

class PRED_$meta_call_5_str_17 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_17_1);
    }
}

class PRED_$meta_call_5_str_17_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_17_2);
    }
}

class PRED_$meta_call_5_str_17_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_30, _$meta_call_5_str_17_3);
    }
}

class PRED_$meta_call_5_str_17_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_35, _$meta_call_5_str_17_4);
    }
}

class PRED_$meta_call_5_str_17_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$meta_call_5_36);
    }
}

class PRED_$meta_call_5_str_18 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_18_1);
    }
}

class PRED_$meta_call_5_str_18_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_18_2);
    }
}

class PRED_$meta_call_5_str_18_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_31, _$meta_call_5_str_18_3);
    }
}

class PRED_$meta_call_5_str_18_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_35, _$meta_call_5_str_18_4);
    }
}

class PRED_$meta_call_5_str_18_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$meta_call_5_36);
    }
}

class PRED_$meta_call_5_str_19 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_19_1);
    }
}

class PRED_$meta_call_5_str_19_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_19_2);
    }
}

class PRED_$meta_call_5_str_19_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_32, _$meta_call_5_str_19_3);
    }
}

class PRED_$meta_call_5_str_19_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_35, _$meta_call_5_str_19_4);
    }
}

class PRED_$meta_call_5_str_19_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$meta_call_5_36);
    }
}

class PRED_$meta_call_5_str_20 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_20_1);
    }
}

class PRED_$meta_call_5_str_20_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_20_2);
    }
}

class PRED_$meta_call_5_str_20_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_33, _$meta_call_5_str_20_3);
    }
}

class PRED_$meta_call_5_str_20_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_35, _$meta_call_5_str_20_4);
    }
}

class PRED_$meta_call_5_str_20_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$meta_call_5_36);
    }
}

class PRED_$meta_call_5_str_21 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_21_1);
    }
}

class PRED_$meta_call_5_str_21_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_21_2);
    }
}

class PRED_$meta_call_5_str_21_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_34, _$meta_call_5_str_21_3);
    }
}

class PRED_$meta_call_5_str_21_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_35, _$meta_call_5_str_21_4);
    }
}

class PRED_$meta_call_5_str_21_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$meta_call_5_36);
    }
}

class PRED_$meta_call_5_lis extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_lis_1);
    }
}

class PRED_$meta_call_5_lis_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_2, _$meta_call_5_lis_2);
    }
}

class PRED_$meta_call_5_lis_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_12, _$meta_call_5_lis_3);
    }
}

class PRED_$meta_call_5_lis_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$meta_call_5_35, _$meta_call_5_lis_4);
    }
}

class PRED_$meta_call_5_lis_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$meta_call_5_36);
    }
}

class PRED_$meta_call_5_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
    // '$meta_call'(A,B,C,D,E):-var(A),!,illarg(var,call(A),1)
        Term a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$meta_call'(A,B,C,D,E):-['$get_level'(F),var(A),'$cut'(F),illarg(var,call(A),1)]
        a6 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(6))
        if (! a6.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of var(a(1))
        a1 = a1.dereference();
        if (! a1.isVariable()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(6))
        a6 = a6.dereference();
        if (! a6.isInteger()) {
            throw new IllegalTypeException("integer", a6);
        } else {
            engine.cut(((IntegerTerm) a6).intValue());
        }
        //END inline expansion
        Term[] y1 = {a1};
        a7 = new StructureTerm(s2, y1);
        return new PRED_illarg_3(s1, a7, si3, cont);
    }
}

class PRED_$meta_call_5_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
    // '$meta_call'(A,B,C,D,E):-closure(A),!,'$call_closure'(A)
        Term a1, a2, a3, a4, a5, a6;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$meta_call'(A,B,C,D,E):-['$get_level'(F),closure(A),'$cut'(F),'$call_closure'(A)]
        a6 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(6))
        if (! a6.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of closure(a(1))
        a1 = a1.dereference();
        if (! a1.isClosure()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(6))
        a6 = a6.dereference();
        if (! a6.isInteger()) {
            throw new IllegalTypeException("integer", a6);
        } else {
            engine.cut(((IntegerTerm) a6).intValue());
        }
        //END inline expansion
        return new PRED_$call_closure_1(a1, cont);
    }
}

class PRED_$meta_call_5_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
    // '$meta_call'(true,A,B,C,D):-!
        Term a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$meta_call'(true,A,B,C,D):-['$neck_cut']
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s4))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s4, engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_$meta_call_5_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
    // '$meta_call'(trace,A,B,C,D):-!,trace
        Term a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$meta_call'(trace,A,B,C,D):-['$neck_cut',trace]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s5))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s5, engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return new PRED_trace_0(cont);
    }
}

class PRED_$meta_call_5_5 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
    // '$meta_call'(debug,A,B,C,D):-!,debug
        Term a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$meta_call'(debug,A,B,C,D):-['$neck_cut',debug]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s6))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s6, engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return new PRED_debug_0(cont);
    }
}

class PRED_$meta_call_5_6 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
    // '$meta_call'(notrace,A,B,C,D):-!,notrace
        Term a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$meta_call'(notrace,A,B,C,D):-['$neck_cut',notrace]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s7))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s7, engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return new PRED_notrace_0(cont);
    }
}

class PRED_$meta_call_5_7 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
    // '$meta_call'(nodebug,A,B,C,D):-!,nodebug
        Term a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$meta_call'(nodebug,A,B,C,D):-['$neck_cut',nodebug]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s8))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s8, engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return new PRED_nodebug_0(cont);
    }
}

class PRED_$meta_call_5_8 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
    // '$meta_call'(spy(A),B,C,D,E):-!,spy(A)
        Term a1, a2, a3, a4, a5, a6;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$meta_call'(spy(A),B,C,D,E):-['$neck_cut',spy(A)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s9.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a6 = args[0];
        } else if (a1.isVariable()){
            a6 = new VariableTerm(engine);
            Term[] args = {a6};
            ((VariableTerm) a1).bind(new StructureTerm(s9, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return new PRED_spy_1(a6, cont);
    }
}

class PRED_$meta_call_5_9 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
    // '$meta_call'(nospy(A),B,C,D,E):-!,nospy(A)
        Term a1, a2, a3, a4, a5, a6;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$meta_call'(nospy(A),B,C,D,E):-['$neck_cut',nospy(A)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s10.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a6 = args[0];
        } else if (a1.isVariable()){
            a6 = new VariableTerm(engine);
            Term[] args = {a6};
            ((VariableTerm) a1).bind(new StructureTerm(s10, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return new PRED_nospy_1(a6, cont);
    }
}

class PRED_$meta_call_5_10 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
    // '$meta_call'(nospyall,A,B,C,D):-!,nospyall
        Term a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$meta_call'(nospyall,A,B,C,D):-['$neck_cut',nospyall]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s11))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s11, engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return new PRED_nospyall_0(cont);
    }
}

class PRED_$meta_call_5_11 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
    // '$meta_call'(leash(A),B,C,D,E):-!,leash(A)
        Term a1, a2, a3, a4, a5, a6;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$meta_call'(leash(A),B,C,D,E):-['$neck_cut',leash(A)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s12.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a6 = args[0];
        } else if (a1.isVariable()){
            a6 = new VariableTerm(engine);
            Term[] args = {a6};
            ((VariableTerm) a1).bind(new StructureTerm(s12, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return new PRED_leash_1(a6, cont);
    }
}

class PRED_$meta_call_5_12 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
    // '$meta_call'([A|B],C,D,E,F):-!,consult([A|B])
        Term a1, a2, a3, a4, a5, a6, a7, a8;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$meta_call'([A|B],C,D,E,F):-['$neck_cut',consult([A|B])]
        a1 = a1.dereference();
        if (a1.isList()){
            Term[] args = {((ListTerm)a1).car(), ((ListTerm)a1).cdr()};
            a6 = args[0];
            a7 = args[1];
        } else if (a1.isVariable()){
            a6 = new VariableTerm(engine);
            a7 = new VariableTerm(engine);
            ((VariableTerm) a1).bind(new ListTerm(a6, a7), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        a8 = new ListTerm(a6, a7);
        return new PRED_consult_1(a8, cont);
    }
}

class PRED_$meta_call_5_13 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
    // '$meta_call'(A^B,C,D,E,F):-!,'$meta_call'(B,C,D,E,F)
        Term a1, a2, a3, a4, a5, a6;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$meta_call'(A^B,C,D,E,F):-['$neck_cut','$meta_call'(B,C,D,E,F)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s13.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a6 = args[1];
        } else if (a1.isVariable()){
            a6 = new VariableTerm(engine);
            Term[] args = {new VariableTerm(engine), a6};
            ((VariableTerm) a1).bind(new StructureTerm(s13, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        engine.aregs[1] = a6;
        engine.aregs[2] = a2;
        engine.aregs[3] = a3;
        engine.aregs[4] = a4;
        engine.aregs[5] = a5;
        engine.cont = cont;
        return _$meta_call_5_top;
    }
}

class PRED_$meta_call_5_14 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
    // '$meta_call'(A:B,C,D,E,F):-!,'$meta_call'(B,A,D,E,F)
        Term a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$meta_call'(A:B,C,D,E,F):-['$neck_cut','$meta_call'(B,A,D,E,F)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s14.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a6 = args[0];
            a7 = args[1];
        } else if (a1.isVariable()){
            a6 = new VariableTerm(engine);
            a7 = new VariableTerm(engine);
            Term[] args = {a6, a7};
            ((VariableTerm) a1).bind(new StructureTerm(s14, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        engine.aregs[1] = a7;
        engine.aregs[2] = a6;
        engine.aregs[3] = a3;
        engine.aregs[4] = a4;
        engine.aregs[5] = a5;
        engine.cont = cont;
        return _$meta_call_5_top;
    }
}

class PRED_$meta_call_5_15 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
    // '$meta_call'(!,A,no,B,C):-!,illarg(context(if,cut),!,0)
        Term a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$meta_call'(!,A,no,B,C):-['$neck_cut',illarg(context(if,cut),!,0)]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s15))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s15, engine.trail);
        } else {
            return engine.fail();
        }
        a3 = a3.dereference();
        if (a3.isSymbol()){
            if (! a3.equals(s16))
                return engine.fail();
        } else if (a3.isVariable()){
            ((VariableTerm) a3).bind(s16, engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return new PRED_illarg_3(s21, s15, si22, cont);
    }
}

class PRED_$meta_call_5_16 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
    // '$meta_call'(!,A,B,C,D):-!,'$cut'(B)
        Term a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$meta_call'(!,A,B,C,D):-['$neck_cut','$cut'(B)]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s15))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s15, engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        //START inline expansion of $cut(a(3))
        a3 = a3.dereference();
        if (! a3.isInteger()) {
            throw new IllegalTypeException("integer", a3);
        } else {
            engine.cut(((IntegerTerm) a3).intValue());
        }
        //END inline expansion
        return cont;
    }
}

class PRED_$meta_call_5_17 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
    // '$meta_call'((A,B),C,D,E,F):-!,'$meta_call'(A,C,D,E,F),'$meta_call'(B,C,D,E,F)
        Term a1, a2, a3, a4, a5, a6, a7;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$meta_call'((A,B),C,D,E,F):-['$neck_cut','$meta_call'(A,C,D,E,F),'$meta_call'(B,C,D,E,F)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s23.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a6 = args[0];
            a7 = args[1];
        } else if (a1.isVariable()){
            a6 = new VariableTerm(engine);
            a7 = new VariableTerm(engine);
            Term[] args = {a6, a7};
            ((VariableTerm) a1).bind(new StructureTerm(s23, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_$meta_call_5(a7, a2, a3, a4, a5, cont);
        engine.aregs[1] = a6;
        engine.aregs[2] = a2;
        engine.aregs[3] = a3;
        engine.aregs[4] = a4;
        engine.aregs[5] = a5;
        engine.cont = p1;
        return _$meta_call_5_top;
    }
}

class PRED_$meta_call_5_18 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
    // '$meta_call'((A->B;C),D,E,F,G):-!,'$dummy_0_builtins.pl'(B,G,E,F,C,A,D)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$meta_call'((A->B;C),D,E,F,G):-['$neck_cut','$dummy_0_builtins.pl'(B,G,E,F,C,A,D)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s24.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a6 = args[0];
            a7 = args[1];
        } else if (a1.isVariable()){
            a6 = new VariableTerm(engine);
            a7 = new VariableTerm(engine);
            Term[] args = {a6, a7};
            ((VariableTerm) a1).bind(new StructureTerm(s24, args), engine.trail);
        } else {
            return engine.fail();
        }
        a6 = a6.dereference();
        if (a6.isStructure()){
            if (! s25.equals(((StructureTerm)a6).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a6).args();
            a8 = args[0];
            a9 = args[1];
        } else if (a6.isVariable()){
            a8 = new VariableTerm(engine);
            a9 = new VariableTerm(engine);
            Term[] args = {a8, a9};
            ((VariableTerm) a6).bind(new StructureTerm(s25, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return new PRED_$dummy_0_builtins$002Epl_7(a9, a5, a3, a4, a7, a8, a2, cont);
    }
}

class PRED_$meta_call_5_19 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
    // '$meta_call'((A->B),C,D,E,F):-!,'$dummy_1_builtins.pl'(A,D,C,B,E,F)
        Term a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$meta_call'((A->B),C,D,E,F):-['$neck_cut','$dummy_1_builtins.pl'(A,D,C,B,E,F)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s25.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a6 = args[0];
            a7 = args[1];
        } else if (a1.isVariable()){
            a6 = new VariableTerm(engine);
            a7 = new VariableTerm(engine);
            Term[] args = {a6, a7};
            ((VariableTerm) a1).bind(new StructureTerm(s25, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return new PRED_$dummy_1_builtins$002Epl_6(a6, a3, a2, a7, a4, a5, cont);
    }
}

class PRED_$meta_call_5_20 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
    // '$meta_call'((A;B),C,D,E,F):-!,'$dummy_2_builtins.pl'(A,D,B,C,F,E)
        Term a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$meta_call'((A;B),C,D,E,F):-['$neck_cut','$dummy_2_builtins.pl'(A,D,B,C,F,E)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s24.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a6 = args[0];
            a7 = args[1];
        } else if (a1.isVariable()){
            a6 = new VariableTerm(engine);
            a7 = new VariableTerm(engine);
            Term[] args = {a6, a7};
            ((VariableTerm) a1).bind(new StructureTerm(s24, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return new PRED_$dummy_2_builtins$002Epl_6(a6, a3, a7, a2, a5, a4, cont);
    }
}

class PRED_$meta_call_5_21 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
    // '$meta_call'(\+A,B,C,D,E):-!,'$dummy_3_builtins.pl'(D,E,A,B)
        Term a1, a2, a3, a4, a5, a6;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$meta_call'(\+A,B,C,D,E):-['$neck_cut','$dummy_3_builtins.pl'(D,E,A,B)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s26.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a6 = args[0];
        } else if (a1.isVariable()){
            a6 = new VariableTerm(engine);
            Term[] args = {a6};
            ((VariableTerm) a1).bind(new StructureTerm(s26, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return new PRED_$dummy_3_builtins$002Epl_4(a4, a5, a6, a2, cont);
    }
}

class PRED_$meta_call_5_22 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
    // '$meta_call'(findall(A,B,C),D,E,F,G):-!,findall(A,'$meta_call'(B,D,E,F,G),C)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$meta_call'(findall(A,B,C),D,E,F,G):-['$neck_cut',findall(A,'jp.ac.kobe_u.cs.prolog.builtin':'$meta_call'(B,D,E,F,G),C)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s27.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a6 = args[0];
            a7 = args[1];
            a8 = args[2];
        } else if (a1.isVariable()){
            a6 = new VariableTerm(engine);
            a7 = new VariableTerm(engine);
            a8 = new VariableTerm(engine);
            Term[] args = {a6, a7, a8};
            ((VariableTerm) a1).bind(new StructureTerm(s27, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        Term[] y1 = {a7, a2, a3, a4, a5};
        a9 = new StructureTerm(s29, y1);
        Term[] y2 = {s28, a9};
        a10 = new StructureTerm(s14, y2);
        return new PRED_findall_3(a6, a10, a8, cont);
    }
}

class PRED_$meta_call_5_23 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
    // '$meta_call'(bagof(A,B,C),D,E,F,G):-!,bagof(A,'$meta_call'(B,D,E,F,G),C)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$meta_call'(bagof(A,B,C),D,E,F,G):-['$neck_cut',bagof(A,'jp.ac.kobe_u.cs.prolog.builtin':'$meta_call'(B,D,E,F,G),C)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s30.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a6 = args[0];
            a7 = args[1];
            a8 = args[2];
        } else if (a1.isVariable()){
            a6 = new VariableTerm(engine);
            a7 = new VariableTerm(engine);
            a8 = new VariableTerm(engine);
            Term[] args = {a6, a7, a8};
            ((VariableTerm) a1).bind(new StructureTerm(s30, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        Term[] y1 = {a7, a2, a3, a4, a5};
        a9 = new StructureTerm(s29, y1);
        Term[] y2 = {s28, a9};
        a10 = new StructureTerm(s14, y2);
        return new PRED_bagof_3(a6, a10, a8, cont);
    }
}

class PRED_$meta_call_5_24 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
    // '$meta_call'(setof(A,B,C),D,E,F,G):-!,setof(A,'$meta_call'(B,D,E,F,G),C)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$meta_call'(setof(A,B,C),D,E,F,G):-['$neck_cut',setof(A,'jp.ac.kobe_u.cs.prolog.builtin':'$meta_call'(B,D,E,F,G),C)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s31.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a6 = args[0];
            a7 = args[1];
            a8 = args[2];
        } else if (a1.isVariable()){
            a6 = new VariableTerm(engine);
            a7 = new VariableTerm(engine);
            a8 = new VariableTerm(engine);
            Term[] args = {a6, a7, a8};
            ((VariableTerm) a1).bind(new StructureTerm(s31, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        Term[] y1 = {a7, a2, a3, a4, a5};
        a9 = new StructureTerm(s29, y1);
        Term[] y2 = {s28, a9};
        a10 = new StructureTerm(s14, y2);
        return new PRED_setof_3(a6, a10, a8, cont);
    }
}

class PRED_$meta_call_5_25 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
    // '$meta_call'(once(A),B,C,D,E):-!,once('$meta_call'(A,B,C,D,E))
        Term a1, a2, a3, a4, a5, a6, a7, a8;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$meta_call'(once(A),B,C,D,E):-['$neck_cut',once('jp.ac.kobe_u.cs.prolog.builtin':'$meta_call'(A,B,C,D,E))]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s32.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a6 = args[0];
        } else if (a1.isVariable()){
            a6 = new VariableTerm(engine);
            Term[] args = {a6};
            ((VariableTerm) a1).bind(new StructureTerm(s32, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        Term[] y1 = {a6, a2, a3, a4, a5};
        a7 = new StructureTerm(s29, y1);
        Term[] y2 = {s28, a7};
        a8 = new StructureTerm(s14, y2);
        return new PRED_once_1(a8, cont);
    }
}

class PRED_$meta_call_5_26 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
    // '$meta_call'(on_exception(A,B,C),D,E,F,G):-!,on_exception(A,'$meta_call'(B,D,E,F,G),'$meta_call'(C,D,E,F,G))
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$meta_call'(on_exception(A,B,C),D,E,F,G):-['$neck_cut',on_exception(A,'jp.ac.kobe_u.cs.prolog.builtin':'$meta_call'(B,D,E,F,G),'jp.ac.kobe_u.cs.prolog.builtin':'$meta_call'(C,D,E,F,G))]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s33.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a6 = args[0];
            a7 = args[1];
            a8 = args[2];
        } else if (a1.isVariable()){
            a6 = new VariableTerm(engine);
            a7 = new VariableTerm(engine);
            a8 = new VariableTerm(engine);
            Term[] args = {a6, a7, a8};
            ((VariableTerm) a1).bind(new StructureTerm(s33, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        Term[] y1 = {a7, a2, a3, a4, a5};
        a9 = new StructureTerm(s29, y1);
        Term[] y2 = {s28, a9};
        a10 = new StructureTerm(s14, y2);
        Term[] y3 = {a8, a2, a3, a4, a5};
        a11 = new StructureTerm(s29, y3);
        Term[] y4 = {s28, a11};
        a12 = new StructureTerm(s14, y4);
        return new PRED_on_exception_3(a6, a10, a12, cont);
    }
}

class PRED_$meta_call_5_27 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
    // '$meta_call'(catch(A,B,C),D,E,F,G):-!,catch('$meta_call'(A,D,E,F,G),B,'$meta_call'(C,D,E,F,G))
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$meta_call'(catch(A,B,C),D,E,F,G):-['$neck_cut',catch('jp.ac.kobe_u.cs.prolog.builtin':'$meta_call'(A,D,E,F,G),B,'jp.ac.kobe_u.cs.prolog.builtin':'$meta_call'(C,D,E,F,G))]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s34.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a6 = args[0];
            a7 = args[1];
            a8 = args[2];
        } else if (a1.isVariable()){
            a6 = new VariableTerm(engine);
            a7 = new VariableTerm(engine);
            a8 = new VariableTerm(engine);
            Term[] args = {a6, a7, a8};
            ((VariableTerm) a1).bind(new StructureTerm(s34, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        Term[] y1 = {a6, a2, a3, a4, a5};
        a9 = new StructureTerm(s29, y1);
        Term[] y2 = {s28, a9};
        a10 = new StructureTerm(s14, y2);
        Term[] y3 = {a8, a2, a3, a4, a5};
        a11 = new StructureTerm(s29, y3);
        Term[] y4 = {s28, a11};
        a12 = new StructureTerm(s14, y4);
        return new PRED_catch_3(a10, a7, a12, cont);
    }
}

class PRED_$meta_call_5_28 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
    // '$meta_call'(clause(A,B),C,D,E,F):-!,clause(C:A,B)
        Term a1, a2, a3, a4, a5, a6, a7, a8;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$meta_call'(clause(A,B),C,D,E,F):-['$neck_cut',clause(C:A,B)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s35.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a6 = args[0];
            a7 = args[1];
        } else if (a1.isVariable()){
            a6 = new VariableTerm(engine);
            a7 = new VariableTerm(engine);
            Term[] args = {a6, a7};
            ((VariableTerm) a1).bind(new StructureTerm(s35, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        Term[] y1 = {a2, a6};
        a8 = new StructureTerm(s14, y1);
        return new PRED_clause_2(a8, a7, cont);
    }
}

class PRED_$meta_call_5_29 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
    // '$meta_call'(assert(A),B,C,D,E):-!,assertz(B:A)
        Term a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$meta_call'(assert(A),B,C,D,E):-['$neck_cut',assertz(B:A)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s36.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a6 = args[0];
        } else if (a1.isVariable()){
            a6 = new VariableTerm(engine);
            Term[] args = {a6};
            ((VariableTerm) a1).bind(new StructureTerm(s36, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        Term[] y1 = {a2, a6};
        a7 = new StructureTerm(s14, y1);
        return new PRED_assertz_1(a7, cont);
    }
}

class PRED_$meta_call_5_30 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
    // '$meta_call'(assertz(A),B,C,D,E):-!,assertz(B:A)
        Term a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$meta_call'(assertz(A),B,C,D,E):-['$neck_cut',assertz(B:A)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s37.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a6 = args[0];
        } else if (a1.isVariable()){
            a6 = new VariableTerm(engine);
            Term[] args = {a6};
            ((VariableTerm) a1).bind(new StructureTerm(s37, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        Term[] y1 = {a2, a6};
        a7 = new StructureTerm(s14, y1);
        return new PRED_assertz_1(a7, cont);
    }
}

class PRED_$meta_call_5_31 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
    // '$meta_call'(asserta(A),B,C,D,E):-!,asserta(B:A)
        Term a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$meta_call'(asserta(A),B,C,D,E):-['$neck_cut',asserta(B:A)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s38.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a6 = args[0];
        } else if (a1.isVariable()){
            a6 = new VariableTerm(engine);
            Term[] args = {a6};
            ((VariableTerm) a1).bind(new StructureTerm(s38, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        Term[] y1 = {a2, a6};
        a7 = new StructureTerm(s14, y1);
        return new PRED_asserta_1(a7, cont);
    }
}

class PRED_$meta_call_5_32 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
    // '$meta_call'(retract(A),B,C,D,E):-!,retract(B:A)
        Term a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$meta_call'(retract(A),B,C,D,E):-['$neck_cut',retract(B:A)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s39.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a6 = args[0];
        } else if (a1.isVariable()){
            a6 = new VariableTerm(engine);
            Term[] args = {a6};
            ((VariableTerm) a1).bind(new StructureTerm(s39, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        Term[] y1 = {a2, a6};
        a7 = new StructureTerm(s14, y1);
        return new PRED_retract_1(a7, cont);
    }
}

class PRED_$meta_call_5_33 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
    // '$meta_call'(abolish(A),B,C,D,E):-!,abolish(B:A)
        Term a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$meta_call'(abolish(A),B,C,D,E):-['$neck_cut',abolish(B:A)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s40.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a6 = args[0];
        } else if (a1.isVariable()){
            a6 = new VariableTerm(engine);
            Term[] args = {a6};
            ((VariableTerm) a1).bind(new StructureTerm(s40, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        Term[] y1 = {a2, a6};
        a7 = new StructureTerm(s14, y1);
        return new PRED_abolish_1(a7, cont);
    }
}

class PRED_$meta_call_5_34 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
    // '$meta_call'(retractall(A),B,C,D,E):-!,retractall(B:A)
        Term a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$meta_call'(retractall(A),B,C,D,E):-['$neck_cut',retractall(B:A)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s41.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a6 = args[0];
        } else if (a1.isVariable()){
            a6 = new VariableTerm(engine);
            Term[] args = {a6};
            ((VariableTerm) a1).bind(new StructureTerm(s41, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        Term[] y1 = {a2, a6};
        a7 = new StructureTerm(s14, y1);
        return new PRED_retractall_1(a7, cont);
    }
}

class PRED_$meta_call_5_35 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
    // '$meta_call'(A,B,C,D,E):-atom(B),callable(A),!,'$meta_call'(E,D,B,A)
        Term a1, a2, a3, a4, a5, a6;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$meta_call'(A,B,C,D,E):-['$get_level'(F),atom(B),callable(A),'$cut'(F),'$meta_call'(E,D,B,A)]
        a6 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(6))
        if (! a6.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of atom(a(2))
        a2 = a2.dereference();
        if (! a2.isSymbol()) {
            return engine.fail();
        }
        //END inline expansion
        p1 = new PRED_$meta_call_4(a5, a4, a2, a1, cont);
        p2 = new PRED_$cut_1(a6, p1);
        return new PRED_callable_1(a1, p2);
    }
}

class PRED_$meta_call_5_36 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) {
    // '$meta_call'(A,B,C,D,E):-illarg(type(callable),call(B:A),1)
        Term a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$meta_call'(A,B,C,D,E):-[illarg(type(callable),call(B:A),1)]
        Term[] y1 = {a2, a1};
        a6 = new StructureTerm(s14, y1);
        Term[] y2 = {a6};
        a7 = new StructureTerm(s2, y2);
        return new PRED_illarg_3(s45, a7, si3, cont);
    }
}
