package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.ListTerm;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.StructureTerm;
import jp.ac.kobe_u.cs.prolog.lang.SymbolTerm;
import jp.ac.kobe_u.cs.prolog.lang.Term;
import jp.ac.kobe_u.cs.prolog.lang.VariableTerm;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$prolog_impl_flag'/3</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$prolog_impl_flag_3 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("max_integer");
    static SymbolTerm s2 = SymbolTerm.makeSymbol("changeable", 1);
    static SymbolTerm s3 = SymbolTerm.makeSymbol("no");
    static Term[] s4 = {s3};
    static StructureTerm s5 = new StructureTerm(s2, s4);
    static SymbolTerm s6 = SymbolTerm.makeSymbol("min_integer");
    static SymbolTerm s7 = SymbolTerm.makeSymbol("debug");
    static SymbolTerm s8 = SymbolTerm.makeSymbol("on");
    static SymbolTerm s9 = SymbolTerm.makeSymbol("off");
    static SymbolTerm s10 = SymbolTerm.makeSymbol("[]");
    static ListTerm s11 = new ListTerm(s9, s10);
    static ListTerm s12 = new ListTerm(s8, s11);
    static SymbolTerm s13 = SymbolTerm.makeSymbol("yes");
    static Term[] s14 = {s13};
    static StructureTerm s15 = new StructureTerm(s2, s14);
    static SymbolTerm s16 = SymbolTerm.makeSymbol("max_arity");
    static SymbolTerm s17 = SymbolTerm.makeSymbol("unknown");
    static SymbolTerm s18 = SymbolTerm.makeSymbol("error");
    static SymbolTerm s19 = SymbolTerm.makeSymbol("fail");
    static SymbolTerm s20 = SymbolTerm.makeSymbol("warning");
    static ListTerm s21 = new ListTerm(s20, s10);
    static ListTerm s22 = new ListTerm(s19, s21);
    static ListTerm s23 = new ListTerm(s18, s22);
    static SymbolTerm s24 = SymbolTerm.makeSymbol("double_quotes");
    static SymbolTerm s25 = SymbolTerm.makeSymbol("chars");
    static SymbolTerm s26 = SymbolTerm.makeSymbol("codes");
    static SymbolTerm s27 = SymbolTerm.makeSymbol("atom");
    static ListTerm s28 = new ListTerm(s27, s10);
    static ListTerm s29 = new ListTerm(s26, s28);
    static ListTerm s30 = new ListTerm(s25, s29);
    static SymbolTerm s31 = SymbolTerm.makeSymbol("print_stack_trace");
    static Predicate _fail_0 = new PRED_fail_0();
    static Predicate _$prolog_impl_flag_3_var = new PRED_$prolog_impl_flag_3_var();
    static Predicate _$prolog_impl_flag_3_var_1 = new PRED_$prolog_impl_flag_3_var_1();
    static Predicate _$prolog_impl_flag_3_var_2 = new PRED_$prolog_impl_flag_3_var_2();
    static Predicate _$prolog_impl_flag_3_var_3 = new PRED_$prolog_impl_flag_3_var_3();
    static Predicate _$prolog_impl_flag_3_var_4 = new PRED_$prolog_impl_flag_3_var_4();
    static Predicate _$prolog_impl_flag_3_var_5 = new PRED_$prolog_impl_flag_3_var_5();
    static Predicate _$prolog_impl_flag_3_var_6 = new PRED_$prolog_impl_flag_3_var_6();
    static Predicate _$prolog_impl_flag_3_con = new PRED_$prolog_impl_flag_3_con();
    static Predicate _$prolog_impl_flag_3_1 = new PRED_$prolog_impl_flag_3_1();
    static Predicate _$prolog_impl_flag_3_2 = new PRED_$prolog_impl_flag_3_2();
    static Predicate _$prolog_impl_flag_3_3 = new PRED_$prolog_impl_flag_3_3();
    static Predicate _$prolog_impl_flag_3_4 = new PRED_$prolog_impl_flag_3_4();
    static Predicate _$prolog_impl_flag_3_5 = new PRED_$prolog_impl_flag_3_5();
    static Predicate _$prolog_impl_flag_3_6 = new PRED_$prolog_impl_flag_3_6();
    static Predicate _$prolog_impl_flag_3_7 = new PRED_$prolog_impl_flag_3_7();
    static java.util.Hashtable<Term, Predicate> con = new java.util.Hashtable<Term, Predicate>(7);
    static {
        con.put(s1, _$prolog_impl_flag_3_1);
        con.put(s6, _$prolog_impl_flag_3_2);
        con.put(s7, _$prolog_impl_flag_3_3);
        con.put(s16, _$prolog_impl_flag_3_4);
        con.put(s17, _$prolog_impl_flag_3_5);
        con.put(s24, _$prolog_impl_flag_3_6);
        con.put(s31, _$prolog_impl_flag_3_7);
    }

    public Term arg1, arg2, arg3;

    public PRED_$prolog_impl_flag_3(Term a1, Term a2, Term a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_$prolog_impl_flag_3(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String toString() {
        return "$prolog_impl_flag(" + arg1 + "," + arg2 + "," + arg3 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$prolog_impl_flag_3_var, _fail_0, _fail_0, _$prolog_impl_flag_3_con, _fail_0, _fail_0);
    }
}

class PRED_$prolog_impl_flag_3_var extends PRED_$prolog_impl_flag_3 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$prolog_impl_flag_3_1, _$prolog_impl_flag_3_var_1);
    }
}

class PRED_$prolog_impl_flag_3_var_1 extends PRED_$prolog_impl_flag_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$prolog_impl_flag_3_2, _$prolog_impl_flag_3_var_2);
    }
}

class PRED_$prolog_impl_flag_3_var_2 extends PRED_$prolog_impl_flag_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$prolog_impl_flag_3_3, _$prolog_impl_flag_3_var_3);
    }
}

class PRED_$prolog_impl_flag_3_var_3 extends PRED_$prolog_impl_flag_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$prolog_impl_flag_3_4, _$prolog_impl_flag_3_var_4);
    }
}

class PRED_$prolog_impl_flag_3_var_4 extends PRED_$prolog_impl_flag_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$prolog_impl_flag_3_5, _$prolog_impl_flag_3_var_5);
    }
}

class PRED_$prolog_impl_flag_3_var_5 extends PRED_$prolog_impl_flag_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$prolog_impl_flag_3_6, _$prolog_impl_flag_3_var_6);
    }
}

class PRED_$prolog_impl_flag_3_var_6 extends PRED_$prolog_impl_flag_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$prolog_impl_flag_3_7);
    }
}

class PRED_$prolog_impl_flag_3_con extends PRED_$prolog_impl_flag_3 {
    public Predicate exec(Prolog engine) {
        return engine.switch_on_hash(con, _fail_0);
    }
}

class PRED_$prolog_impl_flag_3_1 extends PRED_$prolog_impl_flag_3 {
    public Predicate exec(Prolog engine) {
    // '$prolog_impl_flag'(max_integer,A,changeable(no)):-true
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$prolog_impl_flag'(max_integer,A,changeable(no)):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s1))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        if (! s5.unify(a3, engine.trail))
            return engine.fail();
        return cont;
    }
}

class PRED_$prolog_impl_flag_3_2 extends PRED_$prolog_impl_flag_3 {
    public Predicate exec(Prolog engine) {
    // '$prolog_impl_flag'(min_integer,A,changeable(no)):-true
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$prolog_impl_flag'(min_integer,A,changeable(no)):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s6))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s6, engine.trail);
        } else {
            return engine.fail();
        }
        if (! s5.unify(a3, engine.trail))
            return engine.fail();
        return cont;
    }
}

class PRED_$prolog_impl_flag_3_3 extends PRED_$prolog_impl_flag_3 {
    public Predicate exec(Prolog engine) {
    // '$prolog_impl_flag'(debug,[on,off],changeable(yes)):-true
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$prolog_impl_flag'(debug,[on,off],changeable(yes)):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s7))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s7, engine.trail);
        } else {
            return engine.fail();
        }
        if (! s12.unify(a2, engine.trail))
            return engine.fail();
        if (! s15.unify(a3, engine.trail))
            return engine.fail();
        return cont;
    }
}

class PRED_$prolog_impl_flag_3_4 extends PRED_$prolog_impl_flag_3 {
    public Predicate exec(Prolog engine) {
    // '$prolog_impl_flag'(max_arity,A,changeable(no)):-true
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$prolog_impl_flag'(max_arity,A,changeable(no)):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s16))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s16, engine.trail);
        } else {
            return engine.fail();
        }
        if (! s5.unify(a3, engine.trail))
            return engine.fail();
        return cont;
    }
}

class PRED_$prolog_impl_flag_3_5 extends PRED_$prolog_impl_flag_3 {
    public Predicate exec(Prolog engine) {
    // '$prolog_impl_flag'(unknown,[error,fail,warning],changeable(yes)):-true
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$prolog_impl_flag'(unknown,[error,fail,warning],changeable(yes)):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s17))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s17, engine.trail);
        } else {
            return engine.fail();
        }
        if (! s23.unify(a2, engine.trail))
            return engine.fail();
        if (! s15.unify(a3, engine.trail))
            return engine.fail();
        return cont;
    }
}

class PRED_$prolog_impl_flag_3_6 extends PRED_$prolog_impl_flag_3 {
    public Predicate exec(Prolog engine) {
    // '$prolog_impl_flag'(double_quotes,[chars,codes,atom],changeable(no)):-true
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$prolog_impl_flag'(double_quotes,[chars,codes,atom],changeable(no)):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s24))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s24, engine.trail);
        } else {
            return engine.fail();
        }
        if (! s30.unify(a2, engine.trail))
            return engine.fail();
        if (! s5.unify(a3, engine.trail))
            return engine.fail();
        return cont;
    }
}

class PRED_$prolog_impl_flag_3_7 extends PRED_$prolog_impl_flag_3 {
    public Predicate exec(Prolog engine) {
    // '$prolog_impl_flag'(print_stack_trace,[on,off],changeable(yes)):-true
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$prolog_impl_flag'(print_stack_trace,[on,off],changeable(yes)):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s31))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s31, engine.trail);
        } else {
            return engine.fail();
        }
        if (! s12.unify(a2, engine.trail))
            return engine.fail();
        if (! s15.unify(a3, engine.trail))
            return engine.fail();
        return cont;
    }
}
