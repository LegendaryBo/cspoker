package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$dummy_27_builtins.pl'/6</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$dummy_27_builtins$002Epl_6 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol(":", 2);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("jp.ac.kobe_u.cs.prolog.builtin");
    static SymbolTerm s3 = SymbolTerm.makeSymbol("$current_leash", 1);
    static SymbolTerm s4 = SymbolTerm.makeSymbol("print_procedure_box", 5);
    static Predicate _$dummy_27_builtins$002Epl_6_sub_1 = new PRED_$dummy_27_builtins$002Epl_6_sub_1();
    static Predicate _$dummy_27_builtins$002Epl_6_1 = new PRED_$dummy_27_builtins$002Epl_6_1();
    static Predicate _$dummy_27_builtins$002Epl_6_2 = new PRED_$dummy_27_builtins$002Epl_6_2();

    public Term arg1, arg2, arg3, arg4, arg5, arg6;

    public PRED_$dummy_27_builtins$002Epl_6(Term a1, Term a2, Term a3, Term a4, Term a5, Term a6, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        arg5 = a5;
        arg6 = a6;
        this.cont = cont;
    }

    public PRED_$dummy_27_builtins$002Epl_6(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        arg5 = args[4];
        arg6 = args[5];
        this.cont = cont;
    }

    public int arity() { return 6; }

    public String toString() {
        return "$dummy_27_builtins.pl(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + "," + arg5 + "," + arg6 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.aregs[4] = arg4;
        engine.aregs[5] = arg5;
        engine.aregs[6] = arg6;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$dummy_27_builtins$002Epl_6_1, _$dummy_27_builtins$002Epl_6_sub_1);
    }
}

class PRED_$dummy_27_builtins$002Epl_6_sub_1 extends PRED_$dummy_27_builtins$002Epl_6 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$dummy_27_builtins$002Epl_6_2);
    }
}

class PRED_$dummy_27_builtins$002Epl_6_1 extends PRED_$dummy_27_builtins$002Epl_6 {
    public Predicate exec(Prolog engine) {
    // '$dummy_27_builtins.pl'(A,B,C,D,E,F):-clause('$current_leash'(E),D),!,'$read_blocked'(print_procedure_box(E,A,C,F,B))
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        cont = engine.cont;
    // '$dummy_27_builtins.pl'(A,B,C,D,E,F):-['$get_level'(G),clause('jp.ac.kobe_u.cs.prolog.builtin':'$current_leash'(E),D),'$cut'(G),'$read_blocked'(print_procedure_box(E,A,C,F,B))]
        a7 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(7))
        if (! a7.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        Term[] y1 = {a5};
        a8 = new StructureTerm(s3, y1);
        Term[] y2 = {s2, a8};
        a9 = new StructureTerm(s1, y2);
        Term[] y3 = {a5, a1, a3, a6, a2};
        a10 = new StructureTerm(s4, y3);
        p1 = new PRED_$read_blocked_1(a10, cont);
        p2 = new PRED_$cut_1(a7, p1);
        return new PRED_clause_2(a9, a4, p2);
    }
}

class PRED_$dummy_27_builtins$002Epl_6_2 extends PRED_$dummy_27_builtins$002Epl_6 {
    public Predicate exec(Prolog engine) {
    // '$dummy_27_builtins.pl'(A,B,C,D,E,F):-nl
        Term a1, a2, a3, a4, a5, a6;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        cont = engine.cont;
    // '$dummy_27_builtins.pl'(A,B,C,D,E,F):-[nl]
        return new PRED_nl_0(cont);
    }
}
