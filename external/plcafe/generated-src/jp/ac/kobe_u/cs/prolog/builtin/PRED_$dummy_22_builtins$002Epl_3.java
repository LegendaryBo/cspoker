package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.IntegerTerm;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.StructureTerm;
import jp.ac.kobe_u.cs.prolog.lang.SymbolTerm;
import jp.ac.kobe_u.cs.prolog.lang.Term;
import jp.ac.kobe_u.cs.prolog.lang.VariableTerm;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$dummy_22_builtins.pl'/3</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$dummy_22_builtins$002Epl_3 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("type", 1);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("list", 1);
    static SymbolTerm s3 = SymbolTerm.makeSymbol("char");
    static Term[] s4 = {s3};
    static StructureTerm s5 = new StructureTerm(s2, s4);
    static Term[] s6 = {s5};
    static StructureTerm s7 = new StructureTerm(s1, s6);
    static SymbolTerm s8 = SymbolTerm.makeSymbol("name", 2);
    static IntegerTerm si9 = new IntegerTerm(2);
    static Predicate _$dummy_22_builtins$002Epl_3_sub_1 = new PRED_$dummy_22_builtins$002Epl_3_sub_1();
    static Predicate _$dummy_22_builtins$002Epl_3_1 = new PRED_$dummy_22_builtins$002Epl_3_1();
    static Predicate _$dummy_22_builtins$002Epl_3_2 = new PRED_$dummy_22_builtins$002Epl_3_2();

    public Term arg1, arg2, arg3;

    public PRED_$dummy_22_builtins$002Epl_3(Term a1, Term a2, Term a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_$dummy_22_builtins$002Epl_3(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String toString() {
        return "$dummy_22_builtins.pl(" + arg1 + "," + arg2 + "," + arg3 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$dummy_22_builtins$002Epl_3_1, _$dummy_22_builtins$002Epl_3_sub_1);
    }
}

class PRED_$dummy_22_builtins$002Epl_3_sub_1 extends PRED_$dummy_22_builtins$002Epl_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$dummy_22_builtins$002Epl_3_2);
    }
}

class PRED_$dummy_22_builtins$002Epl_3_1 extends PRED_$dummy_22_builtins$002Epl_3 {
    public Predicate exec(Prolog engine) {
    // '$dummy_22_builtins.pl'(A,B,C):-atom_codes(A,B),!,C=A
        Term a1, a2, a3, a4;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$dummy_22_builtins.pl'(A,B,C):-['$get_level'(D),atom_codes(A,B),'$cut'(D),'$unify'(C,A)]
        a4 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(4))
        if (! a4.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        p1 = new PRED_$unify_2(a3, a1, cont);
        p2 = new PRED_$cut_1(a4, p1);
        return new PRED_atom_codes_2(a1, a2, p2);
    }
}

class PRED_$dummy_22_builtins$002Epl_3_2 extends PRED_$dummy_22_builtins$002Epl_3 {
    public Predicate exec(Prolog engine) {
    // '$dummy_22_builtins.pl'(A,B,C):-illarg(type(list(char)),name(C,B),2)
        Term a1, a2, a3, a4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$dummy_22_builtins.pl'(A,B,C):-[illarg(type(list(char)),name(C,B),2)]
        Term[] y1 = {a3, a2};
        a4 = new StructureTerm(s8, y1);
        return new PRED_illarg_3(s7, a4, si9, cont);
    }
}
