package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$listing_dynamic_clause'/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$listing_dynamic_clause_2 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("/", 2);
    static Predicate _$listing_dynamic_clause_2_sub_1 = new PRED_$listing_dynamic_clause_2_sub_1();
    static Predicate _$listing_dynamic_clause_2_1 = new PRED_$listing_dynamic_clause_2_1();
    static Predicate _$listing_dynamic_clause_2_2 = new PRED_$listing_dynamic_clause_2_2();

    public Term arg1, arg2;

    public PRED_$listing_dynamic_clause_2(Term a1, Term a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_$listing_dynamic_clause_2(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String toString() {
        return "$listing_dynamic_clause(" + arg1 + "," + arg2 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$listing_dynamic_clause_2_1, _$listing_dynamic_clause_2_sub_1);
    }
}

class PRED_$listing_dynamic_clause_2_sub_1 extends PRED_$listing_dynamic_clause_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$listing_dynamic_clause_2_2);
    }
}

class PRED_$listing_dynamic_clause_2_1 extends PRED_$listing_dynamic_clause_2 {
    public Predicate exec(Prolog engine) {
    // '$listing_dynamic_clause'(A,B):-'$new_internal_database'(A),hash_keys(A,C),'$builtin_member'(B,C),B=D/E,functor(F,D,E),'$clause_internal'(A,B,F,G,H),'$write_dynamic_clause'(A,G),fail
        Term a1, a2, a3, a4, a5, a6, a7, a8;
        Predicate p1, p2, p3, p4, p5, p6, p7;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$listing_dynamic_clause'(A,B):-['$new_internal_database'(A),hash_keys(A,C),'$builtin_member'(B,C),'$unify'(B,D/E),functor(F,D,E),'$clause_internal'(A,B,F,G,H),'$write_dynamic_clause'(A,G),fail]
        a3 = new VariableTerm(engine);
        a4 = new VariableTerm(engine);
        a5 = new VariableTerm(engine);
        Term[] y1 = {a4, a5};
        a6 = new StructureTerm(s1, y1);
        a7 = new VariableTerm(engine);
        a8 = new VariableTerm(engine);
        p1 = new PRED_fail_0(cont);
        p2 = new PRED_$write_dynamic_clause_2(a1, a8, p1);
        p3 = new PRED_$clause_internal_5(a1, a2, a7, a8, new VariableTerm(engine), p2);
        p4 = new PRED_functor_3(a7, a4, a5, p3);
        p5 = new PRED_$unify_2(a2, a6, p4);
        p6 = new PRED_$builtin_member_2(a2, a3, p5);
        p7 = new PRED_hash_keys_2(a1, a3, p6);
        return new PRED_$new_internal_database_1(a1, p7);
    }
}

class PRED_$listing_dynamic_clause_2_2 extends PRED_$listing_dynamic_clause_2 {
    public Predicate exec(Prolog engine) {
    // '$listing_dynamic_clause'(A,B):-true
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$listing_dynamic_clause'(A,B):-[]
        return cont;
    }
}
