package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$write_goal'/1</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$write_goal_1 extends Predicate {
    static Predicate _$write_goal_1_sub_1 = new PRED_$write_goal_1_sub_1();
    static Predicate _$write_goal_1_1 = new PRED_$write_goal_1_1();
    static Predicate _$write_goal_1_2 = new PRED_$write_goal_1_2();

    public Term arg1;

    public PRED_$write_goal_1(Term a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_$write_goal_1(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String toString() {
        return "$write_goal(" + arg1 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$write_goal_1_1, _$write_goal_1_sub_1);
    }
}

class PRED_$write_goal_1_sub_1 extends PRED_$write_goal_1 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$write_goal_1_2);
    }
}

class PRED_$write_goal_1_1 extends PRED_$write_goal_1 {
    public Predicate exec(Prolog engine) {
    // '$write_goal'(A):-java(A),!,current_output(B),'$write_toString'(B,A)
        Term a1, a2, a3;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$write_goal'(A):-['$get_level'(B),java(A),'$cut'(B),current_output(C),'$write_toString'(C,A)]
        a2 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(2))
        if (! a2.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of java(a(1))
        a1 = a1.dereference();
        if (! a1.isJavaObject()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(2))
        a2 = a2.dereference();
        if (! a2.isInteger()) {
            throw new IllegalTypeException("integer", a2);
        } else {
            engine.cut(((IntegerTerm) a2).intValue());
        }
        //END inline expansion
        a3 = new VariableTerm(engine);
        p1 = new PRED_$write_toString_2(a3, a1, cont);
        return new PRED_current_output_1(a3, p1);
    }
}

class PRED_$write_goal_1_2 extends PRED_$write_goal_1 {
    public Predicate exec(Prolog engine) {
    // '$write_goal'(A):-write(A)
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$write_goal'(A):-[write(A)]
        return new PRED_write_1(a1, cont);
    }
}
