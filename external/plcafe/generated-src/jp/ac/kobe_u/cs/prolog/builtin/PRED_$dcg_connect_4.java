package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.StructureTerm;
import jp.ac.kobe_u.cs.prolog.lang.SymbolTerm;
import jp.ac.kobe_u.cs.prolog.lang.Term;
import jp.ac.kobe_u.cs.prolog.lang.VariableTerm;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$dcg_connect'/4</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$dcg_connect_4 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("->", 2);
    static SymbolTerm s2 = SymbolTerm.makeSymbol(",", 2);
    static Predicate _$dcg_connect_4_var = new PRED_$dcg_connect_4_var();
    static Predicate _$dcg_connect_4_var_1 = new PRED_$dcg_connect_4_var_1();
    static Predicate _$dcg_connect_4_var_2 = new PRED_$dcg_connect_4_var_2();
    static Predicate _$dcg_connect_4_int = new PRED_$dcg_connect_4_int();
    static Predicate _$dcg_connect_4_int_1 = new PRED_$dcg_connect_4_int_1();
    static Predicate _$dcg_connect_4_1 = new PRED_$dcg_connect_4_1();
    static Predicate _$dcg_connect_4_2 = new PRED_$dcg_connect_4_2();
    static Predicate _$dcg_connect_4_3 = new PRED_$dcg_connect_4_3();

    public Term arg1, arg2, arg3, arg4;

    public PRED_$dcg_connect_4(Term a1, Term a2, Term a3, Term a4, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        this.cont = cont;
    }

    public PRED_$dcg_connect_4(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        this.cont = cont;
    }

    public int arity() { return 4; }

    public String toString() {
        return "$dcg_connect(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.aregs[4] = arg4;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$dcg_connect_4_var, _$dcg_connect_4_int, _$dcg_connect_4_int, _$dcg_connect_4_int, _$dcg_connect_4_var, _$dcg_connect_4_int);
    }
}

class PRED_$dcg_connect_4_var extends PRED_$dcg_connect_4 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$dcg_connect_4_1, _$dcg_connect_4_var_1);
    }
}

class PRED_$dcg_connect_4_var_1 extends PRED_$dcg_connect_4 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$dcg_connect_4_2, _$dcg_connect_4_var_2);
    }
}

class PRED_$dcg_connect_4_var_2 extends PRED_$dcg_connect_4 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$dcg_connect_4_3);
    }
}

class PRED_$dcg_connect_4_int extends PRED_$dcg_connect_4 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$dcg_connect_4_2, _$dcg_connect_4_int_1);
    }
}

class PRED_$dcg_connect_4_int_1 extends PRED_$dcg_connect_4 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$dcg_connect_4_3);
    }
}

class PRED_$dcg_connect_4_1 extends PRED_$dcg_connect_4 {
    public Predicate exec(Prolog engine) {
    // '$dcg_connect'((A->B),(C->D),E,(C->F)):-!,'$dcg_and'(D,E,F)
        Term a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // '$dcg_connect'((A->B),(C->D),E,(C->F)):-['$neck_cut','$dcg_and'(D,E,F)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s1.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s1, args), engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isStructure()){
            if (! s1.equals(((StructureTerm)a2).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a2).args();
            a5 = args[0];
            a6 = args[1];
        } else if (a2.isVariable()){
            a5 = new VariableTerm(engine);
            a6 = new VariableTerm(engine);
            Term[] args = {a5, a6};
            ((VariableTerm) a2).bind(new StructureTerm(s1, args), engine.trail);
        } else {
            return engine.fail();
        }
        a4 = a4.dereference();
        if (a4.isStructure()){
            if (! s1.equals(((StructureTerm)a4).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a4).args();
            if (! a5.unify(args[0], engine.trail))
                return engine.fail();
            a7 = args[1];
        } else if (a4.isVariable()){
            a7 = new VariableTerm(engine);
            Term[] args = {a5, a7};
            ((VariableTerm) a4).bind(new StructureTerm(s1, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return new PRED_$dcg_and_3(a6, a3, a7, cont);
    }
}

class PRED_$dcg_connect_4_2 extends PRED_$dcg_connect_4 {
    public Predicate exec(Prolog engine) {
    // '$dcg_connect'(A,(B->C),D,((B->C),D)):-!
        Term a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // '$dcg_connect'(A,(B->C),D,((B->C),D)):-['$neck_cut']
        a2 = a2.dereference();
        if (a2.isStructure()){
            if (! s1.equals(((StructureTerm)a2).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a2).args();
            a5 = args[0];
            a6 = args[1];
        } else if (a2.isVariable()){
            a5 = new VariableTerm(engine);
            a6 = new VariableTerm(engine);
            Term[] args = {a5, a6};
            ((VariableTerm) a2).bind(new StructureTerm(s1, args), engine.trail);
        } else {
            return engine.fail();
        }
        a4 = a4.dereference();
        if (a4.isStructure()){
            if (! s2.equals(((StructureTerm)a4).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a4).args();
            a7 = args[0];
            if (! a3.unify(args[1], engine.trail))
                return engine.fail();
        } else if (a4.isVariable()){
            a7 = new VariableTerm(engine);
            Term[] args = {a7, a3};
            ((VariableTerm) a4).bind(new StructureTerm(s2, args), engine.trail);
        } else {
            return engine.fail();
        }
        a7 = a7.dereference();
        if (a7.isStructure()){
            if (! s1.equals(((StructureTerm)a7).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a7).args();
            if (! a5.unify(args[0], engine.trail))
                return engine.fail();
            if (! a6.unify(args[1], engine.trail))
                return engine.fail();
        } else if (a7.isVariable()){
            Term[] args = {a5, a6};
            ((VariableTerm) a7).bind(new StructureTerm(s1, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_$dcg_connect_4_3 extends PRED_$dcg_connect_4 {
    public Predicate exec(Prolog engine) {
    // '$dcg_connect'(A,B,C,D):-'$dcg_and'(B,C,D)
        Term a1, a2, a3, a4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // '$dcg_connect'(A,B,C,D):-['$dcg_and'(B,C,D)]
        return new PRED_$dcg_and_3(a2, a3, a4, cont);
    }
}
