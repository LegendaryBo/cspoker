package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.IllegalTypeException;
import jp.ac.kobe_u.cs.prolog.lang.IntegerTerm;
import jp.ac.kobe_u.cs.prolog.lang.ListTerm;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.StructureTerm;
import jp.ac.kobe_u.cs.prolog.lang.SymbolTerm;
import jp.ac.kobe_u.cs.prolog.lang.Term;
import jp.ac.kobe_u.cs.prolog.lang.VariableTerm;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$gen_indexing_keys0'/3</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$gen_indexing_keys0_3 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("all");
    static SymbolTerm s2 = SymbolTerm.makeSymbol("lis");
    static SymbolTerm s3 = SymbolTerm.makeSymbol("[]");
    static ListTerm s4 = new ListTerm(s2, s3);
    static ListTerm s5 = new ListTerm(s1, s4);
    static SymbolTerm s6 = SymbolTerm.makeSymbol("str");
    static ListTerm s7 = new ListTerm(s6, s3);
    static ListTerm s8 = new ListTerm(s1, s7);
    static SymbolTerm s9 = SymbolTerm.makeSymbol("type", 1);
    static SymbolTerm s10 = SymbolTerm.makeSymbol("term");
    static Term[] s11 = {s10};
    static StructureTerm s12 = new StructureTerm(s9, s11);
    static SymbolTerm s13 = SymbolTerm.makeSymbol("$gen_indexing_keys0", 3);
    static IntegerTerm si14 = new IntegerTerm(1);
    static Predicate _$gen_indexing_keys0_3_sub_1 = new PRED_$gen_indexing_keys0_3_sub_1();
    static Predicate _$gen_indexing_keys0_3_sub_2 = new PRED_$gen_indexing_keys0_3_sub_2();
    static Predicate _$gen_indexing_keys0_3_sub_3 = new PRED_$gen_indexing_keys0_3_sub_3();
    static Predicate _$gen_indexing_keys0_3_sub_4 = new PRED_$gen_indexing_keys0_3_sub_4();
    static Predicate _$gen_indexing_keys0_3_1 = new PRED_$gen_indexing_keys0_3_1();
    static Predicate _$gen_indexing_keys0_3_2 = new PRED_$gen_indexing_keys0_3_2();
    static Predicate _$gen_indexing_keys0_3_3 = new PRED_$gen_indexing_keys0_3_3();
    static Predicate _$gen_indexing_keys0_3_4 = new PRED_$gen_indexing_keys0_3_4();
    static Predicate _$gen_indexing_keys0_3_5 = new PRED_$gen_indexing_keys0_3_5();

    public Term arg1, arg2, arg3;

    public PRED_$gen_indexing_keys0_3(Term a1, Term a2, Term a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_$gen_indexing_keys0_3(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String toString() {
        return "$gen_indexing_keys0(" + arg1 + "," + arg2 + "," + arg3 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$gen_indexing_keys0_3_1, _$gen_indexing_keys0_3_sub_1);
    }
}

class PRED_$gen_indexing_keys0_3_sub_1 extends PRED_$gen_indexing_keys0_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$gen_indexing_keys0_3_2, _$gen_indexing_keys0_3_sub_2);
    }
}

class PRED_$gen_indexing_keys0_3_sub_2 extends PRED_$gen_indexing_keys0_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$gen_indexing_keys0_3_3, _$gen_indexing_keys0_3_sub_3);
    }
}

class PRED_$gen_indexing_keys0_3_sub_3 extends PRED_$gen_indexing_keys0_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$gen_indexing_keys0_3_4, _$gen_indexing_keys0_3_sub_4);
    }
}

class PRED_$gen_indexing_keys0_3_sub_4 extends PRED_$gen_indexing_keys0_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$gen_indexing_keys0_3_5);
    }
}

class PRED_$gen_indexing_keys0_3_1 extends PRED_$gen_indexing_keys0_3 {
    public Predicate exec(Prolog engine) {
    // '$gen_indexing_keys0'(A,B,C):-var(A),!,hash_keys(B,C)
        Term a1, a2, a3, a4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$gen_indexing_keys0'(A,B,C):-['$get_level'(D),var(A),'$cut'(D),hash_keys(B,C)]
        a4 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(4))
        if (! a4.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of var(a(1))
        a1 = a1.dereference();
        if (! a1.isVariable()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(4))
        a4 = a4.dereference();
        if (! a4.isInteger()) {
            throw new IllegalTypeException("integer", a4);
        } else {
            engine.cut(((IntegerTerm) a4).intValue());
        }
        //END inline expansion
        return new PRED_hash_keys_2(a2, a3, cont);
    }
}

class PRED_$gen_indexing_keys0_3_2 extends PRED_$gen_indexing_keys0_3 {
    public Predicate exec(Prolog engine) {
    // '$gen_indexing_keys0'(A,B,[all,lis]):-A=[C|D],!
        Term a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$gen_indexing_keys0'(A,B,[all,lis]):-['$get_level'(C),'$unify'(A,[D|E]),'$cut'(C)]
        if (! s5.unify(a3, engine.trail))
            return engine.fail();
        a4 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(4))
        if (! a4.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a5 = new ListTerm(new VariableTerm(engine), new VariableTerm(engine));
        //START inline expansion of $unify(a(1),a(5))
        if (! a1.unify(a5, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(4))
        a4 = a4.dereference();
        if (! a4.isInteger()) {
            throw new IllegalTypeException("integer", a4);
        } else {
            engine.cut(((IntegerTerm) a4).intValue());
        }
        //END inline expansion
        return cont;
    }
}

class PRED_$gen_indexing_keys0_3_3 extends PRED_$gen_indexing_keys0_3 {
    public Predicate exec(Prolog engine) {
    // '$gen_indexing_keys0'(A,B,[all,str]):-compound(A),!
        Term a1, a2, a3, a4;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$gen_indexing_keys0'(A,B,[all,str]):-['$get_level'(C),compound(A),'$cut'(C)]
        if (! s8.unify(a3, engine.trail))
            return engine.fail();
        a4 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(4))
        if (! a4.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        p1 = new PRED_$cut_1(a4, cont);
        return new PRED_compound_1(a1, p1);
    }
}

class PRED_$gen_indexing_keys0_3_4 extends PRED_$gen_indexing_keys0_3 {
    public Predicate exec(Prolog engine) {
    // '$gen_indexing_keys0'(A,B,[all,C]):-ground(A),!,'$term_hash'(A,C),'$dummy_12_builtins.pl'(C,D,B)
        Term a1, a2, a3, a4, a5, a6;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$gen_indexing_keys0'(A,B,[all,C]):-['$get_level'(D),ground(A),'$cut'(D),'$term_hash'(A,C),'$dummy_12_builtins.pl'(C,E,B)]
        a3 = a3.dereference();
        if (a3.isList()){
            Term[] args = {((ListTerm)a3).car(), ((ListTerm)a3).cdr()};
            if (! s1.unify(args[0], engine.trail))
                return engine.fail();
            a4 = args[1];
        } else if (a3.isVariable()){
            a4 = new VariableTerm(engine);
            ((VariableTerm) a3).bind(new ListTerm(s1, a4), engine.trail);
        } else {
            return engine.fail();
        }
        a4 = a4.dereference();
        if (a4.isList()){
            Term[] args = {((ListTerm)a4).car(), ((ListTerm)a4).cdr()};
            a5 = args[0];
            if (! s3.unify(args[1], engine.trail))
                return engine.fail();
        } else if (a4.isVariable()){
            a5 = new VariableTerm(engine);
            ((VariableTerm) a4).bind(new ListTerm(a5, s3), engine.trail);
        } else {
            return engine.fail();
        }
        a6 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(6))
        if (! a6.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of ground(a(1))
        a1 = a1.dereference();
        if (! a1.isGround()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(6))
        a6 = a6.dereference();
        if (! a6.isInteger()) {
            throw new IllegalTypeException("integer", a6);
        } else {
            engine.cut(((IntegerTerm) a6).intValue());
        }
        //END inline expansion
        p1 = new PRED_$dummy_12_builtins$002Epl_3(a5, new VariableTerm(engine), a2, cont);
        return new PRED_$term_hash_2(a1, a5, p1);
    }
}

class PRED_$gen_indexing_keys0_3_5 extends PRED_$gen_indexing_keys0_3 {
    public Predicate exec(Prolog engine) {
    // '$gen_indexing_keys0'(A,B,C):-illarg(type(term),'$gen_indexing_keys0'(A,B,C),1)
        Term a1, a2, a3, a4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$gen_indexing_keys0'(A,B,C):-[illarg(type(term),'$gen_indexing_keys0'(A,B,C),1)]
        Term[] y1 = {a1, a2, a3};
        a4 = new StructureTerm(s13, y1);
        return new PRED_illarg_3(s12, a4, si14, cont);
    }
}
