package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$consult_clause'/1</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$consult_clause_1 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("end_of_file");
    static SymbolTerm s2 = SymbolTerm.makeSymbol(":-", 1);
    static SymbolTerm s3 = SymbolTerm.makeSymbol("module", 2);
    static SymbolTerm s4 = SymbolTerm.makeSymbol("package", 1);
    static SymbolTerm s5 = SymbolTerm.makeSymbol("import", 1);
    static SymbolTerm s6 = SymbolTerm.makeSymbol("dynamic", 1);
    static SymbolTerm s7 = SymbolTerm.makeSymbol("public", 1);
    static SymbolTerm s8 = SymbolTerm.makeSymbol("meta_predicate", 1);
    static SymbolTerm s9 = SymbolTerm.makeSymbol("mode", 1);
    static SymbolTerm s10 = SymbolTerm.makeSymbol("multifile", 1);
    static SymbolTerm s11 = SymbolTerm.makeSymbol("block", 1);
    static SymbolTerm s12 = SymbolTerm.makeSymbol(":", 2);
    static SymbolTerm s13 = SymbolTerm.makeSymbol("jp.ac.kobe_u.cs.prolog.builtin");
    static SymbolTerm s14 = SymbolTerm.makeSymbol("$consulted_package", 1);
    static Predicate _$consult_clause_1_var = new PRED_$consult_clause_1_var();
    static Predicate _$consult_clause_1_var_1 = new PRED_$consult_clause_1_var_1();
    static Predicate _$consult_clause_1_var_2 = new PRED_$consult_clause_1_var_2();
    static Predicate _$consult_clause_1_var_3 = new PRED_$consult_clause_1_var_3();
    static Predicate _$consult_clause_1_var_4 = new PRED_$consult_clause_1_var_4();
    static Predicate _$consult_clause_1_var_5 = new PRED_$consult_clause_1_var_5();
    static Predicate _$consult_clause_1_var_6 = new PRED_$consult_clause_1_var_6();
    static Predicate _$consult_clause_1_var_7 = new PRED_$consult_clause_1_var_7();
    static Predicate _$consult_clause_1_var_8 = new PRED_$consult_clause_1_var_8();
    static Predicate _$consult_clause_1_var_9 = new PRED_$consult_clause_1_var_9();
    static Predicate _$consult_clause_1_var_10 = new PRED_$consult_clause_1_var_10();
    static Predicate _$consult_clause_1_var_11 = new PRED_$consult_clause_1_var_11();
    static Predicate _$consult_clause_1_con = new PRED_$consult_clause_1_con();
    static Predicate _$consult_clause_1_con_1 = new PRED_$consult_clause_1_con_1();
    static Predicate _$consult_clause_1_str = new PRED_$consult_clause_1_str();
    static Predicate _$consult_clause_1_str_1 = new PRED_$consult_clause_1_str_1();
    static Predicate _$consult_clause_1_str_2 = new PRED_$consult_clause_1_str_2();
    static Predicate _$consult_clause_1_str_3 = new PRED_$consult_clause_1_str_3();
    static Predicate _$consult_clause_1_str_4 = new PRED_$consult_clause_1_str_4();
    static Predicate _$consult_clause_1_str_5 = new PRED_$consult_clause_1_str_5();
    static Predicate _$consult_clause_1_str_6 = new PRED_$consult_clause_1_str_6();
    static Predicate _$consult_clause_1_str_7 = new PRED_$consult_clause_1_str_7();
    static Predicate _$consult_clause_1_str_8 = new PRED_$consult_clause_1_str_8();
    static Predicate _$consult_clause_1_str_9 = new PRED_$consult_clause_1_str_9();
    static Predicate _$consult_clause_1_str_10 = new PRED_$consult_clause_1_str_10();
    static Predicate _$consult_clause_1_1 = new PRED_$consult_clause_1_1();
    static Predicate _$consult_clause_1_2 = new PRED_$consult_clause_1_2();
    static Predicate _$consult_clause_1_3 = new PRED_$consult_clause_1_3();
    static Predicate _$consult_clause_1_4 = new PRED_$consult_clause_1_4();
    static Predicate _$consult_clause_1_5 = new PRED_$consult_clause_1_5();
    static Predicate _$consult_clause_1_6 = new PRED_$consult_clause_1_6();
    static Predicate _$consult_clause_1_7 = new PRED_$consult_clause_1_7();
    static Predicate _$consult_clause_1_8 = new PRED_$consult_clause_1_8();
    static Predicate _$consult_clause_1_9 = new PRED_$consult_clause_1_9();
    static Predicate _$consult_clause_1_10 = new PRED_$consult_clause_1_10();
    static Predicate _$consult_clause_1_11 = new PRED_$consult_clause_1_11();
    static Predicate _$consult_clause_1_12 = new PRED_$consult_clause_1_12();

    public Term arg1;

    public PRED_$consult_clause_1(Term a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_$consult_clause_1(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String toString() {
        return "$consult_clause(" + arg1 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$consult_clause_1_var, _$consult_clause_1_12, _$consult_clause_1_12, _$consult_clause_1_con, _$consult_clause_1_str, _$consult_clause_1_12);
    }
}

class PRED_$consult_clause_1_var extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$consult_clause_1_1, _$consult_clause_1_var_1);
    }
}

class PRED_$consult_clause_1_var_1 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$consult_clause_1_2, _$consult_clause_1_var_2);
    }
}

class PRED_$consult_clause_1_var_2 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$consult_clause_1_3, _$consult_clause_1_var_3);
    }
}

class PRED_$consult_clause_1_var_3 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$consult_clause_1_4, _$consult_clause_1_var_4);
    }
}

class PRED_$consult_clause_1_var_4 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$consult_clause_1_5, _$consult_clause_1_var_5);
    }
}

class PRED_$consult_clause_1_var_5 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$consult_clause_1_6, _$consult_clause_1_var_6);
    }
}

class PRED_$consult_clause_1_var_6 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$consult_clause_1_7, _$consult_clause_1_var_7);
    }
}

class PRED_$consult_clause_1_var_7 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$consult_clause_1_8, _$consult_clause_1_var_8);
    }
}

class PRED_$consult_clause_1_var_8 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$consult_clause_1_9, _$consult_clause_1_var_9);
    }
}

class PRED_$consult_clause_1_var_9 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$consult_clause_1_10, _$consult_clause_1_var_10);
    }
}

class PRED_$consult_clause_1_var_10 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$consult_clause_1_11, _$consult_clause_1_var_11);
    }
}

class PRED_$consult_clause_1_var_11 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$consult_clause_1_12);
    }
}

class PRED_$consult_clause_1_con extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$consult_clause_1_1, _$consult_clause_1_con_1);
    }
}

class PRED_$consult_clause_1_con_1 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$consult_clause_1_12);
    }
}

class PRED_$consult_clause_1_str extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$consult_clause_1_2, _$consult_clause_1_str_1);
    }
}

class PRED_$consult_clause_1_str_1 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$consult_clause_1_3, _$consult_clause_1_str_2);
    }
}

class PRED_$consult_clause_1_str_2 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$consult_clause_1_4, _$consult_clause_1_str_3);
    }
}

class PRED_$consult_clause_1_str_3 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$consult_clause_1_5, _$consult_clause_1_str_4);
    }
}

class PRED_$consult_clause_1_str_4 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$consult_clause_1_6, _$consult_clause_1_str_5);
    }
}

class PRED_$consult_clause_1_str_5 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$consult_clause_1_7, _$consult_clause_1_str_6);
    }
}

class PRED_$consult_clause_1_str_6 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$consult_clause_1_8, _$consult_clause_1_str_7);
    }
}

class PRED_$consult_clause_1_str_7 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$consult_clause_1_9, _$consult_clause_1_str_8);
    }
}

class PRED_$consult_clause_1_str_8 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$consult_clause_1_10, _$consult_clause_1_str_9);
    }
}

class PRED_$consult_clause_1_str_9 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$consult_clause_1_11, _$consult_clause_1_str_10);
    }
}

class PRED_$consult_clause_1_str_10 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$consult_clause_1_12);
    }
}

class PRED_$consult_clause_1_1 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) {
    // '$consult_clause'(end_of_file):-!
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$consult_clause'(end_of_file):-['$neck_cut']
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s1))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_$consult_clause_1_2 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) {
    // '$consult_clause'((:-module(A,B))):-!,'$assert_consulted_package'(A)
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$consult_clause'((:-module(A,B))):-['$neck_cut','$assert_consulted_package'(A)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s2.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a2 = args[0];
        } else if (a1.isVariable()){
            a2 = new VariableTerm(engine);
            Term[] args = {a2};
            ((VariableTerm) a1).bind(new StructureTerm(s2, args), engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isStructure()){
            if (! s3.equals(((StructureTerm)a2).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a2).args();
            a3 = args[0];
        } else if (a2.isVariable()){
            a3 = new VariableTerm(engine);
            Term[] args = {a3, new VariableTerm(engine)};
            ((VariableTerm) a2).bind(new StructureTerm(s3, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return new PRED_$assert_consulted_package_1(a3, cont);
    }
}

class PRED_$consult_clause_1_3 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) {
    // '$consult_clause'((:-package A)):-!,'$assert_consulted_package'(A)
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$consult_clause'((:-package A)):-['$neck_cut','$assert_consulted_package'(A)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s2.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a2 = args[0];
        } else if (a1.isVariable()){
            a2 = new VariableTerm(engine);
            Term[] args = {a2};
            ((VariableTerm) a1).bind(new StructureTerm(s2, args), engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isStructure()){
            if (! s4.equals(((StructureTerm)a2).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a2).args();
            a3 = args[0];
        } else if (a2.isVariable()){
            a3 = new VariableTerm(engine);
            Term[] args = {a3};
            ((VariableTerm) a2).bind(new StructureTerm(s4, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return new PRED_$assert_consulted_package_1(a3, cont);
    }
}

class PRED_$consult_clause_1_4 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) {
    // '$consult_clause'((:-import A)):-!
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$consult_clause'((:-import A)):-['$neck_cut']
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s2.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a2 = args[0];
        } else if (a1.isVariable()){
            a2 = new VariableTerm(engine);
            Term[] args = {a2};
            ((VariableTerm) a1).bind(new StructureTerm(s2, args), engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isStructure()){
            if (! s5.equals(((StructureTerm)a2).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a2).args();
        } else if (a2.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a2).bind(new StructureTerm(s5, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_$consult_clause_1_5 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) {
    // '$consult_clause'((:-dynamic A)):-!
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$consult_clause'((:-dynamic A)):-['$neck_cut']
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s2.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a2 = args[0];
        } else if (a1.isVariable()){
            a2 = new VariableTerm(engine);
            Term[] args = {a2};
            ((VariableTerm) a1).bind(new StructureTerm(s2, args), engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isStructure()){
            if (! s6.equals(((StructureTerm)a2).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a2).args();
        } else if (a2.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a2).bind(new StructureTerm(s6, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_$consult_clause_1_6 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) {
    // '$consult_clause'((:-public A)):-!
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$consult_clause'((:-public A)):-['$neck_cut']
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s2.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a2 = args[0];
        } else if (a1.isVariable()){
            a2 = new VariableTerm(engine);
            Term[] args = {a2};
            ((VariableTerm) a1).bind(new StructureTerm(s2, args), engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isStructure()){
            if (! s7.equals(((StructureTerm)a2).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a2).args();
        } else if (a2.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a2).bind(new StructureTerm(s7, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_$consult_clause_1_7 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) {
    // '$consult_clause'((:-meta_predicate A)):-!
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$consult_clause'((:-meta_predicate A)):-['$neck_cut']
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s2.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a2 = args[0];
        } else if (a1.isVariable()){
            a2 = new VariableTerm(engine);
            Term[] args = {a2};
            ((VariableTerm) a1).bind(new StructureTerm(s2, args), engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isStructure()){
            if (! s8.equals(((StructureTerm)a2).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a2).args();
        } else if (a2.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a2).bind(new StructureTerm(s8, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_$consult_clause_1_8 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) {
    // '$consult_clause'((:-mode A)):-!
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$consult_clause'((:-mode A)):-['$neck_cut']
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s2.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a2 = args[0];
        } else if (a1.isVariable()){
            a2 = new VariableTerm(engine);
            Term[] args = {a2};
            ((VariableTerm) a1).bind(new StructureTerm(s2, args), engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isStructure()){
            if (! s9.equals(((StructureTerm)a2).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a2).args();
        } else if (a2.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a2).bind(new StructureTerm(s9, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_$consult_clause_1_9 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) {
    // '$consult_clause'((:-multifile A)):-!
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$consult_clause'((:-multifile A)):-['$neck_cut']
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s2.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a2 = args[0];
        } else if (a1.isVariable()){
            a2 = new VariableTerm(engine);
            Term[] args = {a2};
            ((VariableTerm) a1).bind(new StructureTerm(s2, args), engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isStructure()){
            if (! s10.equals(((StructureTerm)a2).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a2).args();
        } else if (a2.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a2).bind(new StructureTerm(s10, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_$consult_clause_1_10 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) {
    // '$consult_clause'((:-block A)):-!
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$consult_clause'((:-block A)):-['$neck_cut']
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s2.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a2 = args[0];
        } else if (a1.isVariable()){
            a2 = new VariableTerm(engine);
            Term[] args = {a2};
            ((VariableTerm) a1).bind(new StructureTerm(s2, args), engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isStructure()){
            if (! s11.equals(((StructureTerm)a2).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a2).args();
        } else if (a2.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a2).bind(new StructureTerm(s11, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_$consult_clause_1_11 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) {
    // '$consult_clause'((:-A)):-!,clause('$consulted_package'(B),C),once(B:A)
        Term a1, a2, a3, a4, a5, a6;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$consult_clause'((:-A)):-['$neck_cut',clause('jp.ac.kobe_u.cs.prolog.builtin':'$consulted_package'(B),C),once(B:A)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s2.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a2 = args[0];
        } else if (a1.isVariable()){
            a2 = new VariableTerm(engine);
            Term[] args = {a2};
            ((VariableTerm) a1).bind(new StructureTerm(s2, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        a3 = new VariableTerm(engine);
        Term[] y1 = {a3};
        a4 = new StructureTerm(s14, y1);
        Term[] y2 = {s13, a4};
        a5 = new StructureTerm(s12, y2);
        Term[] y3 = {a3, a2};
        a6 = new StructureTerm(s12, y3);
        p1 = new PRED_once_1(a6, cont);
        return new PRED_clause_2(a5, new VariableTerm(engine), p1);
    }
}

class PRED_$consult_clause_1_12 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) {
    // '$consult_clause'(A):-'$consult_preprocess'(A,B),'$consult_cls'(B)
        Term a1, a2;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$consult_clause'(A):-['$consult_preprocess'(A,B),'$consult_cls'(B)]
        a2 = new VariableTerm(engine);
        p1 = new PRED_$consult_cls_1(a2, cont);
        return new PRED_$consult_preprocess_2(a1, a2, p1);
    }
}
