package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$rm_redundant_vars'/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$rm_redundant_vars_2 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("[]");
    static SymbolTerm s2 = SymbolTerm.makeSymbol("=", 2);
    static SymbolTerm s3 = SymbolTerm.makeSymbol("_");
    static Predicate _$rm_redundant_vars_2_top = new PRED_$rm_redundant_vars_2_top();
    static Predicate _fail_0 = new PRED_fail_0();
    static Predicate _$rm_redundant_vars_2_var = new PRED_$rm_redundant_vars_2_var();
    static Predicate _$rm_redundant_vars_2_var_1 = new PRED_$rm_redundant_vars_2_var_1();
    static Predicate _$rm_redundant_vars_2_var_2 = new PRED_$rm_redundant_vars_2_var_2();
    static Predicate _$rm_redundant_vars_2_lis = new PRED_$rm_redundant_vars_2_lis();
    static Predicate _$rm_redundant_vars_2_lis_1 = new PRED_$rm_redundant_vars_2_lis_1();
    static Predicate _$rm_redundant_vars_2_1 = new PRED_$rm_redundant_vars_2_1();
    static Predicate _$rm_redundant_vars_2_2 = new PRED_$rm_redundant_vars_2_2();
    static Predicate _$rm_redundant_vars_2_3 = new PRED_$rm_redundant_vars_2_3();

    public Term arg1, arg2;

    public PRED_$rm_redundant_vars_2(Term a1, Term a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_$rm_redundant_vars_2(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String toString() {
        return "$rm_redundant_vars(" + arg1 + "," + arg2 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.cont = cont;
        return _$rm_redundant_vars_2_top;
    }
}

class PRED_$rm_redundant_vars_2_top extends PRED_$rm_redundant_vars_2 {
    public Predicate exec(Prolog engine) {
        engine.setB0();
        return engine.switch_on_term(_$rm_redundant_vars_2_var, _fail_0, _fail_0, _$rm_redundant_vars_2_1, _fail_0, _$rm_redundant_vars_2_lis);
    }
}

class PRED_$rm_redundant_vars_2_var extends PRED_$rm_redundant_vars_2 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$rm_redundant_vars_2_1, _$rm_redundant_vars_2_var_1);
    }
}

class PRED_$rm_redundant_vars_2_var_1 extends PRED_$rm_redundant_vars_2 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$rm_redundant_vars_2_2, _$rm_redundant_vars_2_var_2);
    }
}

class PRED_$rm_redundant_vars_2_var_2 extends PRED_$rm_redundant_vars_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$rm_redundant_vars_2_3);
    }
}

class PRED_$rm_redundant_vars_2_lis extends PRED_$rm_redundant_vars_2 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$rm_redundant_vars_2_2, _$rm_redundant_vars_2_lis_1);
    }
}

class PRED_$rm_redundant_vars_2_lis_1 extends PRED_$rm_redundant_vars_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$rm_redundant_vars_2_3);
    }
}

class PRED_$rm_redundant_vars_2_1 extends PRED_$rm_redundant_vars_2 {
    public Predicate exec(Prolog engine) {
    // '$rm_redundant_vars'([],[]):-!
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$rm_redundant_vars'([],[]):-['$neck_cut']
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s1))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isSymbol()){
            if (! a2.equals(s1))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_$rm_redundant_vars_2_2 extends PRED_$rm_redundant_vars_2 {
    public Predicate exec(Prolog engine) {
    // '$rm_redundant_vars'(['_'=A|B],C):-!,'$rm_redundant_vars'(B,C)
        Term a1, a2, a3, a4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$rm_redundant_vars'(['_'=A|B],C):-['$neck_cut','$rm_redundant_vars'(B,C)]
        a1 = a1.dereference();
        if (a1.isList()){
            Term[] args = {((ListTerm)a1).car(), ((ListTerm)a1).cdr()};
            a3 = args[0];
            a4 = args[1];
        } else if (a1.isVariable()){
            a3 = new VariableTerm(engine);
            a4 = new VariableTerm(engine);
            ((VariableTerm) a1).bind(new ListTerm(a3, a4), engine.trail);
        } else {
            return engine.fail();
        }
        a3 = a3.dereference();
        if (a3.isStructure()){
            if (! s2.equals(((StructureTerm)a3).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a3).args();
            if (! s3.unify(args[0], engine.trail))
                return engine.fail();
        } else if (a3.isVariable()){
            Term[] args = {s3, new VariableTerm(engine)};
            ((VariableTerm) a3).bind(new StructureTerm(s2, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        engine.aregs[1] = a4;
        engine.aregs[2] = a2;
        engine.cont = cont;
        return _$rm_redundant_vars_2_top;
    }
}

class PRED_$rm_redundant_vars_2_3 extends PRED_$rm_redundant_vars_2 {
    public Predicate exec(Prolog engine) {
    // '$rm_redundant_vars'([A|B],[A|C]):-'$rm_redundant_vars'(B,C)
        Term a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$rm_redundant_vars'([A|B],[A|C]):-['$rm_redundant_vars'(B,C)]
        a1 = a1.dereference();
        if (a1.isList()){
            Term[] args = {((ListTerm)a1).car(), ((ListTerm)a1).cdr()};
            a3 = args[0];
            a4 = args[1];
        } else if (a1.isVariable()){
            a3 = new VariableTerm(engine);
            a4 = new VariableTerm(engine);
            ((VariableTerm) a1).bind(new ListTerm(a3, a4), engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isList()){
            Term[] args = {((ListTerm)a2).car(), ((ListTerm)a2).cdr()};
            if (! a3.unify(args[0], engine.trail))
                return engine.fail();
            a5 = args[1];
        } else if (a2.isVariable()){
            a5 = new VariableTerm(engine);
            ((VariableTerm) a2).bind(new ListTerm(a3, a5), engine.trail);
        } else {
            return engine.fail();
        }
        engine.aregs[1] = a4;
        engine.aregs[2] = a5;
        engine.cont = cont;
        return _$rm_redundant_vars_2_top;
    }
}
