package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.IllegalTypeException;
import jp.ac.kobe_u.cs.prolog.lang.IntegerTerm;
import jp.ac.kobe_u.cs.prolog.lang.ListTerm;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.Term;
import jp.ac.kobe_u.cs.prolog.lang.VariableTerm;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$term_variant'/3</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$term_variant_3 extends Predicate {
    static Predicate _$term_variant_3_top = new PRED_$term_variant_3_top();
    static Predicate _$term_variant_3_var = new PRED_$term_variant_3_var();
    static Predicate _$term_variant_3_var_1 = new PRED_$term_variant_3_var_1();
    static Predicate _$term_variant_3_var_2 = new PRED_$term_variant_3_var_2();
    static Predicate _$term_variant_3_var_3 = new PRED_$term_variant_3_var_3();
    static Predicate _$term_variant_3_var_4 = new PRED_$term_variant_3_var_4();
    static Predicate _$term_variant_3_int = new PRED_$term_variant_3_int();
    static Predicate _$term_variant_3_int_1 = new PRED_$term_variant_3_int_1();
    static Predicate _$term_variant_3_int_2 = new PRED_$term_variant_3_int_2();
    static Predicate _$term_variant_3_int_3 = new PRED_$term_variant_3_int_3();
    static Predicate _$term_variant_3_1 = new PRED_$term_variant_3_1();
    static Predicate _$term_variant_3_2 = new PRED_$term_variant_3_2();
    static Predicate _$term_variant_3_3 = new PRED_$term_variant_3_3();
    static Predicate _$term_variant_3_4 = new PRED_$term_variant_3_4();
    static Predicate _$term_variant_3_5 = new PRED_$term_variant_3_5();

    public Term arg1, arg2, arg3;

    public PRED_$term_variant_3(Term a1, Term a2, Term a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_$term_variant_3(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String toString() {
        return "$term_variant(" + arg1 + "," + arg2 + "," + arg3 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.cont = cont;
        return _$term_variant_3_top;
    }
}

class PRED_$term_variant_3_top extends PRED_$term_variant_3 {
    public Predicate exec(Prolog engine) {
        engine.setB0();
        return engine.switch_on_term(_$term_variant_3_var, _$term_variant_3_int, _$term_variant_3_int, _$term_variant_3_int, _$term_variant_3_int, _$term_variant_3_var);
    }
}

class PRED_$term_variant_3_var extends PRED_$term_variant_3 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$term_variant_3_1, _$term_variant_3_var_1);
    }
}

class PRED_$term_variant_3_var_1 extends PRED_$term_variant_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$term_variant_3_2, _$term_variant_3_var_2);
    }
}

class PRED_$term_variant_3_var_2 extends PRED_$term_variant_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$term_variant_3_3, _$term_variant_3_var_3);
    }
}

class PRED_$term_variant_3_var_3 extends PRED_$term_variant_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$term_variant_3_4, _$term_variant_3_var_4);
    }
}

class PRED_$term_variant_3_var_4 extends PRED_$term_variant_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$term_variant_3_5);
    }
}

class PRED_$term_variant_3_int extends PRED_$term_variant_3 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$term_variant_3_1, _$term_variant_3_int_1);
    }
}

class PRED_$term_variant_3_int_1 extends PRED_$term_variant_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$term_variant_3_2, _$term_variant_3_int_2);
    }
}

class PRED_$term_variant_3_int_2 extends PRED_$term_variant_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$term_variant_3_3, _$term_variant_3_int_3);
    }
}

class PRED_$term_variant_3_int_3 extends PRED_$term_variant_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$term_variant_3_5);
    }
}

class PRED_$term_variant_3_1 extends PRED_$term_variant_3 {
    public Predicate exec(Prolog engine) {
    // '$term_variant'(A,B,C):-var(A),!,'$dummy_13_builtins.pl'(B,C,A,D)
        Term a1, a2, a3, a4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$term_variant'(A,B,C):-['$get_level'(D),var(A),'$cut'(D),'$dummy_13_builtins.pl'(B,C,A,E)]
        a4 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(4))
        if (! a4.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of var(a(1))
        a1 = a1.dereference();
        if (! a1.isVariable()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(4))
        a4 = a4.dereference();
        if (! a4.isInteger()) {
            throw new IllegalTypeException("integer", a4);
        } else {
            engine.cut(((IntegerTerm) a4).intValue());
        }
        //END inline expansion
        return new PRED_$dummy_13_builtins$002Epl_4(a2, a3, a1, new VariableTerm(engine), cont);
    }
}

class PRED_$term_variant_3_2 extends PRED_$term_variant_3 {
    public Predicate exec(Prolog engine) {
    // '$term_variant'(A,B,C):-ground(A),!,A==B
        Term a1, a2, a3, a4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$term_variant'(A,B,C):-['$get_level'(D),ground(A),'$cut'(D),'$equality_of_term'(A,B)]
        a4 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(4))
        if (! a4.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of ground(a(1))
        a1 = a1.dereference();
        if (! a1.isGround()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(4))
        a4 = a4.dereference();
        if (! a4.isInteger()) {
            throw new IllegalTypeException("integer", a4);
        } else {
            engine.cut(((IntegerTerm) a4).intValue());
        }
        //END inline expansion
        //START inline expansion of $equality_of_term(a(1),a(2))
        a1 = a1.dereference();
        a2 = a2.dereference();
        if (! a1.equals(a2)) {
            return engine.fail();
        }
        //END inline expansion
        return cont;
    }
}

class PRED_$term_variant_3_3 extends PRED_$term_variant_3 {
    public Predicate exec(Prolog engine) {
    // '$term_variant'(A,B,C):-var(B),!,fail
        Term a1, a2, a3, a4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$term_variant'(A,B,C):-['$get_level'(D),var(B),'$cut'(D),fail]
        a4 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(4))
        if (! a4.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of var(a(2))
        a2 = a2.dereference();
        if (! a2.isVariable()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(4))
        a4 = a4.dereference();
        if (! a4.isInteger()) {
            throw new IllegalTypeException("integer", a4);
        } else {
            engine.cut(((IntegerTerm) a4).intValue());
        }
        //END inline expansion
        //START inline expansion of fail
        return engine.fail();
        //END inline expansion
    }
}

class PRED_$term_variant_3_4 extends PRED_$term_variant_3 {
    public Predicate exec(Prolog engine) {
    // '$term_variant'([A|B],[C|D],E):-!,'$term_variant'(A,C,E),'$term_variant'(B,D,E)
        Term a1, a2, a3, a4, a5, a6, a7;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$term_variant'([A|B],[C|D],E):-['$neck_cut','$term_variant'(A,C,E),'$term_variant'(B,D,E)]
        a1 = a1.dereference();
        if (a1.isList()){
            Term[] args = {((ListTerm)a1).car(), ((ListTerm)a1).cdr()};
            a4 = args[0];
            a5 = args[1];
        } else if (a1.isVariable()){
            a4 = new VariableTerm(engine);
            a5 = new VariableTerm(engine);
            ((VariableTerm) a1).bind(new ListTerm(a4, a5), engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isList()){
            Term[] args = {((ListTerm)a2).car(), ((ListTerm)a2).cdr()};
            a6 = args[0];
            a7 = args[1];
        } else if (a2.isVariable()){
            a6 = new VariableTerm(engine);
            a7 = new VariableTerm(engine);
            ((VariableTerm) a2).bind(new ListTerm(a6, a7), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_$term_variant_3(a5, a7, a3, cont);
        engine.aregs[1] = a4;
        engine.aregs[2] = a6;
        engine.aregs[3] = a3;
        engine.cont = p1;
        return _$term_variant_3_top;
    }
}

class PRED_$term_variant_3_5 extends PRED_$term_variant_3 {
    public Predicate exec(Prolog engine) {
    // '$term_variant'(A,B,C):-A=..D,B=..E,'$term_variant'(D,E,C)
        Term a1, a2, a3, a4, a5;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$term_variant'(A,B,C):-['$univ'(A,D),'$univ'(B,E),'$term_variant'(D,E,C)]
        a4 = new VariableTerm(engine);
        a5 = new VariableTerm(engine);
        p1 = new PRED_$term_variant_3(a4, a5, a3, cont);
        p2 = new PRED_$univ_2(a2, a5, p1);
        return new PRED_$univ_2(a1, a4, p2);
    }
}
