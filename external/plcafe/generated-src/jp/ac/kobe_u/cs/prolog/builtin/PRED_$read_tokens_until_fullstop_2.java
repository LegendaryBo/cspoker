package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$read_tokens_until_fullstop'/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$read_tokens_until_fullstop_2 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("end_of_file");
    static SymbolTerm s2 = SymbolTerm.makeSymbol(".");
    static Predicate _$read_tokens_until_fullstop_2_sub_1 = new PRED_$read_tokens_until_fullstop_2_sub_1();
    static Predicate _$read_tokens_until_fullstop_2_sub_2 = new PRED_$read_tokens_until_fullstop_2_sub_2();
    static Predicate _$read_tokens_until_fullstop_2_1 = new PRED_$read_tokens_until_fullstop_2_1();
    static Predicate _$read_tokens_until_fullstop_2_2 = new PRED_$read_tokens_until_fullstop_2_2();
    static Predicate _$read_tokens_until_fullstop_2_3 = new PRED_$read_tokens_until_fullstop_2_3();

    public Term arg1, arg2;

    public PRED_$read_tokens_until_fullstop_2(Term a1, Term a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_$read_tokens_until_fullstop_2(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String toString() {
        return "$read_tokens_until_fullstop(" + arg1 + "," + arg2 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$read_tokens_until_fullstop_2_1, _$read_tokens_until_fullstop_2_sub_1);
    }
}

class PRED_$read_tokens_until_fullstop_2_sub_1 extends PRED_$read_tokens_until_fullstop_2 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$read_tokens_until_fullstop_2_2, _$read_tokens_until_fullstop_2_sub_2);
    }
}

class PRED_$read_tokens_until_fullstop_2_sub_2 extends PRED_$read_tokens_until_fullstop_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$read_tokens_until_fullstop_2_3);
    }
}

class PRED_$read_tokens_until_fullstop_2_1 extends PRED_$read_tokens_until_fullstop_2 {
    public Predicate exec(Prolog engine) {
    // '$read_tokens_until_fullstop'(A,end_of_file):-!
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$read_tokens_until_fullstop'(A,end_of_file):-['$neck_cut']
        a2 = a2.dereference();
        if (a2.isSymbol()){
            if (! a2.equals(s1))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_$read_tokens_until_fullstop_2_2 extends PRED_$read_tokens_until_fullstop_2 {
    public Predicate exec(Prolog engine) {
    // '$read_tokens_until_fullstop'(A,'.'):-!
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$read_tokens_until_fullstop'(A,'.'):-['$neck_cut']
        a2 = a2.dereference();
        if (a2.isSymbol()){
            if (! a2.equals(s2))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(s2, engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_$read_tokens_until_fullstop_2_3 extends PRED_$read_tokens_until_fullstop_2 {
    public Predicate exec(Prolog engine) {
    // '$read_tokens_until_fullstop'(A,B):-read_token(A,C),'$read_tokens_until_fullstop'(A,C)
        Term a1, a2, a3;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$read_tokens_until_fullstop'(A,B):-[read_token(A,C),'$read_tokens_until_fullstop'(A,C)]
        a3 = new VariableTerm(engine);
        p1 = new PRED_$read_tokens_until_fullstop_2(a1, a3, cont);
        return new PRED_read_token_2(a1, a3, p1);
    }
}
