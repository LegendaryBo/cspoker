package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.StructureTerm;
import jp.ac.kobe_u.cs.prolog.lang.SymbolTerm;
import jp.ac.kobe_u.cs.prolog.lang.Term;
import jp.ac.kobe_u.cs.prolog.lang.VariableTerm;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>clause/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_clause_2 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol(":", 2);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("clause", 2);
    static SymbolTerm s3 = SymbolTerm.makeSymbol("access");
    static SymbolTerm s4 = SymbolTerm.makeSymbol("private_procedure");
    static SymbolTerm s5 = SymbolTerm.makeSymbol(":-", 2);

    public Term arg1, arg2;

    public PRED_clause_2(Term a1, Term a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_clause_2(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String toString() {
        return "clause(" + arg1 + "," + arg2 + ")";
    }

    public Predicate exec(Prolog engine) {
    // clause(A,B):-'$head_to_term'(A,C,D:E,clause(A,B)),'$new_internal_database'(D),'$check_procedure_permission'(D:E,access,private_procedure,clause(A,B)),'$clause_internal'(D,E,C,F,G),copy_term(F,(C:-B))
        engine.setB0();
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11;
        Predicate p1, p2, p3, p4;
        a1 = arg1;
        a2 = arg2;
    // clause(A,B):-['$head_to_term'(A,C,D:E,clause(A,B)),'$new_internal_database'(D),'$check_procedure_permission'(D:E,access,private_procedure,clause(A,B)),'$clause_internal'(D,E,C,F,G),copy_term(F,(C:-B))]
        a3 = new VariableTerm(engine);
        a4 = new VariableTerm(engine);
        a5 = new VariableTerm(engine);
        Term[] y1 = {a4, a5};
        a6 = new StructureTerm(s1, y1);
        Term[] y2 = {a1, a2};
        a7 = new StructureTerm(s2, y2);
        Term[] y3 = {a4, a5};
        a8 = new StructureTerm(s1, y3);
        Term[] y4 = {a1, a2};
        a9 = new StructureTerm(s2, y4);
        a10 = new VariableTerm(engine);
        Term[] y5 = {a3, a2};
        a11 = new StructureTerm(s5, y5);
        p1 = new PRED_copy_term_2(a10, a11, cont);
        p2 = new PRED_$clause_internal_5(a4, a5, a3, a10, new VariableTerm(engine), p1);
        p3 = new PRED_$check_procedure_permission_4(a8, s3, s4, a9, p2);
        p4 = new PRED_$new_internal_database_1(a4, p3);
        return new PRED_$head_to_term_4(a1, a3, a6, a7, p4);
    }
}
