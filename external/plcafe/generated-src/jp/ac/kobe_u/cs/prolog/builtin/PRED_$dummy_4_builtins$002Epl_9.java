package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.IllegalTypeException;
import jp.ac.kobe_u.cs.prolog.lang.IntegerTerm;
import jp.ac.kobe_u.cs.prolog.lang.ListTerm;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.SymbolTerm;
import jp.ac.kobe_u.cs.prolog.lang.Term;
import jp.ac.kobe_u.cs.prolog.lang.VariableTerm;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$dummy_4_builtins.pl'/9</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$dummy_4_builtins$002Epl_9 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("<");
    static Predicate _$dummy_4_builtins$002Epl_9_sub_1 = new PRED_$dummy_4_builtins$002Epl_9_sub_1();
    static Predicate _$dummy_4_builtins$002Epl_9_1 = new PRED_$dummy_4_builtins$002Epl_9_1();
    static Predicate _$dummy_4_builtins$002Epl_9_2 = new PRED_$dummy_4_builtins$002Epl_9_2();

    public Term arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9;

    public PRED_$dummy_4_builtins$002Epl_9(Term a1, Term a2, Term a3, Term a4, Term a5, Term a6, Term a7, Term a8, Term a9, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        arg5 = a5;
        arg6 = a6;
        arg7 = a7;
        arg8 = a8;
        arg9 = a9;
        this.cont = cont;
    }

    public PRED_$dummy_4_builtins$002Epl_9(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        arg5 = args[4];
        arg6 = args[5];
        arg7 = args[6];
        arg8 = args[7];
        arg9 = args[8];
        this.cont = cont;
    }

    public int arity() { return 9; }

    public String toString() {
        return "$dummy_4_builtins.pl(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + "," + arg5 + "," + arg6 + "," + arg7 + "," + arg8 + "," + arg9 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.aregs[4] = arg4;
        engine.aregs[5] = arg5;
        engine.aregs[6] = arg6;
        engine.aregs[7] = arg7;
        engine.aregs[8] = arg8;
        engine.aregs[9] = arg9;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$dummy_4_builtins$002Epl_9_1, _$dummy_4_builtins$002Epl_9_sub_1);
    }
}

class PRED_$dummy_4_builtins$002Epl_9_sub_1 extends PRED_$dummy_4_builtins$002Epl_9 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$dummy_4_builtins$002Epl_9_2);
    }
}

class PRED_$dummy_4_builtins$002Epl_9_1 extends PRED_$dummy_4_builtins$002Epl_9 {
    public Predicate exec(Prolog engine) {
    // '$dummy_4_builtins.pl'(A,B,C,D,E,F,G,H,I):-G= <,!,E=B,'$merge'(C,[A|I],F,D,H)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        a7 = engine.aregs[7];
        a8 = engine.aregs[8];
        a9 = engine.aregs[9];
        cont = engine.cont;
    // '$dummy_4_builtins.pl'(A,B,C,D,E,F,G,H,I):-['$get_level'(J),'$unify'(G,<),'$cut'(J),'$unify'(E,B),'$merge'(C,[A|I],F,D,H)]
        a10 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(10))
        if (! a10.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $unify(a(7),s(1))
        if (! a7.unify(s1, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(10))
        a10 = a10.dereference();
        if (! a10.isInteger()) {
            throw new IllegalTypeException("integer", a10);
        } else {
            engine.cut(((IntegerTerm) a10).intValue());
        }
        //END inline expansion
        //START inline expansion of $unify(a(5),a(2))
        if (! a5.unify(a2, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a11 = new ListTerm(a1, a9);
        return new PRED_$merge_5(a3, a11, a6, a4, a8, cont);
    }
}

class PRED_$dummy_4_builtins$002Epl_9_2 extends PRED_$dummy_4_builtins$002Epl_9 {
    public Predicate exec(Prolog engine) {
    // '$dummy_4_builtins.pl'(A,B,C,D,E,F,G,H,I):-'$dummy_5_builtins.pl'(A,G,E,D,B,C,H,F,I)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        a7 = engine.aregs[7];
        a8 = engine.aregs[8];
        a9 = engine.aregs[9];
        cont = engine.cont;
    // '$dummy_4_builtins.pl'(A,B,C,D,E,F,G,H,I):-['$dummy_5_builtins.pl'(A,G,E,D,B,C,H,F,I)]
        return new PRED_$dummy_5_builtins$002Epl_9(a1, a7, a5, a4, a2, a3, a8, a6, a9, cont);
    }
}
