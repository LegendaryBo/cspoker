package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$consult_cls'/1</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$consult_cls_1 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol(":-", 2);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("true");
    static Predicate _$consult_cls_1_var = new PRED_$consult_cls_1_var();
    static Predicate _$consult_cls_1_var_1 = new PRED_$consult_cls_1_var_1();
    static Predicate _$consult_cls_1_1 = new PRED_$consult_cls_1_1();
    static Predicate _$consult_cls_1_2 = new PRED_$consult_cls_1_2();

    public Term arg1;

    public PRED_$consult_cls_1(Term a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_$consult_cls_1(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String toString() {
        return "$consult_cls(" + arg1 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$consult_cls_1_var, _$consult_cls_1_2, _$consult_cls_1_2, _$consult_cls_1_2, _$consult_cls_1_var, _$consult_cls_1_2);
    }
}

class PRED_$consult_cls_1_var extends PRED_$consult_cls_1 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$consult_cls_1_1, _$consult_cls_1_var_1);
    }
}

class PRED_$consult_cls_1_var_1 extends PRED_$consult_cls_1 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$consult_cls_1_2);
    }
}

class PRED_$consult_cls_1_1 extends PRED_$consult_cls_1 {
    public Predicate exec(Prolog engine) {
    // '$consult_cls'((A:-B)):-!,'$assert_consulted_clause'((A:-B))
        Term a1, a2, a3, a4;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$consult_cls'((A:-B)):-['$neck_cut','$assert_consulted_clause'((A:-B))]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s1.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a2 = args[0];
            a3 = args[1];
        } else if (a1.isVariable()){
            a2 = new VariableTerm(engine);
            a3 = new VariableTerm(engine);
            Term[] args = {a2, a3};
            ((VariableTerm) a1).bind(new StructureTerm(s1, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        Term[] y1 = {a2, a3};
        a4 = new StructureTerm(s1, y1);
        return new PRED_$assert_consulted_clause_1(a4, cont);
    }
}

class PRED_$consult_cls_1_2 extends PRED_$consult_cls_1 {
    public Predicate exec(Prolog engine) {
    // '$consult_cls'(A):-'$assert_consulted_clause'((A:-true))
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$consult_cls'(A):-['$assert_consulted_clause'((A:-true))]
        Term[] y1 = {a1, s2};
        a2 = new StructureTerm(s1, y1);
        return new PRED_$assert_consulted_clause_1(a2, cont);
    }
}
