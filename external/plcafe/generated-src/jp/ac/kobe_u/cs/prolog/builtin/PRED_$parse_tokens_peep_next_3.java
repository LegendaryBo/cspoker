package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$parse_tokens_peep_next'/3</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$parse_tokens_peep_next_3 extends Predicate {

    public Term arg1, arg2, arg3;

    public PRED_$parse_tokens_peep_next_3(Term a1, Term a2, Term a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_$parse_tokens_peep_next_3(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String toString() {
        return "$parse_tokens_peep_next(" + arg1 + "," + arg2 + "," + arg3 + ")";
    }

    public Predicate exec(Prolog engine) {
    // '$parse_tokens_peep_next'(A,B,B):-B=[A|C]
        engine.setB0();
        Term a1, a2, a3, a4;
        a1 = arg1;
        a2 = arg2;
        a3 = arg3;
    // '$parse_tokens_peep_next'(A,B,B):-['$unify'(B,[A|C])]
        if (! a2.unify(a3, engine.trail))
            return engine.fail();
        a4 = new ListTerm(a1, new VariableTerm(engine));
        //START inline expansion of $unify(a(2),a(4))
        if (! a2.unify(a4, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        return cont;
    }
}
