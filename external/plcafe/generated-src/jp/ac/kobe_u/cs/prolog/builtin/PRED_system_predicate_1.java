package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>system_predicate/1</code> defined in system.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_system_predicate_1 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("system_predicate", 1);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("true");
    static SymbolTerm s3 = SymbolTerm.makeSymbol("therwise");
    static SymbolTerm s4 = SymbolTerm.makeSymbol("fail");
    static SymbolTerm s5 = SymbolTerm.makeSymbol("false");
    static SymbolTerm s6 = SymbolTerm.makeSymbol("!");
    static SymbolTerm s7 = SymbolTerm.makeSymbol("$get_level", 1);
    static SymbolTerm s8 = SymbolTerm.makeSymbol("$neck_cut");
    static SymbolTerm s9 = SymbolTerm.makeSymbol("$cut", 1);
    static SymbolTerm s10 = SymbolTerm.makeSymbol("^", 2);
    static SymbolTerm s11 = SymbolTerm.makeSymbol(",", 2);
    static SymbolTerm s12 = SymbolTerm.makeSymbol(";", 2);
    static SymbolTerm s13 = SymbolTerm.makeSymbol("->", 2);
    static SymbolTerm s14 = SymbolTerm.makeSymbol("call", 1);
    static SymbolTerm s15 = SymbolTerm.makeSymbol("catch", 3);
    static SymbolTerm s16 = SymbolTerm.makeSymbol("throw", 1);
    static SymbolTerm s17 = SymbolTerm.makeSymbol("on_exception", 3);
    static SymbolTerm s18 = SymbolTerm.makeSymbol("raise_exception", 1);
    static SymbolTerm s19 = SymbolTerm.makeSymbol("=", 2);
    static SymbolTerm s20 = SymbolTerm.makeSymbol("$unify", 2);
    static SymbolTerm s21 = SymbolTerm.makeSymbol("\\=", 2);
    static SymbolTerm s22 = SymbolTerm.makeSymbol("$not_unifiable", 2);
    static SymbolTerm s23 = SymbolTerm.makeSymbol("var", 1);
    static SymbolTerm s24 = SymbolTerm.makeSymbol("atom", 1);
    static SymbolTerm s25 = SymbolTerm.makeSymbol("integer", 1);
    static SymbolTerm s26 = SymbolTerm.makeSymbol("float", 1);
    static SymbolTerm s27 = SymbolTerm.makeSymbol("atomic", 1);
    static SymbolTerm s28 = SymbolTerm.makeSymbol("compound", 1);
    static SymbolTerm s29 = SymbolTerm.makeSymbol("nonvar", 1);
    static SymbolTerm s30 = SymbolTerm.makeSymbol("number", 1);
    static SymbolTerm s31 = SymbolTerm.makeSymbol("java", 1);
    static SymbolTerm s32 = SymbolTerm.makeSymbol("java", 2);
    static SymbolTerm s33 = SymbolTerm.makeSymbol("closure", 1);
    static SymbolTerm s34 = SymbolTerm.makeSymbol("ground", 1);
    static SymbolTerm s35 = SymbolTerm.makeSymbol("callable", 1);
    static SymbolTerm s36 = SymbolTerm.makeSymbol("==", 2);
    static SymbolTerm s37 = SymbolTerm.makeSymbol("$equality_of_term", 2);
    static SymbolTerm s38 = SymbolTerm.makeSymbol("\\==", 2);
    static SymbolTerm s39 = SymbolTerm.makeSymbol("$inequality_of_term", 2);
    static SymbolTerm s40 = SymbolTerm.makeSymbol("@<", 2);
    static SymbolTerm s41 = SymbolTerm.makeSymbol("$before", 2);
    static SymbolTerm s42 = SymbolTerm.makeSymbol("@>", 2);
    static SymbolTerm s43 = SymbolTerm.makeSymbol("$after", 2);
    static SymbolTerm s44 = SymbolTerm.makeSymbol("@=<", 2);
    static SymbolTerm s45 = SymbolTerm.makeSymbol("$not_after", 2);
    static SymbolTerm s46 = SymbolTerm.makeSymbol("@>=", 2);
    static SymbolTerm s47 = SymbolTerm.makeSymbol("$not_before", 2);
    static SymbolTerm s48 = SymbolTerm.makeSymbol("?=", 2);
    static SymbolTerm s49 = SymbolTerm.makeSymbol("$identical_or_cannot_unify", 2);
    static SymbolTerm s50 = SymbolTerm.makeSymbol("compare", 3);
    static SymbolTerm s51 = SymbolTerm.makeSymbol("sort", 2);
    static SymbolTerm s52 = SymbolTerm.makeSymbol("keysort", 2);
    static SymbolTerm s53 = SymbolTerm.makeSymbol("merge", 3);
    static SymbolTerm s54 = SymbolTerm.makeSymbol("arg", 3);
    static SymbolTerm s55 = SymbolTerm.makeSymbol("functor", 3);
    static SymbolTerm s56 = SymbolTerm.makeSymbol("=..", 2);
    static SymbolTerm s57 = SymbolTerm.makeSymbol("$univ", 2);
    static SymbolTerm s58 = SymbolTerm.makeSymbol("copy_term", 2);
    static SymbolTerm s59 = SymbolTerm.makeSymbol("is", 2);
    static SymbolTerm s60 = SymbolTerm.makeSymbol("$abs", 2);
    static SymbolTerm s61 = SymbolTerm.makeSymbol("$asin", 2);
    static SymbolTerm s62 = SymbolTerm.makeSymbol("$acos", 2);
    static SymbolTerm s63 = SymbolTerm.makeSymbol("$atan", 2);
    static SymbolTerm s64 = SymbolTerm.makeSymbol("$bitwise_conj", 3);
    static SymbolTerm s65 = SymbolTerm.makeSymbol("$bitwise_disj", 3);
    static SymbolTerm s66 = SymbolTerm.makeSymbol("$bitwise_exclusive_or", 3);
    static SymbolTerm s67 = SymbolTerm.makeSymbol("$bitwise_neg", 2);
    static SymbolTerm s68 = SymbolTerm.makeSymbol("$ceil", 2);
    static SymbolTerm s69 = SymbolTerm.makeSymbol("$cos", 2);
    static SymbolTerm s70 = SymbolTerm.makeSymbol("$degrees", 2);
    static SymbolTerm s71 = SymbolTerm.makeSymbol("$exp", 2);
    static SymbolTerm s72 = SymbolTerm.makeSymbol("$float", 2);
    static SymbolTerm s73 = SymbolTerm.makeSymbol("$float_integer_part", 2);
    static SymbolTerm s74 = SymbolTerm.makeSymbol("$float_fractional_part", 2);
    static SymbolTerm s75 = SymbolTerm.makeSymbol("$float_quotient", 3);
    static SymbolTerm s76 = SymbolTerm.makeSymbol("$floor", 2);
    static SymbolTerm s77 = SymbolTerm.makeSymbol("$int_quotient", 3);
    static SymbolTerm s78 = SymbolTerm.makeSymbol("$log", 2);
    static SymbolTerm s79 = SymbolTerm.makeSymbol("$max", 3);
    static SymbolTerm s80 = SymbolTerm.makeSymbol("$min", 3);
    static SymbolTerm s81 = SymbolTerm.makeSymbol("$minus", 3);
    static SymbolTerm s82 = SymbolTerm.makeSymbol("$mod", 3);
    static SymbolTerm s83 = SymbolTerm.makeSymbol("$multi", 3);
    static SymbolTerm s84 = SymbolTerm.makeSymbol("$plus", 3);
    static SymbolTerm s85 = SymbolTerm.makeSymbol("$pow", 3);
    static SymbolTerm s86 = SymbolTerm.makeSymbol("$radians", 2);
    static SymbolTerm s87 = SymbolTerm.makeSymbol("$rint", 2);
    static SymbolTerm s88 = SymbolTerm.makeSymbol("$round", 2);
    static SymbolTerm s89 = SymbolTerm.makeSymbol("$shift_left", 3);
    static SymbolTerm s90 = SymbolTerm.makeSymbol("$shift_right", 3);
    static SymbolTerm s91 = SymbolTerm.makeSymbol("$sign", 2);
    static SymbolTerm s92 = SymbolTerm.makeSymbol("$sin", 2);
    static SymbolTerm s93 = SymbolTerm.makeSymbol("$sqrt", 2);
    static SymbolTerm s94 = SymbolTerm.makeSymbol("$tan", 2);
    static SymbolTerm s95 = SymbolTerm.makeSymbol("$truncate", 2);
    static SymbolTerm s96 = SymbolTerm.makeSymbol("=:=", 2);
    static SymbolTerm s97 = SymbolTerm.makeSymbol("$arith_equal", 2);
    static SymbolTerm s98 = SymbolTerm.makeSymbol("=\\=", 2);
    static SymbolTerm s99 = SymbolTerm.makeSymbol("$arith_not_equal", 2);
    static SymbolTerm s100 = SymbolTerm.makeSymbol("<", 2);
    static SymbolTerm s101 = SymbolTerm.makeSymbol("$less_than", 2);
    static SymbolTerm s102 = SymbolTerm.makeSymbol("=<", 2);
    static SymbolTerm s103 = SymbolTerm.makeSymbol("$less_or_equal", 2);
    static SymbolTerm s104 = SymbolTerm.makeSymbol(">", 2);
    static SymbolTerm s105 = SymbolTerm.makeSymbol("$greater_than", 2);
    static SymbolTerm s106 = SymbolTerm.makeSymbol(">=", 2);
    static SymbolTerm s107 = SymbolTerm.makeSymbol("$greater_or_equal", 2);
    static SymbolTerm s108 = SymbolTerm.makeSymbol("clause", 2);
    static SymbolTerm s109 = SymbolTerm.makeSymbol("initialization", 2);
    static SymbolTerm s110 = SymbolTerm.makeSymbol("$new_indexing_hash", 3);
    static SymbolTerm s111 = SymbolTerm.makeSymbol("assert", 1);
    static SymbolTerm s112 = SymbolTerm.makeSymbol("assertz", 1);
    static SymbolTerm s113 = SymbolTerm.makeSymbol("asserta", 1);
    static SymbolTerm s114 = SymbolTerm.makeSymbol("retract", 1);
    static SymbolTerm s115 = SymbolTerm.makeSymbol("abolish", 1);
    static SymbolTerm s116 = SymbolTerm.makeSymbol("retractall", 1);
    static SymbolTerm s117 = SymbolTerm.makeSymbol("findall", 3);
    static SymbolTerm s118 = SymbolTerm.makeSymbol("bagof", 3);
    static SymbolTerm s119 = SymbolTerm.makeSymbol("setof", 3);
    static SymbolTerm s120 = SymbolTerm.makeSymbol("current_input", 1);
    static SymbolTerm s121 = SymbolTerm.makeSymbol("current_output", 1);
    static SymbolTerm s122 = SymbolTerm.makeSymbol("set_input", 1);
    static SymbolTerm s123 = SymbolTerm.makeSymbol("set_output", 1);
    static SymbolTerm s124 = SymbolTerm.makeSymbol("open", 3);
    static SymbolTerm s125 = SymbolTerm.makeSymbol("open", 4);
    static SymbolTerm s126 = SymbolTerm.makeSymbol("close", 1);
    static SymbolTerm s127 = SymbolTerm.makeSymbol("close", 2);
    static SymbolTerm s128 = SymbolTerm.makeSymbol("flush_output", 1);
    static SymbolTerm s129 = SymbolTerm.makeSymbol("flush_output");
    static SymbolTerm s130 = SymbolTerm.makeSymbol("stream_property", 2);
    static SymbolTerm s131 = SymbolTerm.makeSymbol("get_char", 1);
    static SymbolTerm s132 = SymbolTerm.makeSymbol("get_char", 2);
    static SymbolTerm s133 = SymbolTerm.makeSymbol("get_code", 1);
    static SymbolTerm s134 = SymbolTerm.makeSymbol("get_code", 2);
    static SymbolTerm s135 = SymbolTerm.makeSymbol("peek_char", 1);
    static SymbolTerm s136 = SymbolTerm.makeSymbol("peek_char", 2);
    static SymbolTerm s137 = SymbolTerm.makeSymbol("peek_code", 1);
    static SymbolTerm s138 = SymbolTerm.makeSymbol("peek_code", 2);
    static SymbolTerm s139 = SymbolTerm.makeSymbol("put_char", 1);
    static SymbolTerm s140 = SymbolTerm.makeSymbol("put_char", 2);
    static SymbolTerm s141 = SymbolTerm.makeSymbol("put_code", 1);
    static SymbolTerm s142 = SymbolTerm.makeSymbol("put_code", 2);
    static SymbolTerm s143 = SymbolTerm.makeSymbol("nl");
    static SymbolTerm s144 = SymbolTerm.makeSymbol("nl", 1);
    static SymbolTerm s145 = SymbolTerm.makeSymbol("get0", 1);
    static SymbolTerm s146 = SymbolTerm.makeSymbol("get0", 2);
    static SymbolTerm s147 = SymbolTerm.makeSymbol("get", 1);
    static SymbolTerm s148 = SymbolTerm.makeSymbol("get", 2);
    static SymbolTerm s149 = SymbolTerm.makeSymbol("put", 1);
    static SymbolTerm s150 = SymbolTerm.makeSymbol("put", 2);
    static SymbolTerm s151 = SymbolTerm.makeSymbol("tab", 1);
    static SymbolTerm s152 = SymbolTerm.makeSymbol("tab", 2);
    static SymbolTerm s153 = SymbolTerm.makeSymbol("skip", 1);
    static SymbolTerm s154 = SymbolTerm.makeSymbol("skip", 2);
    static SymbolTerm s155 = SymbolTerm.makeSymbol("get_byte", 1);
    static SymbolTerm s156 = SymbolTerm.makeSymbol("get_byte", 2);
    static SymbolTerm s157 = SymbolTerm.makeSymbol("peek_byte", 1);
    static SymbolTerm s158 = SymbolTerm.makeSymbol("peek_byte", 2);
    static SymbolTerm s159 = SymbolTerm.makeSymbol("put_byte", 1);
    static SymbolTerm s160 = SymbolTerm.makeSymbol("put_byte", 2);
    static SymbolTerm s161 = SymbolTerm.makeSymbol("read", 1);
    static SymbolTerm s162 = SymbolTerm.makeSymbol("read", 2);
    static SymbolTerm s163 = SymbolTerm.makeSymbol("read_with_variables", 2);
    static SymbolTerm s164 = SymbolTerm.makeSymbol("read_with_variables", 3);
    static SymbolTerm s165 = SymbolTerm.makeSymbol("read_line", 1);
    static SymbolTerm s166 = SymbolTerm.makeSymbol("read_line", 2);
    static SymbolTerm s167 = SymbolTerm.makeSymbol("write", 1);
    static SymbolTerm s168 = SymbolTerm.makeSymbol("write", 2);
    static SymbolTerm s169 = SymbolTerm.makeSymbol("writeq", 1);
    static SymbolTerm s170 = SymbolTerm.makeSymbol("writeq", 2);
    static SymbolTerm s171 = SymbolTerm.makeSymbol("write_canonical", 1);
    static SymbolTerm s172 = SymbolTerm.makeSymbol("write_canonical", 2);
    static SymbolTerm s173 = SymbolTerm.makeSymbol("write_term", 2);
    static SymbolTerm s174 = SymbolTerm.makeSymbol("write_term", 3);
    static SymbolTerm s175 = SymbolTerm.makeSymbol("op", 3);
    static SymbolTerm s176 = SymbolTerm.makeSymbol("current_op", 3);
    static SymbolTerm s177 = SymbolTerm.makeSymbol("\\+", 1);
    static SymbolTerm s178 = SymbolTerm.makeSymbol("once", 1);
    static SymbolTerm s179 = SymbolTerm.makeSymbol("repeat");
    static SymbolTerm s180 = SymbolTerm.makeSymbol("atom_length", 2);
    static SymbolTerm s181 = SymbolTerm.makeSymbol("atom_concat", 3);
    static SymbolTerm s182 = SymbolTerm.makeSymbol("sub_atom", 5);
    static SymbolTerm s183 = SymbolTerm.makeSymbol("atom_chars", 2);
    static SymbolTerm s184 = SymbolTerm.makeSymbol("atom_codes", 2);
    static SymbolTerm s185 = SymbolTerm.makeSymbol("char_code", 2);
    static SymbolTerm s186 = SymbolTerm.makeSymbol("number_chars", 2);
    static SymbolTerm s187 = SymbolTerm.makeSymbol("number_codes", 2);
    static SymbolTerm s188 = SymbolTerm.makeSymbol("name", 2);
    static SymbolTerm s189 = SymbolTerm.makeSymbol("set_prolog_flag", 2);
    static SymbolTerm s190 = SymbolTerm.makeSymbol("current_prolog_flag", 2);
    static SymbolTerm s191 = SymbolTerm.makeSymbol("halt");
    static SymbolTerm s192 = SymbolTerm.makeSymbol("halt", 1);
    static SymbolTerm s193 = SymbolTerm.makeSymbol("abort");
    static SymbolTerm s194 = SymbolTerm.makeSymbol("C", 3);
    static SymbolTerm s195 = SymbolTerm.makeSymbol("expand_term", 2);
    static SymbolTerm s196 = SymbolTerm.makeSymbol("new_hash", 1);
    static SymbolTerm s197 = SymbolTerm.makeSymbol("new_hash", 2);
    static SymbolTerm s198 = SymbolTerm.makeSymbol("hash_clear", 1);
    static SymbolTerm s199 = SymbolTerm.makeSymbol("hash_contains_key", 2);
    static SymbolTerm s200 = SymbolTerm.makeSymbol("hash_get", 3);
    static SymbolTerm s201 = SymbolTerm.makeSymbol("hash_is_empty", 1);
    static SymbolTerm s202 = SymbolTerm.makeSymbol("hash_keys", 2);
    static SymbolTerm s203 = SymbolTerm.makeSymbol("hash_map", 2);
    static SymbolTerm s204 = SymbolTerm.makeSymbol("hash_put", 3);
    static SymbolTerm s205 = SymbolTerm.makeSymbol("hash_remove", 2);
    static SymbolTerm s206 = SymbolTerm.makeSymbol("hash_size", 2);
    static SymbolTerm s207 = SymbolTerm.makeSymbol("$get_hash_manager", 1);
    static SymbolTerm s208 = SymbolTerm.makeSymbol("java_constructor0", 2);
    static SymbolTerm s209 = SymbolTerm.makeSymbol("java_constructor", 2);
    static SymbolTerm s210 = SymbolTerm.makeSymbol("java_declared_constructor0", 2);
    static SymbolTerm s211 = SymbolTerm.makeSymbol("java_declared_constructor", 2);
    static SymbolTerm s212 = SymbolTerm.makeSymbol("java_method0", 3);
    static SymbolTerm s213 = SymbolTerm.makeSymbol("java_method", 3);
    static SymbolTerm s214 = SymbolTerm.makeSymbol("java_declared_method0", 3);
    static SymbolTerm s215 = SymbolTerm.makeSymbol("java_declared_method", 3);
    static SymbolTerm s216 = SymbolTerm.makeSymbol("java_get_field0", 3);
    static SymbolTerm s217 = SymbolTerm.makeSymbol("java_get_field", 3);
    static SymbolTerm s218 = SymbolTerm.makeSymbol("java_get_declared_field0", 3);
    static SymbolTerm s219 = SymbolTerm.makeSymbol("java_get_declared_field", 3);
    static SymbolTerm s220 = SymbolTerm.makeSymbol("java_set_field0", 3);
    static SymbolTerm s221 = SymbolTerm.makeSymbol("java_set_field", 3);
    static SymbolTerm s222 = SymbolTerm.makeSymbol("java_set_declared_field0", 3);
    static SymbolTerm s223 = SymbolTerm.makeSymbol("java_set_declared_field", 3);
    static SymbolTerm s224 = SymbolTerm.makeSymbol("java_conversion", 2);
    static SymbolTerm s225 = SymbolTerm.makeSymbol("cafeteria");
    static SymbolTerm s226 = SymbolTerm.makeSymbol("consult", 1);
    static SymbolTerm s227 = SymbolTerm.makeSymbol("trace");
    static SymbolTerm s228 = SymbolTerm.makeSymbol("notrace");
    static SymbolTerm s229 = SymbolTerm.makeSymbol("debug");
    static SymbolTerm s230 = SymbolTerm.makeSymbol("nodebug");
    static SymbolTerm s231 = SymbolTerm.makeSymbol("leash", 1);
    static SymbolTerm s232 = SymbolTerm.makeSymbol("spy", 1);
    static SymbolTerm s233 = SymbolTerm.makeSymbol("nospy", 1);
    static SymbolTerm s234 = SymbolTerm.makeSymbol("nospyall");
    static SymbolTerm s235 = SymbolTerm.makeSymbol("listing");
    static SymbolTerm s236 = SymbolTerm.makeSymbol("listing", 1);
    static SymbolTerm s237 = SymbolTerm.makeSymbol("length", 2);
    static SymbolTerm s238 = SymbolTerm.makeSymbol("numbervars", 3);
    static SymbolTerm s239 = SymbolTerm.makeSymbol("statistics", 2);
    static SymbolTerm s240 = SymbolTerm.makeSymbol("member", 2);
    static SymbolTerm s241 = SymbolTerm.makeSymbol("max_list", 2);
    static SymbolTerm s242 = SymbolTerm.makeSymbol("max_list", 3);
    static SymbolTerm s243 = SymbolTerm.makeSymbol("sumlist", 2);
    static SymbolTerm s244 = SymbolTerm.makeSymbol("sumlist", 3);
    static Predicate _fail_0 = new PRED_fail_0();
    static Predicate _system_predicate_1_var = new PRED_system_predicate_1_var();
    static Predicate _system_predicate_1_var_1 = new PRED_system_predicate_1_var_1();
    static Predicate _system_predicate_1_var_2 = new PRED_system_predicate_1_var_2();
    static Predicate _system_predicate_1_var_3 = new PRED_system_predicate_1_var_3();
    static Predicate _system_predicate_1_var_4 = new PRED_system_predicate_1_var_4();
    static Predicate _system_predicate_1_var_5 = new PRED_system_predicate_1_var_5();
    static Predicate _system_predicate_1_var_6 = new PRED_system_predicate_1_var_6();
    static Predicate _system_predicate_1_var_7 = new PRED_system_predicate_1_var_7();
    static Predicate _system_predicate_1_var_8 = new PRED_system_predicate_1_var_8();
    static Predicate _system_predicate_1_var_9 = new PRED_system_predicate_1_var_9();
    static Predicate _system_predicate_1_var_10 = new PRED_system_predicate_1_var_10();
    static Predicate _system_predicate_1_var_11 = new PRED_system_predicate_1_var_11();
    static Predicate _system_predicate_1_var_12 = new PRED_system_predicate_1_var_12();
    static Predicate _system_predicate_1_var_13 = new PRED_system_predicate_1_var_13();
    static Predicate _system_predicate_1_var_14 = new PRED_system_predicate_1_var_14();
    static Predicate _system_predicate_1_var_15 = new PRED_system_predicate_1_var_15();
    static Predicate _system_predicate_1_var_16 = new PRED_system_predicate_1_var_16();
    static Predicate _system_predicate_1_var_17 = new PRED_system_predicate_1_var_17();
    static Predicate _system_predicate_1_var_18 = new PRED_system_predicate_1_var_18();
    static Predicate _system_predicate_1_var_19 = new PRED_system_predicate_1_var_19();
    static Predicate _system_predicate_1_var_20 = new PRED_system_predicate_1_var_20();
    static Predicate _system_predicate_1_var_21 = new PRED_system_predicate_1_var_21();
    static Predicate _system_predicate_1_var_22 = new PRED_system_predicate_1_var_22();
    static Predicate _system_predicate_1_var_23 = new PRED_system_predicate_1_var_23();
    static Predicate _system_predicate_1_var_24 = new PRED_system_predicate_1_var_24();
    static Predicate _system_predicate_1_var_25 = new PRED_system_predicate_1_var_25();
    static Predicate _system_predicate_1_var_26 = new PRED_system_predicate_1_var_26();
    static Predicate _system_predicate_1_var_27 = new PRED_system_predicate_1_var_27();
    static Predicate _system_predicate_1_var_28 = new PRED_system_predicate_1_var_28();
    static Predicate _system_predicate_1_var_29 = new PRED_system_predicate_1_var_29();
    static Predicate _system_predicate_1_var_30 = new PRED_system_predicate_1_var_30();
    static Predicate _system_predicate_1_var_31 = new PRED_system_predicate_1_var_31();
    static Predicate _system_predicate_1_var_32 = new PRED_system_predicate_1_var_32();
    static Predicate _system_predicate_1_var_33 = new PRED_system_predicate_1_var_33();
    static Predicate _system_predicate_1_var_34 = new PRED_system_predicate_1_var_34();
    static Predicate _system_predicate_1_var_35 = new PRED_system_predicate_1_var_35();
    static Predicate _system_predicate_1_var_36 = new PRED_system_predicate_1_var_36();
    static Predicate _system_predicate_1_var_37 = new PRED_system_predicate_1_var_37();
    static Predicate _system_predicate_1_var_38 = new PRED_system_predicate_1_var_38();
    static Predicate _system_predicate_1_var_39 = new PRED_system_predicate_1_var_39();
    static Predicate _system_predicate_1_var_40 = new PRED_system_predicate_1_var_40();
    static Predicate _system_predicate_1_var_41 = new PRED_system_predicate_1_var_41();
    static Predicate _system_predicate_1_var_42 = new PRED_system_predicate_1_var_42();
    static Predicate _system_predicate_1_var_43 = new PRED_system_predicate_1_var_43();
    static Predicate _system_predicate_1_var_44 = new PRED_system_predicate_1_var_44();
    static Predicate _system_predicate_1_var_45 = new PRED_system_predicate_1_var_45();
    static Predicate _system_predicate_1_var_46 = new PRED_system_predicate_1_var_46();
    static Predicate _system_predicate_1_var_47 = new PRED_system_predicate_1_var_47();
    static Predicate _system_predicate_1_var_48 = new PRED_system_predicate_1_var_48();
    static Predicate _system_predicate_1_var_49 = new PRED_system_predicate_1_var_49();
    static Predicate _system_predicate_1_var_50 = new PRED_system_predicate_1_var_50();
    static Predicate _system_predicate_1_var_51 = new PRED_system_predicate_1_var_51();
    static Predicate _system_predicate_1_var_52 = new PRED_system_predicate_1_var_52();
    static Predicate _system_predicate_1_var_53 = new PRED_system_predicate_1_var_53();
    static Predicate _system_predicate_1_var_54 = new PRED_system_predicate_1_var_54();
    static Predicate _system_predicate_1_var_55 = new PRED_system_predicate_1_var_55();
    static Predicate _system_predicate_1_var_56 = new PRED_system_predicate_1_var_56();
    static Predicate _system_predicate_1_var_57 = new PRED_system_predicate_1_var_57();
    static Predicate _system_predicate_1_var_58 = new PRED_system_predicate_1_var_58();
    static Predicate _system_predicate_1_var_59 = new PRED_system_predicate_1_var_59();
    static Predicate _system_predicate_1_var_60 = new PRED_system_predicate_1_var_60();
    static Predicate _system_predicate_1_var_61 = new PRED_system_predicate_1_var_61();
    static Predicate _system_predicate_1_var_62 = new PRED_system_predicate_1_var_62();
    static Predicate _system_predicate_1_var_63 = new PRED_system_predicate_1_var_63();
    static Predicate _system_predicate_1_var_64 = new PRED_system_predicate_1_var_64();
    static Predicate _system_predicate_1_var_65 = new PRED_system_predicate_1_var_65();
    static Predicate _system_predicate_1_var_66 = new PRED_system_predicate_1_var_66();
    static Predicate _system_predicate_1_var_67 = new PRED_system_predicate_1_var_67();
    static Predicate _system_predicate_1_var_68 = new PRED_system_predicate_1_var_68();
    static Predicate _system_predicate_1_var_69 = new PRED_system_predicate_1_var_69();
    static Predicate _system_predicate_1_var_70 = new PRED_system_predicate_1_var_70();
    static Predicate _system_predicate_1_var_71 = new PRED_system_predicate_1_var_71();
    static Predicate _system_predicate_1_var_72 = new PRED_system_predicate_1_var_72();
    static Predicate _system_predicate_1_var_73 = new PRED_system_predicate_1_var_73();
    static Predicate _system_predicate_1_var_74 = new PRED_system_predicate_1_var_74();
    static Predicate _system_predicate_1_var_75 = new PRED_system_predicate_1_var_75();
    static Predicate _system_predicate_1_var_76 = new PRED_system_predicate_1_var_76();
    static Predicate _system_predicate_1_var_77 = new PRED_system_predicate_1_var_77();
    static Predicate _system_predicate_1_var_78 = new PRED_system_predicate_1_var_78();
    static Predicate _system_predicate_1_var_79 = new PRED_system_predicate_1_var_79();
    static Predicate _system_predicate_1_var_80 = new PRED_system_predicate_1_var_80();
    static Predicate _system_predicate_1_var_81 = new PRED_system_predicate_1_var_81();
    static Predicate _system_predicate_1_var_82 = new PRED_system_predicate_1_var_82();
    static Predicate _system_predicate_1_var_83 = new PRED_system_predicate_1_var_83();
    static Predicate _system_predicate_1_var_84 = new PRED_system_predicate_1_var_84();
    static Predicate _system_predicate_1_var_85 = new PRED_system_predicate_1_var_85();
    static Predicate _system_predicate_1_var_86 = new PRED_system_predicate_1_var_86();
    static Predicate _system_predicate_1_var_87 = new PRED_system_predicate_1_var_87();
    static Predicate _system_predicate_1_var_88 = new PRED_system_predicate_1_var_88();
    static Predicate _system_predicate_1_var_89 = new PRED_system_predicate_1_var_89();
    static Predicate _system_predicate_1_var_90 = new PRED_system_predicate_1_var_90();
    static Predicate _system_predicate_1_var_91 = new PRED_system_predicate_1_var_91();
    static Predicate _system_predicate_1_var_92 = new PRED_system_predicate_1_var_92();
    static Predicate _system_predicate_1_var_93 = new PRED_system_predicate_1_var_93();
    static Predicate _system_predicate_1_var_94 = new PRED_system_predicate_1_var_94();
    static Predicate _system_predicate_1_var_95 = new PRED_system_predicate_1_var_95();
    static Predicate _system_predicate_1_var_96 = new PRED_system_predicate_1_var_96();
    static Predicate _system_predicate_1_var_97 = new PRED_system_predicate_1_var_97();
    static Predicate _system_predicate_1_var_98 = new PRED_system_predicate_1_var_98();
    static Predicate _system_predicate_1_var_99 = new PRED_system_predicate_1_var_99();
    static Predicate _system_predicate_1_var_100 = new PRED_system_predicate_1_var_100();
    static Predicate _system_predicate_1_var_101 = new PRED_system_predicate_1_var_101();
    static Predicate _system_predicate_1_var_102 = new PRED_system_predicate_1_var_102();
    static Predicate _system_predicate_1_var_103 = new PRED_system_predicate_1_var_103();
    static Predicate _system_predicate_1_var_104 = new PRED_system_predicate_1_var_104();
    static Predicate _system_predicate_1_var_105 = new PRED_system_predicate_1_var_105();
    static Predicate _system_predicate_1_var_106 = new PRED_system_predicate_1_var_106();
    static Predicate _system_predicate_1_var_107 = new PRED_system_predicate_1_var_107();
    static Predicate _system_predicate_1_var_108 = new PRED_system_predicate_1_var_108();
    static Predicate _system_predicate_1_var_109 = new PRED_system_predicate_1_var_109();
    static Predicate _system_predicate_1_var_110 = new PRED_system_predicate_1_var_110();
    static Predicate _system_predicate_1_var_111 = new PRED_system_predicate_1_var_111();
    static Predicate _system_predicate_1_var_112 = new PRED_system_predicate_1_var_112();
    static Predicate _system_predicate_1_var_113 = new PRED_system_predicate_1_var_113();
    static Predicate _system_predicate_1_var_114 = new PRED_system_predicate_1_var_114();
    static Predicate _system_predicate_1_var_115 = new PRED_system_predicate_1_var_115();
    static Predicate _system_predicate_1_var_116 = new PRED_system_predicate_1_var_116();
    static Predicate _system_predicate_1_var_117 = new PRED_system_predicate_1_var_117();
    static Predicate _system_predicate_1_var_118 = new PRED_system_predicate_1_var_118();
    static Predicate _system_predicate_1_var_119 = new PRED_system_predicate_1_var_119();
    static Predicate _system_predicate_1_var_120 = new PRED_system_predicate_1_var_120();
    static Predicate _system_predicate_1_var_121 = new PRED_system_predicate_1_var_121();
    static Predicate _system_predicate_1_var_122 = new PRED_system_predicate_1_var_122();
    static Predicate _system_predicate_1_var_123 = new PRED_system_predicate_1_var_123();
    static Predicate _system_predicate_1_var_124 = new PRED_system_predicate_1_var_124();
    static Predicate _system_predicate_1_var_125 = new PRED_system_predicate_1_var_125();
    static Predicate _system_predicate_1_var_126 = new PRED_system_predicate_1_var_126();
    static Predicate _system_predicate_1_var_127 = new PRED_system_predicate_1_var_127();
    static Predicate _system_predicate_1_var_128 = new PRED_system_predicate_1_var_128();
    static Predicate _system_predicate_1_var_129 = new PRED_system_predicate_1_var_129();
    static Predicate _system_predicate_1_var_130 = new PRED_system_predicate_1_var_130();
    static Predicate _system_predicate_1_var_131 = new PRED_system_predicate_1_var_131();
    static Predicate _system_predicate_1_var_132 = new PRED_system_predicate_1_var_132();
    static Predicate _system_predicate_1_var_133 = new PRED_system_predicate_1_var_133();
    static Predicate _system_predicate_1_var_134 = new PRED_system_predicate_1_var_134();
    static Predicate _system_predicate_1_var_135 = new PRED_system_predicate_1_var_135();
    static Predicate _system_predicate_1_var_136 = new PRED_system_predicate_1_var_136();
    static Predicate _system_predicate_1_var_137 = new PRED_system_predicate_1_var_137();
    static Predicate _system_predicate_1_var_138 = new PRED_system_predicate_1_var_138();
    static Predicate _system_predicate_1_var_139 = new PRED_system_predicate_1_var_139();
    static Predicate _system_predicate_1_var_140 = new PRED_system_predicate_1_var_140();
    static Predicate _system_predicate_1_var_141 = new PRED_system_predicate_1_var_141();
    static Predicate _system_predicate_1_var_142 = new PRED_system_predicate_1_var_142();
    static Predicate _system_predicate_1_var_143 = new PRED_system_predicate_1_var_143();
    static Predicate _system_predicate_1_var_144 = new PRED_system_predicate_1_var_144();
    static Predicate _system_predicate_1_var_145 = new PRED_system_predicate_1_var_145();
    static Predicate _system_predicate_1_var_146 = new PRED_system_predicate_1_var_146();
    static Predicate _system_predicate_1_var_147 = new PRED_system_predicate_1_var_147();
    static Predicate _system_predicate_1_var_148 = new PRED_system_predicate_1_var_148();
    static Predicate _system_predicate_1_var_149 = new PRED_system_predicate_1_var_149();
    static Predicate _system_predicate_1_var_150 = new PRED_system_predicate_1_var_150();
    static Predicate _system_predicate_1_var_151 = new PRED_system_predicate_1_var_151();
    static Predicate _system_predicate_1_var_152 = new PRED_system_predicate_1_var_152();
    static Predicate _system_predicate_1_var_153 = new PRED_system_predicate_1_var_153();
    static Predicate _system_predicate_1_var_154 = new PRED_system_predicate_1_var_154();
    static Predicate _system_predicate_1_var_155 = new PRED_system_predicate_1_var_155();
    static Predicate _system_predicate_1_var_156 = new PRED_system_predicate_1_var_156();
    static Predicate _system_predicate_1_var_157 = new PRED_system_predicate_1_var_157();
    static Predicate _system_predicate_1_var_158 = new PRED_system_predicate_1_var_158();
    static Predicate _system_predicate_1_var_159 = new PRED_system_predicate_1_var_159();
    static Predicate _system_predicate_1_var_160 = new PRED_system_predicate_1_var_160();
    static Predicate _system_predicate_1_var_161 = new PRED_system_predicate_1_var_161();
    static Predicate _system_predicate_1_var_162 = new PRED_system_predicate_1_var_162();
    static Predicate _system_predicate_1_var_163 = new PRED_system_predicate_1_var_163();
    static Predicate _system_predicate_1_var_164 = new PRED_system_predicate_1_var_164();
    static Predicate _system_predicate_1_var_165 = new PRED_system_predicate_1_var_165();
    static Predicate _system_predicate_1_var_166 = new PRED_system_predicate_1_var_166();
    static Predicate _system_predicate_1_var_167 = new PRED_system_predicate_1_var_167();
    static Predicate _system_predicate_1_var_168 = new PRED_system_predicate_1_var_168();
    static Predicate _system_predicate_1_var_169 = new PRED_system_predicate_1_var_169();
    static Predicate _system_predicate_1_var_170 = new PRED_system_predicate_1_var_170();
    static Predicate _system_predicate_1_var_171 = new PRED_system_predicate_1_var_171();
    static Predicate _system_predicate_1_var_172 = new PRED_system_predicate_1_var_172();
    static Predicate _system_predicate_1_var_173 = new PRED_system_predicate_1_var_173();
    static Predicate _system_predicate_1_var_174 = new PRED_system_predicate_1_var_174();
    static Predicate _system_predicate_1_var_175 = new PRED_system_predicate_1_var_175();
    static Predicate _system_predicate_1_var_176 = new PRED_system_predicate_1_var_176();
    static Predicate _system_predicate_1_var_177 = new PRED_system_predicate_1_var_177();
    static Predicate _system_predicate_1_var_178 = new PRED_system_predicate_1_var_178();
    static Predicate _system_predicate_1_var_179 = new PRED_system_predicate_1_var_179();
    static Predicate _system_predicate_1_var_180 = new PRED_system_predicate_1_var_180();
    static Predicate _system_predicate_1_var_181 = new PRED_system_predicate_1_var_181();
    static Predicate _system_predicate_1_var_182 = new PRED_system_predicate_1_var_182();
    static Predicate _system_predicate_1_var_183 = new PRED_system_predicate_1_var_183();
    static Predicate _system_predicate_1_var_184 = new PRED_system_predicate_1_var_184();
    static Predicate _system_predicate_1_var_185 = new PRED_system_predicate_1_var_185();
    static Predicate _system_predicate_1_var_186 = new PRED_system_predicate_1_var_186();
    static Predicate _system_predicate_1_var_187 = new PRED_system_predicate_1_var_187();
    static Predicate _system_predicate_1_var_188 = new PRED_system_predicate_1_var_188();
    static Predicate _system_predicate_1_var_189 = new PRED_system_predicate_1_var_189();
    static Predicate _system_predicate_1_var_190 = new PRED_system_predicate_1_var_190();
    static Predicate _system_predicate_1_var_191 = new PRED_system_predicate_1_var_191();
    static Predicate _system_predicate_1_var_192 = new PRED_system_predicate_1_var_192();
    static Predicate _system_predicate_1_var_193 = new PRED_system_predicate_1_var_193();
    static Predicate _system_predicate_1_var_194 = new PRED_system_predicate_1_var_194();
    static Predicate _system_predicate_1_var_195 = new PRED_system_predicate_1_var_195();
    static Predicate _system_predicate_1_var_196 = new PRED_system_predicate_1_var_196();
    static Predicate _system_predicate_1_var_197 = new PRED_system_predicate_1_var_197();
    static Predicate _system_predicate_1_var_198 = new PRED_system_predicate_1_var_198();
    static Predicate _system_predicate_1_var_199 = new PRED_system_predicate_1_var_199();
    static Predicate _system_predicate_1_var_200 = new PRED_system_predicate_1_var_200();
    static Predicate _system_predicate_1_var_201 = new PRED_system_predicate_1_var_201();
    static Predicate _system_predicate_1_var_202 = new PRED_system_predicate_1_var_202();
    static Predicate _system_predicate_1_var_203 = new PRED_system_predicate_1_var_203();
    static Predicate _system_predicate_1_var_204 = new PRED_system_predicate_1_var_204();
    static Predicate _system_predicate_1_var_205 = new PRED_system_predicate_1_var_205();
    static Predicate _system_predicate_1_var_206 = new PRED_system_predicate_1_var_206();
    static Predicate _system_predicate_1_var_207 = new PRED_system_predicate_1_var_207();
    static Predicate _system_predicate_1_var_208 = new PRED_system_predicate_1_var_208();
    static Predicate _system_predicate_1_var_209 = new PRED_system_predicate_1_var_209();
    static Predicate _system_predicate_1_var_210 = new PRED_system_predicate_1_var_210();
    static Predicate _system_predicate_1_var_211 = new PRED_system_predicate_1_var_211();
    static Predicate _system_predicate_1_var_212 = new PRED_system_predicate_1_var_212();
    static Predicate _system_predicate_1_var_213 = new PRED_system_predicate_1_var_213();
    static Predicate _system_predicate_1_var_214 = new PRED_system_predicate_1_var_214();
    static Predicate _system_predicate_1_var_215 = new PRED_system_predicate_1_var_215();
    static Predicate _system_predicate_1_var_216 = new PRED_system_predicate_1_var_216();
    static Predicate _system_predicate_1_var_217 = new PRED_system_predicate_1_var_217();
    static Predicate _system_predicate_1_var_218 = new PRED_system_predicate_1_var_218();
    static Predicate _system_predicate_1_var_219 = new PRED_system_predicate_1_var_219();
    static Predicate _system_predicate_1_var_220 = new PRED_system_predicate_1_var_220();
    static Predicate _system_predicate_1_var_221 = new PRED_system_predicate_1_var_221();
    static Predicate _system_predicate_1_var_222 = new PRED_system_predicate_1_var_222();
    static Predicate _system_predicate_1_var_223 = new PRED_system_predicate_1_var_223();
    static Predicate _system_predicate_1_var_224 = new PRED_system_predicate_1_var_224();
    static Predicate _system_predicate_1_var_225 = new PRED_system_predicate_1_var_225();
    static Predicate _system_predicate_1_var_226 = new PRED_system_predicate_1_var_226();
    static Predicate _system_predicate_1_var_227 = new PRED_system_predicate_1_var_227();
    static Predicate _system_predicate_1_var_228 = new PRED_system_predicate_1_var_228();
    static Predicate _system_predicate_1_var_229 = new PRED_system_predicate_1_var_229();
    static Predicate _system_predicate_1_var_230 = new PRED_system_predicate_1_var_230();
    static Predicate _system_predicate_1_var_231 = new PRED_system_predicate_1_var_231();
    static Predicate _system_predicate_1_var_232 = new PRED_system_predicate_1_var_232();
    static Predicate _system_predicate_1_var_233 = new PRED_system_predicate_1_var_233();
    static Predicate _system_predicate_1_var_234 = new PRED_system_predicate_1_var_234();
    static Predicate _system_predicate_1_var_235 = new PRED_system_predicate_1_var_235();
    static Predicate _system_predicate_1_var_236 = new PRED_system_predicate_1_var_236();
    static Predicate _system_predicate_1_var_237 = new PRED_system_predicate_1_var_237();
    static Predicate _system_predicate_1_var_238 = new PRED_system_predicate_1_var_238();
    static Predicate _system_predicate_1_var_239 = new PRED_system_predicate_1_var_239();
    static Predicate _system_predicate_1_var_240 = new PRED_system_predicate_1_var_240();
    static Predicate _system_predicate_1_var_241 = new PRED_system_predicate_1_var_241();
    static Predicate _system_predicate_1_var_242 = new PRED_system_predicate_1_var_242();
    static Predicate _system_predicate_1_var_243 = new PRED_system_predicate_1_var_243();
    static Predicate _system_predicate_1_con = new PRED_system_predicate_1_con();
    static Predicate _system_predicate_1_str = new PRED_system_predicate_1_str();
    static Predicate _system_predicate_1_1 = new PRED_system_predicate_1_1();
    static Predicate _system_predicate_1_2 = new PRED_system_predicate_1_2();
    static Predicate _system_predicate_1_3 = new PRED_system_predicate_1_3();
    static Predicate _system_predicate_1_4 = new PRED_system_predicate_1_4();
    static Predicate _system_predicate_1_5 = new PRED_system_predicate_1_5();
    static Predicate _system_predicate_1_6 = new PRED_system_predicate_1_6();
    static Predicate _system_predicate_1_7 = new PRED_system_predicate_1_7();
    static Predicate _system_predicate_1_8 = new PRED_system_predicate_1_8();
    static Predicate _system_predicate_1_9 = new PRED_system_predicate_1_9();
    static Predicate _system_predicate_1_10 = new PRED_system_predicate_1_10();
    static Predicate _system_predicate_1_11 = new PRED_system_predicate_1_11();
    static Predicate _system_predicate_1_12 = new PRED_system_predicate_1_12();
    static Predicate _system_predicate_1_13 = new PRED_system_predicate_1_13();
    static Predicate _system_predicate_1_14 = new PRED_system_predicate_1_14();
    static Predicate _system_predicate_1_15 = new PRED_system_predicate_1_15();
    static Predicate _system_predicate_1_16 = new PRED_system_predicate_1_16();
    static Predicate _system_predicate_1_17 = new PRED_system_predicate_1_17();
    static Predicate _system_predicate_1_18 = new PRED_system_predicate_1_18();
    static Predicate _system_predicate_1_19 = new PRED_system_predicate_1_19();
    static Predicate _system_predicate_1_20 = new PRED_system_predicate_1_20();
    static Predicate _system_predicate_1_21 = new PRED_system_predicate_1_21();
    static Predicate _system_predicate_1_22 = new PRED_system_predicate_1_22();
    static Predicate _system_predicate_1_23 = new PRED_system_predicate_1_23();
    static Predicate _system_predicate_1_24 = new PRED_system_predicate_1_24();
    static Predicate _system_predicate_1_25 = new PRED_system_predicate_1_25();
    static Predicate _system_predicate_1_26 = new PRED_system_predicate_1_26();
    static Predicate _system_predicate_1_27 = new PRED_system_predicate_1_27();
    static Predicate _system_predicate_1_28 = new PRED_system_predicate_1_28();
    static Predicate _system_predicate_1_29 = new PRED_system_predicate_1_29();
    static Predicate _system_predicate_1_30 = new PRED_system_predicate_1_30();
    static Predicate _system_predicate_1_31 = new PRED_system_predicate_1_31();
    static Predicate _system_predicate_1_32 = new PRED_system_predicate_1_32();
    static Predicate _system_predicate_1_33 = new PRED_system_predicate_1_33();
    static Predicate _system_predicate_1_34 = new PRED_system_predicate_1_34();
    static Predicate _system_predicate_1_35 = new PRED_system_predicate_1_35();
    static Predicate _system_predicate_1_36 = new PRED_system_predicate_1_36();
    static Predicate _system_predicate_1_37 = new PRED_system_predicate_1_37();
    static Predicate _system_predicate_1_38 = new PRED_system_predicate_1_38();
    static Predicate _system_predicate_1_39 = new PRED_system_predicate_1_39();
    static Predicate _system_predicate_1_40 = new PRED_system_predicate_1_40();
    static Predicate _system_predicate_1_41 = new PRED_system_predicate_1_41();
    static Predicate _system_predicate_1_42 = new PRED_system_predicate_1_42();
    static Predicate _system_predicate_1_43 = new PRED_system_predicate_1_43();
    static Predicate _system_predicate_1_44 = new PRED_system_predicate_1_44();
    static Predicate _system_predicate_1_45 = new PRED_system_predicate_1_45();
    static Predicate _system_predicate_1_46 = new PRED_system_predicate_1_46();
    static Predicate _system_predicate_1_47 = new PRED_system_predicate_1_47();
    static Predicate _system_predicate_1_48 = new PRED_system_predicate_1_48();
    static Predicate _system_predicate_1_49 = new PRED_system_predicate_1_49();
    static Predicate _system_predicate_1_50 = new PRED_system_predicate_1_50();
    static Predicate _system_predicate_1_51 = new PRED_system_predicate_1_51();
    static Predicate _system_predicate_1_52 = new PRED_system_predicate_1_52();
    static Predicate _system_predicate_1_53 = new PRED_system_predicate_1_53();
    static Predicate _system_predicate_1_54 = new PRED_system_predicate_1_54();
    static Predicate _system_predicate_1_55 = new PRED_system_predicate_1_55();
    static Predicate _system_predicate_1_56 = new PRED_system_predicate_1_56();
    static Predicate _system_predicate_1_57 = new PRED_system_predicate_1_57();
    static Predicate _system_predicate_1_58 = new PRED_system_predicate_1_58();
    static Predicate _system_predicate_1_59 = new PRED_system_predicate_1_59();
    static Predicate _system_predicate_1_60 = new PRED_system_predicate_1_60();
    static Predicate _system_predicate_1_61 = new PRED_system_predicate_1_61();
    static Predicate _system_predicate_1_62 = new PRED_system_predicate_1_62();
    static Predicate _system_predicate_1_63 = new PRED_system_predicate_1_63();
    static Predicate _system_predicate_1_64 = new PRED_system_predicate_1_64();
    static Predicate _system_predicate_1_65 = new PRED_system_predicate_1_65();
    static Predicate _system_predicate_1_66 = new PRED_system_predicate_1_66();
    static Predicate _system_predicate_1_67 = new PRED_system_predicate_1_67();
    static Predicate _system_predicate_1_68 = new PRED_system_predicate_1_68();
    static Predicate _system_predicate_1_69 = new PRED_system_predicate_1_69();
    static Predicate _system_predicate_1_70 = new PRED_system_predicate_1_70();
    static Predicate _system_predicate_1_71 = new PRED_system_predicate_1_71();
    static Predicate _system_predicate_1_72 = new PRED_system_predicate_1_72();
    static Predicate _system_predicate_1_73 = new PRED_system_predicate_1_73();
    static Predicate _system_predicate_1_74 = new PRED_system_predicate_1_74();
    static Predicate _system_predicate_1_75 = new PRED_system_predicate_1_75();
    static Predicate _system_predicate_1_76 = new PRED_system_predicate_1_76();
    static Predicate _system_predicate_1_77 = new PRED_system_predicate_1_77();
    static Predicate _system_predicate_1_78 = new PRED_system_predicate_1_78();
    static Predicate _system_predicate_1_79 = new PRED_system_predicate_1_79();
    static Predicate _system_predicate_1_80 = new PRED_system_predicate_1_80();
    static Predicate _system_predicate_1_81 = new PRED_system_predicate_1_81();
    static Predicate _system_predicate_1_82 = new PRED_system_predicate_1_82();
    static Predicate _system_predicate_1_83 = new PRED_system_predicate_1_83();
    static Predicate _system_predicate_1_84 = new PRED_system_predicate_1_84();
    static Predicate _system_predicate_1_85 = new PRED_system_predicate_1_85();
    static Predicate _system_predicate_1_86 = new PRED_system_predicate_1_86();
    static Predicate _system_predicate_1_87 = new PRED_system_predicate_1_87();
    static Predicate _system_predicate_1_88 = new PRED_system_predicate_1_88();
    static Predicate _system_predicate_1_89 = new PRED_system_predicate_1_89();
    static Predicate _system_predicate_1_90 = new PRED_system_predicate_1_90();
    static Predicate _system_predicate_1_91 = new PRED_system_predicate_1_91();
    static Predicate _system_predicate_1_92 = new PRED_system_predicate_1_92();
    static Predicate _system_predicate_1_93 = new PRED_system_predicate_1_93();
    static Predicate _system_predicate_1_94 = new PRED_system_predicate_1_94();
    static Predicate _system_predicate_1_95 = new PRED_system_predicate_1_95();
    static Predicate _system_predicate_1_96 = new PRED_system_predicate_1_96();
    static Predicate _system_predicate_1_97 = new PRED_system_predicate_1_97();
    static Predicate _system_predicate_1_98 = new PRED_system_predicate_1_98();
    static Predicate _system_predicate_1_99 = new PRED_system_predicate_1_99();
    static Predicate _system_predicate_1_100 = new PRED_system_predicate_1_100();
    static Predicate _system_predicate_1_101 = new PRED_system_predicate_1_101();
    static Predicate _system_predicate_1_102 = new PRED_system_predicate_1_102();
    static Predicate _system_predicate_1_103 = new PRED_system_predicate_1_103();
    static Predicate _system_predicate_1_104 = new PRED_system_predicate_1_104();
    static Predicate _system_predicate_1_105 = new PRED_system_predicate_1_105();
    static Predicate _system_predicate_1_106 = new PRED_system_predicate_1_106();
    static Predicate _system_predicate_1_107 = new PRED_system_predicate_1_107();
    static Predicate _system_predicate_1_108 = new PRED_system_predicate_1_108();
    static Predicate _system_predicate_1_109 = new PRED_system_predicate_1_109();
    static Predicate _system_predicate_1_110 = new PRED_system_predicate_1_110();
    static Predicate _system_predicate_1_111 = new PRED_system_predicate_1_111();
    static Predicate _system_predicate_1_112 = new PRED_system_predicate_1_112();
    static Predicate _system_predicate_1_113 = new PRED_system_predicate_1_113();
    static Predicate _system_predicate_1_114 = new PRED_system_predicate_1_114();
    static Predicate _system_predicate_1_115 = new PRED_system_predicate_1_115();
    static Predicate _system_predicate_1_116 = new PRED_system_predicate_1_116();
    static Predicate _system_predicate_1_117 = new PRED_system_predicate_1_117();
    static Predicate _system_predicate_1_118 = new PRED_system_predicate_1_118();
    static Predicate _system_predicate_1_119 = new PRED_system_predicate_1_119();
    static Predicate _system_predicate_1_120 = new PRED_system_predicate_1_120();
    static Predicate _system_predicate_1_121 = new PRED_system_predicate_1_121();
    static Predicate _system_predicate_1_122 = new PRED_system_predicate_1_122();
    static Predicate _system_predicate_1_123 = new PRED_system_predicate_1_123();
    static Predicate _system_predicate_1_124 = new PRED_system_predicate_1_124();
    static Predicate _system_predicate_1_125 = new PRED_system_predicate_1_125();
    static Predicate _system_predicate_1_126 = new PRED_system_predicate_1_126();
    static Predicate _system_predicate_1_127 = new PRED_system_predicate_1_127();
    static Predicate _system_predicate_1_128 = new PRED_system_predicate_1_128();
    static Predicate _system_predicate_1_129 = new PRED_system_predicate_1_129();
    static Predicate _system_predicate_1_130 = new PRED_system_predicate_1_130();
    static Predicate _system_predicate_1_131 = new PRED_system_predicate_1_131();
    static Predicate _system_predicate_1_132 = new PRED_system_predicate_1_132();
    static Predicate _system_predicate_1_133 = new PRED_system_predicate_1_133();
    static Predicate _system_predicate_1_134 = new PRED_system_predicate_1_134();
    static Predicate _system_predicate_1_135 = new PRED_system_predicate_1_135();
    static Predicate _system_predicate_1_136 = new PRED_system_predicate_1_136();
    static Predicate _system_predicate_1_137 = new PRED_system_predicate_1_137();
    static Predicate _system_predicate_1_138 = new PRED_system_predicate_1_138();
    static Predicate _system_predicate_1_139 = new PRED_system_predicate_1_139();
    static Predicate _system_predicate_1_140 = new PRED_system_predicate_1_140();
    static Predicate _system_predicate_1_141 = new PRED_system_predicate_1_141();
    static Predicate _system_predicate_1_142 = new PRED_system_predicate_1_142();
    static Predicate _system_predicate_1_143 = new PRED_system_predicate_1_143();
    static Predicate _system_predicate_1_144 = new PRED_system_predicate_1_144();
    static Predicate _system_predicate_1_145 = new PRED_system_predicate_1_145();
    static Predicate _system_predicate_1_146 = new PRED_system_predicate_1_146();
    static Predicate _system_predicate_1_147 = new PRED_system_predicate_1_147();
    static Predicate _system_predicate_1_148 = new PRED_system_predicate_1_148();
    static Predicate _system_predicate_1_149 = new PRED_system_predicate_1_149();
    static Predicate _system_predicate_1_150 = new PRED_system_predicate_1_150();
    static Predicate _system_predicate_1_151 = new PRED_system_predicate_1_151();
    static Predicate _system_predicate_1_152 = new PRED_system_predicate_1_152();
    static Predicate _system_predicate_1_153 = new PRED_system_predicate_1_153();
    static Predicate _system_predicate_1_154 = new PRED_system_predicate_1_154();
    static Predicate _system_predicate_1_155 = new PRED_system_predicate_1_155();
    static Predicate _system_predicate_1_156 = new PRED_system_predicate_1_156();
    static Predicate _system_predicate_1_157 = new PRED_system_predicate_1_157();
    static Predicate _system_predicate_1_158 = new PRED_system_predicate_1_158();
    static Predicate _system_predicate_1_159 = new PRED_system_predicate_1_159();
    static Predicate _system_predicate_1_160 = new PRED_system_predicate_1_160();
    static Predicate _system_predicate_1_161 = new PRED_system_predicate_1_161();
    static Predicate _system_predicate_1_162 = new PRED_system_predicate_1_162();
    static Predicate _system_predicate_1_163 = new PRED_system_predicate_1_163();
    static Predicate _system_predicate_1_164 = new PRED_system_predicate_1_164();
    static Predicate _system_predicate_1_165 = new PRED_system_predicate_1_165();
    static Predicate _system_predicate_1_166 = new PRED_system_predicate_1_166();
    static Predicate _system_predicate_1_167 = new PRED_system_predicate_1_167();
    static Predicate _system_predicate_1_168 = new PRED_system_predicate_1_168();
    static Predicate _system_predicate_1_169 = new PRED_system_predicate_1_169();
    static Predicate _system_predicate_1_170 = new PRED_system_predicate_1_170();
    static Predicate _system_predicate_1_171 = new PRED_system_predicate_1_171();
    static Predicate _system_predicate_1_172 = new PRED_system_predicate_1_172();
    static Predicate _system_predicate_1_173 = new PRED_system_predicate_1_173();
    static Predicate _system_predicate_1_174 = new PRED_system_predicate_1_174();
    static Predicate _system_predicate_1_175 = new PRED_system_predicate_1_175();
    static Predicate _system_predicate_1_176 = new PRED_system_predicate_1_176();
    static Predicate _system_predicate_1_177 = new PRED_system_predicate_1_177();
    static Predicate _system_predicate_1_178 = new PRED_system_predicate_1_178();
    static Predicate _system_predicate_1_179 = new PRED_system_predicate_1_179();
    static Predicate _system_predicate_1_180 = new PRED_system_predicate_1_180();
    static Predicate _system_predicate_1_181 = new PRED_system_predicate_1_181();
    static Predicate _system_predicate_1_182 = new PRED_system_predicate_1_182();
    static Predicate _system_predicate_1_183 = new PRED_system_predicate_1_183();
    static Predicate _system_predicate_1_184 = new PRED_system_predicate_1_184();
    static Predicate _system_predicate_1_185 = new PRED_system_predicate_1_185();
    static Predicate _system_predicate_1_186 = new PRED_system_predicate_1_186();
    static Predicate _system_predicate_1_187 = new PRED_system_predicate_1_187();
    static Predicate _system_predicate_1_188 = new PRED_system_predicate_1_188();
    static Predicate _system_predicate_1_189 = new PRED_system_predicate_1_189();
    static Predicate _system_predicate_1_190 = new PRED_system_predicate_1_190();
    static Predicate _system_predicate_1_191 = new PRED_system_predicate_1_191();
    static Predicate _system_predicate_1_192 = new PRED_system_predicate_1_192();
    static Predicate _system_predicate_1_193 = new PRED_system_predicate_1_193();
    static Predicate _system_predicate_1_194 = new PRED_system_predicate_1_194();
    static Predicate _system_predicate_1_195 = new PRED_system_predicate_1_195();
    static Predicate _system_predicate_1_196 = new PRED_system_predicate_1_196();
    static Predicate _system_predicate_1_197 = new PRED_system_predicate_1_197();
    static Predicate _system_predicate_1_198 = new PRED_system_predicate_1_198();
    static Predicate _system_predicate_1_199 = new PRED_system_predicate_1_199();
    static Predicate _system_predicate_1_200 = new PRED_system_predicate_1_200();
    static Predicate _system_predicate_1_201 = new PRED_system_predicate_1_201();
    static Predicate _system_predicate_1_202 = new PRED_system_predicate_1_202();
    static Predicate _system_predicate_1_203 = new PRED_system_predicate_1_203();
    static Predicate _system_predicate_1_204 = new PRED_system_predicate_1_204();
    static Predicate _system_predicate_1_205 = new PRED_system_predicate_1_205();
    static Predicate _system_predicate_1_206 = new PRED_system_predicate_1_206();
    static Predicate _system_predicate_1_207 = new PRED_system_predicate_1_207();
    static Predicate _system_predicate_1_208 = new PRED_system_predicate_1_208();
    static Predicate _system_predicate_1_209 = new PRED_system_predicate_1_209();
    static Predicate _system_predicate_1_210 = new PRED_system_predicate_1_210();
    static Predicate _system_predicate_1_211 = new PRED_system_predicate_1_211();
    static Predicate _system_predicate_1_212 = new PRED_system_predicate_1_212();
    static Predicate _system_predicate_1_213 = new PRED_system_predicate_1_213();
    static Predicate _system_predicate_1_214 = new PRED_system_predicate_1_214();
    static Predicate _system_predicate_1_215 = new PRED_system_predicate_1_215();
    static Predicate _system_predicate_1_216 = new PRED_system_predicate_1_216();
    static Predicate _system_predicate_1_217 = new PRED_system_predicate_1_217();
    static Predicate _system_predicate_1_218 = new PRED_system_predicate_1_218();
    static Predicate _system_predicate_1_219 = new PRED_system_predicate_1_219();
    static Predicate _system_predicate_1_220 = new PRED_system_predicate_1_220();
    static Predicate _system_predicate_1_221 = new PRED_system_predicate_1_221();
    static Predicate _system_predicate_1_222 = new PRED_system_predicate_1_222();
    static Predicate _system_predicate_1_223 = new PRED_system_predicate_1_223();
    static Predicate _system_predicate_1_224 = new PRED_system_predicate_1_224();
    static Predicate _system_predicate_1_225 = new PRED_system_predicate_1_225();
    static Predicate _system_predicate_1_226 = new PRED_system_predicate_1_226();
    static Predicate _system_predicate_1_227 = new PRED_system_predicate_1_227();
    static Predicate _system_predicate_1_228 = new PRED_system_predicate_1_228();
    static Predicate _system_predicate_1_229 = new PRED_system_predicate_1_229();
    static Predicate _system_predicate_1_230 = new PRED_system_predicate_1_230();
    static Predicate _system_predicate_1_231 = new PRED_system_predicate_1_231();
    static Predicate _system_predicate_1_232 = new PRED_system_predicate_1_232();
    static Predicate _system_predicate_1_233 = new PRED_system_predicate_1_233();
    static Predicate _system_predicate_1_234 = new PRED_system_predicate_1_234();
    static Predicate _system_predicate_1_235 = new PRED_system_predicate_1_235();
    static Predicate _system_predicate_1_236 = new PRED_system_predicate_1_236();
    static Predicate _system_predicate_1_237 = new PRED_system_predicate_1_237();
    static Predicate _system_predicate_1_238 = new PRED_system_predicate_1_238();
    static Predicate _system_predicate_1_239 = new PRED_system_predicate_1_239();
    static Predicate _system_predicate_1_240 = new PRED_system_predicate_1_240();
    static Predicate _system_predicate_1_241 = new PRED_system_predicate_1_241();
    static Predicate _system_predicate_1_242 = new PRED_system_predicate_1_242();
    static Predicate _system_predicate_1_243 = new PRED_system_predicate_1_243();
    static Predicate _system_predicate_1_244 = new PRED_system_predicate_1_244();
    static java.util.Hashtable<Term, Predicate> con = new java.util.Hashtable<Term, Predicate>(18);
    static java.util.Hashtable<Term, Predicate> str = new java.util.Hashtable<Term, Predicate>(226);
    static {
        con.put(s2, _system_predicate_1_2);
        con.put(s3, _system_predicate_1_3);
        con.put(s4, _system_predicate_1_4);
        con.put(s5, _system_predicate_1_5);
        con.put(s6, _system_predicate_1_6);
        con.put(s8, _system_predicate_1_8);
        con.put(s129, _system_predicate_1_129);
        con.put(s143, _system_predicate_1_143);
        con.put(s179, _system_predicate_1_179);
        con.put(s191, _system_predicate_1_191);
        con.put(s193, _system_predicate_1_193);
        con.put(s225, _system_predicate_1_225);
        con.put(s227, _system_predicate_1_227);
        con.put(s228, _system_predicate_1_228);
        con.put(s229, _system_predicate_1_229);
        con.put(s230, _system_predicate_1_230);
        con.put(s234, _system_predicate_1_234);
        con.put(s235, _system_predicate_1_235);
        str.put(s1, _system_predicate_1_1);
        str.put(s7, _system_predicate_1_7);
        str.put(s9, _system_predicate_1_9);
        str.put(s10, _system_predicate_1_10);
        str.put(s11, _system_predicate_1_11);
        str.put(s12, _system_predicate_1_12);
        str.put(s13, _system_predicate_1_13);
        str.put(s14, _system_predicate_1_14);
        str.put(s15, _system_predicate_1_15);
        str.put(s16, _system_predicate_1_16);
        str.put(s17, _system_predicate_1_17);
        str.put(s18, _system_predicate_1_18);
        str.put(s19, _system_predicate_1_19);
        str.put(s20, _system_predicate_1_20);
        str.put(s21, _system_predicate_1_21);
        str.put(s22, _system_predicate_1_22);
        str.put(s23, _system_predicate_1_23);
        str.put(s24, _system_predicate_1_24);
        str.put(s25, _system_predicate_1_25);
        str.put(s26, _system_predicate_1_26);
        str.put(s27, _system_predicate_1_27);
        str.put(s28, _system_predicate_1_28);
        str.put(s29, _system_predicate_1_29);
        str.put(s30, _system_predicate_1_30);
        str.put(s31, _system_predicate_1_31);
        str.put(s32, _system_predicate_1_32);
        str.put(s33, _system_predicate_1_33);
        str.put(s34, _system_predicate_1_34);
        str.put(s35, _system_predicate_1_35);
        str.put(s36, _system_predicate_1_36);
        str.put(s37, _system_predicate_1_37);
        str.put(s38, _system_predicate_1_38);
        str.put(s39, _system_predicate_1_39);
        str.put(s40, _system_predicate_1_40);
        str.put(s41, _system_predicate_1_41);
        str.put(s42, _system_predicate_1_42);
        str.put(s43, _system_predicate_1_43);
        str.put(s44, _system_predicate_1_44);
        str.put(s45, _system_predicate_1_45);
        str.put(s46, _system_predicate_1_46);
        str.put(s47, _system_predicate_1_47);
        str.put(s48, _system_predicate_1_48);
        str.put(s49, _system_predicate_1_49);
        str.put(s50, _system_predicate_1_50);
        str.put(s51, _system_predicate_1_51);
        str.put(s52, _system_predicate_1_52);
        str.put(s53, _system_predicate_1_53);
        str.put(s54, _system_predicate_1_54);
        str.put(s55, _system_predicate_1_55);
        str.put(s56, _system_predicate_1_56);
        str.put(s57, _system_predicate_1_57);
        str.put(s58, _system_predicate_1_58);
        str.put(s59, _system_predicate_1_59);
        str.put(s60, _system_predicate_1_60);
        str.put(s61, _system_predicate_1_61);
        str.put(s62, _system_predicate_1_62);
        str.put(s63, _system_predicate_1_63);
        str.put(s64, _system_predicate_1_64);
        str.put(s65, _system_predicate_1_65);
        str.put(s66, _system_predicate_1_66);
        str.put(s67, _system_predicate_1_67);
        str.put(s68, _system_predicate_1_68);
        str.put(s69, _system_predicate_1_69);
        str.put(s70, _system_predicate_1_70);
        str.put(s71, _system_predicate_1_71);
        str.put(s72, _system_predicate_1_72);
        str.put(s73, _system_predicate_1_73);
        str.put(s74, _system_predicate_1_74);
        str.put(s75, _system_predicate_1_75);
        str.put(s76, _system_predicate_1_76);
        str.put(s77, _system_predicate_1_77);
        str.put(s78, _system_predicate_1_78);
        str.put(s79, _system_predicate_1_79);
        str.put(s80, _system_predicate_1_80);
        str.put(s81, _system_predicate_1_81);
        str.put(s82, _system_predicate_1_82);
        str.put(s83, _system_predicate_1_83);
        str.put(s84, _system_predicate_1_84);
        str.put(s85, _system_predicate_1_85);
        str.put(s86, _system_predicate_1_86);
        str.put(s87, _system_predicate_1_87);
        str.put(s88, _system_predicate_1_88);
        str.put(s89, _system_predicate_1_89);
        str.put(s90, _system_predicate_1_90);
        str.put(s91, _system_predicate_1_91);
        str.put(s92, _system_predicate_1_92);
        str.put(s93, _system_predicate_1_93);
        str.put(s94, _system_predicate_1_94);
        str.put(s95, _system_predicate_1_95);
        str.put(s96, _system_predicate_1_96);
        str.put(s97, _system_predicate_1_97);
        str.put(s98, _system_predicate_1_98);
        str.put(s99, _system_predicate_1_99);
        str.put(s100, _system_predicate_1_100);
        str.put(s101, _system_predicate_1_101);
        str.put(s102, _system_predicate_1_102);
        str.put(s103, _system_predicate_1_103);
        str.put(s104, _system_predicate_1_104);
        str.put(s105, _system_predicate_1_105);
        str.put(s106, _system_predicate_1_106);
        str.put(s107, _system_predicate_1_107);
        str.put(s108, _system_predicate_1_108);
        str.put(s109, _system_predicate_1_109);
        str.put(s110, _system_predicate_1_110);
        str.put(s111, _system_predicate_1_111);
        str.put(s112, _system_predicate_1_112);
        str.put(s113, _system_predicate_1_113);
        str.put(s114, _system_predicate_1_114);
        str.put(s115, _system_predicate_1_115);
        str.put(s116, _system_predicate_1_116);
        str.put(s117, _system_predicate_1_117);
        str.put(s118, _system_predicate_1_118);
        str.put(s119, _system_predicate_1_119);
        str.put(s120, _system_predicate_1_120);
        str.put(s121, _system_predicate_1_121);
        str.put(s122, _system_predicate_1_122);
        str.put(s123, _system_predicate_1_123);
        str.put(s124, _system_predicate_1_124);
        str.put(s125, _system_predicate_1_125);
        str.put(s126, _system_predicate_1_126);
        str.put(s127, _system_predicate_1_127);
        str.put(s128, _system_predicate_1_128);
        str.put(s130, _system_predicate_1_130);
        str.put(s131, _system_predicate_1_131);
        str.put(s132, _system_predicate_1_132);
        str.put(s133, _system_predicate_1_133);
        str.put(s134, _system_predicate_1_134);
        str.put(s135, _system_predicate_1_135);
        str.put(s136, _system_predicate_1_136);
        str.put(s137, _system_predicate_1_137);
        str.put(s138, _system_predicate_1_138);
        str.put(s139, _system_predicate_1_139);
        str.put(s140, _system_predicate_1_140);
        str.put(s141, _system_predicate_1_141);
        str.put(s142, _system_predicate_1_142);
        str.put(s144, _system_predicate_1_144);
        str.put(s145, _system_predicate_1_145);
        str.put(s146, _system_predicate_1_146);
        str.put(s147, _system_predicate_1_147);
        str.put(s148, _system_predicate_1_148);
        str.put(s149, _system_predicate_1_149);
        str.put(s150, _system_predicate_1_150);
        str.put(s151, _system_predicate_1_151);
        str.put(s152, _system_predicate_1_152);
        str.put(s153, _system_predicate_1_153);
        str.put(s154, _system_predicate_1_154);
        str.put(s155, _system_predicate_1_155);
        str.put(s156, _system_predicate_1_156);
        str.put(s157, _system_predicate_1_157);
        str.put(s158, _system_predicate_1_158);
        str.put(s159, _system_predicate_1_159);
        str.put(s160, _system_predicate_1_160);
        str.put(s161, _system_predicate_1_161);
        str.put(s162, _system_predicate_1_162);
        str.put(s163, _system_predicate_1_163);
        str.put(s164, _system_predicate_1_164);
        str.put(s165, _system_predicate_1_165);
        str.put(s166, _system_predicate_1_166);
        str.put(s167, _system_predicate_1_167);
        str.put(s168, _system_predicate_1_168);
        str.put(s169, _system_predicate_1_169);
        str.put(s170, _system_predicate_1_170);
        str.put(s171, _system_predicate_1_171);
        str.put(s172, _system_predicate_1_172);
        str.put(s173, _system_predicate_1_173);
        str.put(s174, _system_predicate_1_174);
        str.put(s175, _system_predicate_1_175);
        str.put(s176, _system_predicate_1_176);
        str.put(s177, _system_predicate_1_177);
        str.put(s178, _system_predicate_1_178);
        str.put(s180, _system_predicate_1_180);
        str.put(s181, _system_predicate_1_181);
        str.put(s182, _system_predicate_1_182);
        str.put(s183, _system_predicate_1_183);
        str.put(s184, _system_predicate_1_184);
        str.put(s185, _system_predicate_1_185);
        str.put(s186, _system_predicate_1_186);
        str.put(s187, _system_predicate_1_187);
        str.put(s188, _system_predicate_1_188);
        str.put(s189, _system_predicate_1_189);
        str.put(s190, _system_predicate_1_190);
        str.put(s192, _system_predicate_1_192);
        str.put(s194, _system_predicate_1_194);
        str.put(s195, _system_predicate_1_195);
        str.put(s196, _system_predicate_1_196);
        str.put(s197, _system_predicate_1_197);
        str.put(s198, _system_predicate_1_198);
        str.put(s199, _system_predicate_1_199);
        str.put(s200, _system_predicate_1_200);
        str.put(s201, _system_predicate_1_201);
        str.put(s202, _system_predicate_1_202);
        str.put(s203, _system_predicate_1_203);
        str.put(s204, _system_predicate_1_204);
        str.put(s205, _system_predicate_1_205);
        str.put(s206, _system_predicate_1_206);
        str.put(s207, _system_predicate_1_207);
        str.put(s208, _system_predicate_1_208);
        str.put(s209, _system_predicate_1_209);
        str.put(s210, _system_predicate_1_210);
        str.put(s211, _system_predicate_1_211);
        str.put(s212, _system_predicate_1_212);
        str.put(s213, _system_predicate_1_213);
        str.put(s214, _system_predicate_1_214);
        str.put(s215, _system_predicate_1_215);
        str.put(s216, _system_predicate_1_216);
        str.put(s217, _system_predicate_1_217);
        str.put(s218, _system_predicate_1_218);
        str.put(s219, _system_predicate_1_219);
        str.put(s220, _system_predicate_1_220);
        str.put(s221, _system_predicate_1_221);
        str.put(s222, _system_predicate_1_222);
        str.put(s223, _system_predicate_1_223);
        str.put(s224, _system_predicate_1_224);
        str.put(s226, _system_predicate_1_226);
        str.put(s231, _system_predicate_1_231);
        str.put(s232, _system_predicate_1_232);
        str.put(s233, _system_predicate_1_233);
        str.put(s236, _system_predicate_1_236);
        str.put(s237, _system_predicate_1_237);
        str.put(s238, _system_predicate_1_238);
        str.put(s239, _system_predicate_1_239);
        str.put(s240, _system_predicate_1_240);
        str.put(s241, _system_predicate_1_241);
        str.put(s242, _system_predicate_1_242);
        str.put(s243, _system_predicate_1_243);
        str.put(s244, _system_predicate_1_244);
    }

    public Term arg1;

    public PRED_system_predicate_1(Term a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_system_predicate_1(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String toString() {
        return "system_predicate(" + arg1 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_system_predicate_1_var, _fail_0, _fail_0, _system_predicate_1_con, _system_predicate_1_str, _fail_0);
    }
}

class PRED_system_predicate_1_var extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_system_predicate_1_1, _system_predicate_1_var_1);
    }
}

class PRED_system_predicate_1_var_1 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_2, _system_predicate_1_var_2);
    }
}

class PRED_system_predicate_1_var_2 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_3, _system_predicate_1_var_3);
    }
}

class PRED_system_predicate_1_var_3 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_4, _system_predicate_1_var_4);
    }
}

class PRED_system_predicate_1_var_4 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_5, _system_predicate_1_var_5);
    }
}

class PRED_system_predicate_1_var_5 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_6, _system_predicate_1_var_6);
    }
}

class PRED_system_predicate_1_var_6 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_7, _system_predicate_1_var_7);
    }
}

class PRED_system_predicate_1_var_7 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_8, _system_predicate_1_var_8);
    }
}

class PRED_system_predicate_1_var_8 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_9, _system_predicate_1_var_9);
    }
}

class PRED_system_predicate_1_var_9 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_10, _system_predicate_1_var_10);
    }
}

class PRED_system_predicate_1_var_10 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_11, _system_predicate_1_var_11);
    }
}

class PRED_system_predicate_1_var_11 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_12, _system_predicate_1_var_12);
    }
}

class PRED_system_predicate_1_var_12 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_13, _system_predicate_1_var_13);
    }
}

class PRED_system_predicate_1_var_13 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_14, _system_predicate_1_var_14);
    }
}

class PRED_system_predicate_1_var_14 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_15, _system_predicate_1_var_15);
    }
}

class PRED_system_predicate_1_var_15 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_16, _system_predicate_1_var_16);
    }
}

class PRED_system_predicate_1_var_16 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_17, _system_predicate_1_var_17);
    }
}

class PRED_system_predicate_1_var_17 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_18, _system_predicate_1_var_18);
    }
}

class PRED_system_predicate_1_var_18 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_19, _system_predicate_1_var_19);
    }
}

class PRED_system_predicate_1_var_19 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_20, _system_predicate_1_var_20);
    }
}

class PRED_system_predicate_1_var_20 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_21, _system_predicate_1_var_21);
    }
}

class PRED_system_predicate_1_var_21 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_22, _system_predicate_1_var_22);
    }
}

class PRED_system_predicate_1_var_22 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_23, _system_predicate_1_var_23);
    }
}

class PRED_system_predicate_1_var_23 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_24, _system_predicate_1_var_24);
    }
}

class PRED_system_predicate_1_var_24 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_25, _system_predicate_1_var_25);
    }
}

class PRED_system_predicate_1_var_25 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_26, _system_predicate_1_var_26);
    }
}

class PRED_system_predicate_1_var_26 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_27, _system_predicate_1_var_27);
    }
}

class PRED_system_predicate_1_var_27 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_28, _system_predicate_1_var_28);
    }
}

class PRED_system_predicate_1_var_28 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_29, _system_predicate_1_var_29);
    }
}

class PRED_system_predicate_1_var_29 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_30, _system_predicate_1_var_30);
    }
}

class PRED_system_predicate_1_var_30 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_31, _system_predicate_1_var_31);
    }
}

class PRED_system_predicate_1_var_31 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_32, _system_predicate_1_var_32);
    }
}

class PRED_system_predicate_1_var_32 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_33, _system_predicate_1_var_33);
    }
}

class PRED_system_predicate_1_var_33 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_34, _system_predicate_1_var_34);
    }
}

class PRED_system_predicate_1_var_34 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_35, _system_predicate_1_var_35);
    }
}

class PRED_system_predicate_1_var_35 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_36, _system_predicate_1_var_36);
    }
}

class PRED_system_predicate_1_var_36 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_37, _system_predicate_1_var_37);
    }
}

class PRED_system_predicate_1_var_37 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_38, _system_predicate_1_var_38);
    }
}

class PRED_system_predicate_1_var_38 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_39, _system_predicate_1_var_39);
    }
}

class PRED_system_predicate_1_var_39 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_40, _system_predicate_1_var_40);
    }
}

class PRED_system_predicate_1_var_40 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_41, _system_predicate_1_var_41);
    }
}

class PRED_system_predicate_1_var_41 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_42, _system_predicate_1_var_42);
    }
}

class PRED_system_predicate_1_var_42 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_43, _system_predicate_1_var_43);
    }
}

class PRED_system_predicate_1_var_43 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_44, _system_predicate_1_var_44);
    }
}

class PRED_system_predicate_1_var_44 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_45, _system_predicate_1_var_45);
    }
}

class PRED_system_predicate_1_var_45 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_46, _system_predicate_1_var_46);
    }
}

class PRED_system_predicate_1_var_46 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_47, _system_predicate_1_var_47);
    }
}

class PRED_system_predicate_1_var_47 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_48, _system_predicate_1_var_48);
    }
}

class PRED_system_predicate_1_var_48 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_49, _system_predicate_1_var_49);
    }
}

class PRED_system_predicate_1_var_49 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_50, _system_predicate_1_var_50);
    }
}

class PRED_system_predicate_1_var_50 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_51, _system_predicate_1_var_51);
    }
}

class PRED_system_predicate_1_var_51 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_52, _system_predicate_1_var_52);
    }
}

class PRED_system_predicate_1_var_52 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_53, _system_predicate_1_var_53);
    }
}

class PRED_system_predicate_1_var_53 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_54, _system_predicate_1_var_54);
    }
}

class PRED_system_predicate_1_var_54 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_55, _system_predicate_1_var_55);
    }
}

class PRED_system_predicate_1_var_55 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_56, _system_predicate_1_var_56);
    }
}

class PRED_system_predicate_1_var_56 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_57, _system_predicate_1_var_57);
    }
}

class PRED_system_predicate_1_var_57 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_58, _system_predicate_1_var_58);
    }
}

class PRED_system_predicate_1_var_58 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_59, _system_predicate_1_var_59);
    }
}

class PRED_system_predicate_1_var_59 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_60, _system_predicate_1_var_60);
    }
}

class PRED_system_predicate_1_var_60 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_61, _system_predicate_1_var_61);
    }
}

class PRED_system_predicate_1_var_61 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_62, _system_predicate_1_var_62);
    }
}

class PRED_system_predicate_1_var_62 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_63, _system_predicate_1_var_63);
    }
}

class PRED_system_predicate_1_var_63 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_64, _system_predicate_1_var_64);
    }
}

class PRED_system_predicate_1_var_64 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_65, _system_predicate_1_var_65);
    }
}

class PRED_system_predicate_1_var_65 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_66, _system_predicate_1_var_66);
    }
}

class PRED_system_predicate_1_var_66 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_67, _system_predicate_1_var_67);
    }
}

class PRED_system_predicate_1_var_67 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_68, _system_predicate_1_var_68);
    }
}

class PRED_system_predicate_1_var_68 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_69, _system_predicate_1_var_69);
    }
}

class PRED_system_predicate_1_var_69 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_70, _system_predicate_1_var_70);
    }
}

class PRED_system_predicate_1_var_70 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_71, _system_predicate_1_var_71);
    }
}

class PRED_system_predicate_1_var_71 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_72, _system_predicate_1_var_72);
    }
}

class PRED_system_predicate_1_var_72 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_73, _system_predicate_1_var_73);
    }
}

class PRED_system_predicate_1_var_73 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_74, _system_predicate_1_var_74);
    }
}

class PRED_system_predicate_1_var_74 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_75, _system_predicate_1_var_75);
    }
}

class PRED_system_predicate_1_var_75 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_76, _system_predicate_1_var_76);
    }
}

class PRED_system_predicate_1_var_76 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_77, _system_predicate_1_var_77);
    }
}

class PRED_system_predicate_1_var_77 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_78, _system_predicate_1_var_78);
    }
}

class PRED_system_predicate_1_var_78 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_79, _system_predicate_1_var_79);
    }
}

class PRED_system_predicate_1_var_79 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_80, _system_predicate_1_var_80);
    }
}

class PRED_system_predicate_1_var_80 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_81, _system_predicate_1_var_81);
    }
}

class PRED_system_predicate_1_var_81 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_82, _system_predicate_1_var_82);
    }
}

class PRED_system_predicate_1_var_82 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_83, _system_predicate_1_var_83);
    }
}

class PRED_system_predicate_1_var_83 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_84, _system_predicate_1_var_84);
    }
}

class PRED_system_predicate_1_var_84 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_85, _system_predicate_1_var_85);
    }
}

class PRED_system_predicate_1_var_85 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_86, _system_predicate_1_var_86);
    }
}

class PRED_system_predicate_1_var_86 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_87, _system_predicate_1_var_87);
    }
}

class PRED_system_predicate_1_var_87 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_88, _system_predicate_1_var_88);
    }
}

class PRED_system_predicate_1_var_88 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_89, _system_predicate_1_var_89);
    }
}

class PRED_system_predicate_1_var_89 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_90, _system_predicate_1_var_90);
    }
}

class PRED_system_predicate_1_var_90 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_91, _system_predicate_1_var_91);
    }
}

class PRED_system_predicate_1_var_91 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_92, _system_predicate_1_var_92);
    }
}

class PRED_system_predicate_1_var_92 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_93, _system_predicate_1_var_93);
    }
}

class PRED_system_predicate_1_var_93 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_94, _system_predicate_1_var_94);
    }
}

class PRED_system_predicate_1_var_94 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_95, _system_predicate_1_var_95);
    }
}

class PRED_system_predicate_1_var_95 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_96, _system_predicate_1_var_96);
    }
}

class PRED_system_predicate_1_var_96 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_97, _system_predicate_1_var_97);
    }
}

class PRED_system_predicate_1_var_97 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_98, _system_predicate_1_var_98);
    }
}

class PRED_system_predicate_1_var_98 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_99, _system_predicate_1_var_99);
    }
}

class PRED_system_predicate_1_var_99 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_100, _system_predicate_1_var_100);
    }
}

class PRED_system_predicate_1_var_100 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_101, _system_predicate_1_var_101);
    }
}

class PRED_system_predicate_1_var_101 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_102, _system_predicate_1_var_102);
    }
}

class PRED_system_predicate_1_var_102 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_103, _system_predicate_1_var_103);
    }
}

class PRED_system_predicate_1_var_103 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_104, _system_predicate_1_var_104);
    }
}

class PRED_system_predicate_1_var_104 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_105, _system_predicate_1_var_105);
    }
}

class PRED_system_predicate_1_var_105 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_106, _system_predicate_1_var_106);
    }
}

class PRED_system_predicate_1_var_106 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_107, _system_predicate_1_var_107);
    }
}

class PRED_system_predicate_1_var_107 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_108, _system_predicate_1_var_108);
    }
}

class PRED_system_predicate_1_var_108 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_109, _system_predicate_1_var_109);
    }
}

class PRED_system_predicate_1_var_109 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_110, _system_predicate_1_var_110);
    }
}

class PRED_system_predicate_1_var_110 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_111, _system_predicate_1_var_111);
    }
}

class PRED_system_predicate_1_var_111 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_112, _system_predicate_1_var_112);
    }
}

class PRED_system_predicate_1_var_112 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_113, _system_predicate_1_var_113);
    }
}

class PRED_system_predicate_1_var_113 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_114, _system_predicate_1_var_114);
    }
}

class PRED_system_predicate_1_var_114 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_115, _system_predicate_1_var_115);
    }
}

class PRED_system_predicate_1_var_115 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_116, _system_predicate_1_var_116);
    }
}

class PRED_system_predicate_1_var_116 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_117, _system_predicate_1_var_117);
    }
}

class PRED_system_predicate_1_var_117 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_118, _system_predicate_1_var_118);
    }
}

class PRED_system_predicate_1_var_118 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_119, _system_predicate_1_var_119);
    }
}

class PRED_system_predicate_1_var_119 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_120, _system_predicate_1_var_120);
    }
}

class PRED_system_predicate_1_var_120 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_121, _system_predicate_1_var_121);
    }
}

class PRED_system_predicate_1_var_121 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_122, _system_predicate_1_var_122);
    }
}

class PRED_system_predicate_1_var_122 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_123, _system_predicate_1_var_123);
    }
}

class PRED_system_predicate_1_var_123 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_124, _system_predicate_1_var_124);
    }
}

class PRED_system_predicate_1_var_124 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_125, _system_predicate_1_var_125);
    }
}

class PRED_system_predicate_1_var_125 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_126, _system_predicate_1_var_126);
    }
}

class PRED_system_predicate_1_var_126 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_127, _system_predicate_1_var_127);
    }
}

class PRED_system_predicate_1_var_127 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_128, _system_predicate_1_var_128);
    }
}

class PRED_system_predicate_1_var_128 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_129, _system_predicate_1_var_129);
    }
}

class PRED_system_predicate_1_var_129 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_130, _system_predicate_1_var_130);
    }
}

class PRED_system_predicate_1_var_130 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_131, _system_predicate_1_var_131);
    }
}

class PRED_system_predicate_1_var_131 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_132, _system_predicate_1_var_132);
    }
}

class PRED_system_predicate_1_var_132 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_133, _system_predicate_1_var_133);
    }
}

class PRED_system_predicate_1_var_133 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_134, _system_predicate_1_var_134);
    }
}

class PRED_system_predicate_1_var_134 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_135, _system_predicate_1_var_135);
    }
}

class PRED_system_predicate_1_var_135 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_136, _system_predicate_1_var_136);
    }
}

class PRED_system_predicate_1_var_136 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_137, _system_predicate_1_var_137);
    }
}

class PRED_system_predicate_1_var_137 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_138, _system_predicate_1_var_138);
    }
}

class PRED_system_predicate_1_var_138 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_139, _system_predicate_1_var_139);
    }
}

class PRED_system_predicate_1_var_139 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_140, _system_predicate_1_var_140);
    }
}

class PRED_system_predicate_1_var_140 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_141, _system_predicate_1_var_141);
    }
}

class PRED_system_predicate_1_var_141 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_142, _system_predicate_1_var_142);
    }
}

class PRED_system_predicate_1_var_142 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_143, _system_predicate_1_var_143);
    }
}

class PRED_system_predicate_1_var_143 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_144, _system_predicate_1_var_144);
    }
}

class PRED_system_predicate_1_var_144 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_145, _system_predicate_1_var_145);
    }
}

class PRED_system_predicate_1_var_145 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_146, _system_predicate_1_var_146);
    }
}

class PRED_system_predicate_1_var_146 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_147, _system_predicate_1_var_147);
    }
}

class PRED_system_predicate_1_var_147 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_148, _system_predicate_1_var_148);
    }
}

class PRED_system_predicate_1_var_148 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_149, _system_predicate_1_var_149);
    }
}

class PRED_system_predicate_1_var_149 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_150, _system_predicate_1_var_150);
    }
}

class PRED_system_predicate_1_var_150 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_151, _system_predicate_1_var_151);
    }
}

class PRED_system_predicate_1_var_151 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_152, _system_predicate_1_var_152);
    }
}

class PRED_system_predicate_1_var_152 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_153, _system_predicate_1_var_153);
    }
}

class PRED_system_predicate_1_var_153 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_154, _system_predicate_1_var_154);
    }
}

class PRED_system_predicate_1_var_154 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_155, _system_predicate_1_var_155);
    }
}

class PRED_system_predicate_1_var_155 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_156, _system_predicate_1_var_156);
    }
}

class PRED_system_predicate_1_var_156 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_157, _system_predicate_1_var_157);
    }
}

class PRED_system_predicate_1_var_157 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_158, _system_predicate_1_var_158);
    }
}

class PRED_system_predicate_1_var_158 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_159, _system_predicate_1_var_159);
    }
}

class PRED_system_predicate_1_var_159 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_160, _system_predicate_1_var_160);
    }
}

class PRED_system_predicate_1_var_160 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_161, _system_predicate_1_var_161);
    }
}

class PRED_system_predicate_1_var_161 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_162, _system_predicate_1_var_162);
    }
}

class PRED_system_predicate_1_var_162 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_163, _system_predicate_1_var_163);
    }
}

class PRED_system_predicate_1_var_163 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_164, _system_predicate_1_var_164);
    }
}

class PRED_system_predicate_1_var_164 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_165, _system_predicate_1_var_165);
    }
}

class PRED_system_predicate_1_var_165 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_166, _system_predicate_1_var_166);
    }
}

class PRED_system_predicate_1_var_166 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_167, _system_predicate_1_var_167);
    }
}

class PRED_system_predicate_1_var_167 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_168, _system_predicate_1_var_168);
    }
}

class PRED_system_predicate_1_var_168 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_169, _system_predicate_1_var_169);
    }
}

class PRED_system_predicate_1_var_169 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_170, _system_predicate_1_var_170);
    }
}

class PRED_system_predicate_1_var_170 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_171, _system_predicate_1_var_171);
    }
}

class PRED_system_predicate_1_var_171 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_172, _system_predicate_1_var_172);
    }
}

class PRED_system_predicate_1_var_172 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_173, _system_predicate_1_var_173);
    }
}

class PRED_system_predicate_1_var_173 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_174, _system_predicate_1_var_174);
    }
}

class PRED_system_predicate_1_var_174 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_175, _system_predicate_1_var_175);
    }
}

class PRED_system_predicate_1_var_175 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_176, _system_predicate_1_var_176);
    }
}

class PRED_system_predicate_1_var_176 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_177, _system_predicate_1_var_177);
    }
}

class PRED_system_predicate_1_var_177 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_178, _system_predicate_1_var_178);
    }
}

class PRED_system_predicate_1_var_178 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_179, _system_predicate_1_var_179);
    }
}

class PRED_system_predicate_1_var_179 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_180, _system_predicate_1_var_180);
    }
}

class PRED_system_predicate_1_var_180 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_181, _system_predicate_1_var_181);
    }
}

class PRED_system_predicate_1_var_181 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_182, _system_predicate_1_var_182);
    }
}

class PRED_system_predicate_1_var_182 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_183, _system_predicate_1_var_183);
    }
}

class PRED_system_predicate_1_var_183 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_184, _system_predicate_1_var_184);
    }
}

class PRED_system_predicate_1_var_184 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_185, _system_predicate_1_var_185);
    }
}

class PRED_system_predicate_1_var_185 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_186, _system_predicate_1_var_186);
    }
}

class PRED_system_predicate_1_var_186 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_187, _system_predicate_1_var_187);
    }
}

class PRED_system_predicate_1_var_187 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_188, _system_predicate_1_var_188);
    }
}

class PRED_system_predicate_1_var_188 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_189, _system_predicate_1_var_189);
    }
}

class PRED_system_predicate_1_var_189 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_190, _system_predicate_1_var_190);
    }
}

class PRED_system_predicate_1_var_190 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_191, _system_predicate_1_var_191);
    }
}

class PRED_system_predicate_1_var_191 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_192, _system_predicate_1_var_192);
    }
}

class PRED_system_predicate_1_var_192 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_193, _system_predicate_1_var_193);
    }
}

class PRED_system_predicate_1_var_193 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_194, _system_predicate_1_var_194);
    }
}

class PRED_system_predicate_1_var_194 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_195, _system_predicate_1_var_195);
    }
}

class PRED_system_predicate_1_var_195 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_196, _system_predicate_1_var_196);
    }
}

class PRED_system_predicate_1_var_196 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_197, _system_predicate_1_var_197);
    }
}

class PRED_system_predicate_1_var_197 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_198, _system_predicate_1_var_198);
    }
}

class PRED_system_predicate_1_var_198 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_199, _system_predicate_1_var_199);
    }
}

class PRED_system_predicate_1_var_199 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_200, _system_predicate_1_var_200);
    }
}

class PRED_system_predicate_1_var_200 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_201, _system_predicate_1_var_201);
    }
}

class PRED_system_predicate_1_var_201 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_202, _system_predicate_1_var_202);
    }
}

class PRED_system_predicate_1_var_202 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_203, _system_predicate_1_var_203);
    }
}

class PRED_system_predicate_1_var_203 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_204, _system_predicate_1_var_204);
    }
}

class PRED_system_predicate_1_var_204 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_205, _system_predicate_1_var_205);
    }
}

class PRED_system_predicate_1_var_205 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_206, _system_predicate_1_var_206);
    }
}

class PRED_system_predicate_1_var_206 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_207, _system_predicate_1_var_207);
    }
}

class PRED_system_predicate_1_var_207 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_208, _system_predicate_1_var_208);
    }
}

class PRED_system_predicate_1_var_208 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_209, _system_predicate_1_var_209);
    }
}

class PRED_system_predicate_1_var_209 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_210, _system_predicate_1_var_210);
    }
}

class PRED_system_predicate_1_var_210 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_211, _system_predicate_1_var_211);
    }
}

class PRED_system_predicate_1_var_211 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_212, _system_predicate_1_var_212);
    }
}

class PRED_system_predicate_1_var_212 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_213, _system_predicate_1_var_213);
    }
}

class PRED_system_predicate_1_var_213 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_214, _system_predicate_1_var_214);
    }
}

class PRED_system_predicate_1_var_214 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_215, _system_predicate_1_var_215);
    }
}

class PRED_system_predicate_1_var_215 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_216, _system_predicate_1_var_216);
    }
}

class PRED_system_predicate_1_var_216 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_217, _system_predicate_1_var_217);
    }
}

class PRED_system_predicate_1_var_217 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_218, _system_predicate_1_var_218);
    }
}

class PRED_system_predicate_1_var_218 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_219, _system_predicate_1_var_219);
    }
}

class PRED_system_predicate_1_var_219 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_220, _system_predicate_1_var_220);
    }
}

class PRED_system_predicate_1_var_220 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_221, _system_predicate_1_var_221);
    }
}

class PRED_system_predicate_1_var_221 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_222, _system_predicate_1_var_222);
    }
}

class PRED_system_predicate_1_var_222 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_223, _system_predicate_1_var_223);
    }
}

class PRED_system_predicate_1_var_223 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_224, _system_predicate_1_var_224);
    }
}

class PRED_system_predicate_1_var_224 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_225, _system_predicate_1_var_225);
    }
}

class PRED_system_predicate_1_var_225 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_226, _system_predicate_1_var_226);
    }
}

class PRED_system_predicate_1_var_226 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_227, _system_predicate_1_var_227);
    }
}

class PRED_system_predicate_1_var_227 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_228, _system_predicate_1_var_228);
    }
}

class PRED_system_predicate_1_var_228 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_229, _system_predicate_1_var_229);
    }
}

class PRED_system_predicate_1_var_229 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_230, _system_predicate_1_var_230);
    }
}

class PRED_system_predicate_1_var_230 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_231, _system_predicate_1_var_231);
    }
}

class PRED_system_predicate_1_var_231 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_232, _system_predicate_1_var_232);
    }
}

class PRED_system_predicate_1_var_232 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_233, _system_predicate_1_var_233);
    }
}

class PRED_system_predicate_1_var_233 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_234, _system_predicate_1_var_234);
    }
}

class PRED_system_predicate_1_var_234 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_235, _system_predicate_1_var_235);
    }
}

class PRED_system_predicate_1_var_235 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_236, _system_predicate_1_var_236);
    }
}

class PRED_system_predicate_1_var_236 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_237, _system_predicate_1_var_237);
    }
}

class PRED_system_predicate_1_var_237 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_238, _system_predicate_1_var_238);
    }
}

class PRED_system_predicate_1_var_238 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_239, _system_predicate_1_var_239);
    }
}

class PRED_system_predicate_1_var_239 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_240, _system_predicate_1_var_240);
    }
}

class PRED_system_predicate_1_var_240 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_241, _system_predicate_1_var_241);
    }
}

class PRED_system_predicate_1_var_241 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_242, _system_predicate_1_var_242);
    }
}

class PRED_system_predicate_1_var_242 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_system_predicate_1_243, _system_predicate_1_var_243);
    }
}

class PRED_system_predicate_1_var_243 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_system_predicate_1_244);
    }
}

class PRED_system_predicate_1_con extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.switch_on_hash(con, _fail_0);
    }
}

class PRED_system_predicate_1_str extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
        return engine.switch_on_hash(str, _fail_0);
    }
}

class PRED_system_predicate_1_1 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(system_predicate(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(system_predicate(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s1.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s1, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_2 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(true):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(true):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s2))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s2, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_3 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(therwise):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(therwise):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s3))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s3, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_4 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(fail):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(fail):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s4))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s4, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_5 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(false):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(false):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s5))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s5, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_6 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(!):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(!):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s6))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s6, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_7 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$get_level'(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$get_level'(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s7.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s7, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_8 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$neck_cut'):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$neck_cut'):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s8))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s8, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_9 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$cut'(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$cut'(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s9.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s9, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_10 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(A^B):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(A^B):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s10.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s10, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_11 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate((A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate((A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s11.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s11, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_12 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate((A;B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate((A;B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s12.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s12, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_13 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate((A->B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate((A->B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s13.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s13, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_14 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(call(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(call(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s14.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s14, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_15 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(catch(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(catch(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s15.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s15, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_16 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(throw(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(throw(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s16.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s16, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_17 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(on_exception(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(on_exception(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s17.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s17, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_18 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(raise_exception(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(raise_exception(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s18.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s18, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_19 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(A=B):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(A=B):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s19.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s19, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_20 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$unify'(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$unify'(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s20.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s20, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_21 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(A\=B):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(A\=B):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s21.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s21, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_22 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$not_unifiable'(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$not_unifiable'(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s22.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s22, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_23 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(var(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(var(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s23.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s23, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_24 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(atom(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(atom(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s24.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s24, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_25 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(integer(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(integer(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s25.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s25, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_26 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(float(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(float(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s26.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s26, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_27 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(atomic(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(atomic(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s27.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s27, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_28 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(compound(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(compound(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s28.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s28, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_29 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(nonvar(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(nonvar(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s29.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s29, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_30 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(number(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(number(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s30.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s30, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_31 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(java(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(java(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s31.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s31, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_32 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(java(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(java(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s32.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s32, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_33 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(closure(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(closure(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s33.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s33, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_34 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(ground(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(ground(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s34.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s34, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_35 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(callable(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(callable(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s35.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s35, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_36 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(A==B):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(A==B):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s36.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s36, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_37 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$equality_of_term'(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$equality_of_term'(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s37.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s37, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_38 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(A\==B):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(A\==B):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s38.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s38, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_39 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$inequality_of_term'(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$inequality_of_term'(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s39.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s39, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_40 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(A@<B):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(A@<B):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s40.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s40, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_41 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$before'(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$before'(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s41.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s41, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_42 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(A@>B):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(A@>B):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s42.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s42, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_43 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$after'(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$after'(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s43.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s43, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_44 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(A@=<B):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(A@=<B):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s44.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s44, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_45 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$not_after'(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$not_after'(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s45.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s45, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_46 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(A@>=B):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(A@>=B):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s46.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s46, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_47 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$not_before'(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$not_before'(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s47.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s47, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_48 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(?=(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(?=(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s48.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s48, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_49 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$identical_or_cannot_unify'(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$identical_or_cannot_unify'(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s49.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s49, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_50 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(compare(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(compare(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s50.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s50, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_51 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(sort(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(sort(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s51.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s51, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_52 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(keysort(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(keysort(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s52.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s52, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_53 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(merge(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(merge(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s53.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s53, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_54 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(arg(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(arg(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s54.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s54, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_55 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(functor(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(functor(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s55.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s55, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_56 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(A=..B):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(A=..B):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s56.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s56, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_57 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$univ'(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$univ'(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s57.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s57, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_58 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(copy_term(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(copy_term(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s58.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s58, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_59 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(A is B):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(A is B):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s59.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s59, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_60 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$abs'(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$abs'(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s60.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s60, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_61 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$asin'(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$asin'(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s61.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s61, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_62 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$acos'(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$acos'(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s62.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s62, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_63 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$atan'(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$atan'(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s63.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s63, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_64 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$bitwise_conj'(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$bitwise_conj'(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s64.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s64, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_65 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$bitwise_disj'(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$bitwise_disj'(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s65.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s65, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_66 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$bitwise_exclusive_or'(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$bitwise_exclusive_or'(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s66.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s66, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_67 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$bitwise_neg'(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$bitwise_neg'(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s67.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s67, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_68 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$ceil'(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$ceil'(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s68.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s68, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_69 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$cos'(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$cos'(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s69.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s69, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_70 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$degrees'(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$degrees'(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s70.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s70, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_71 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$exp'(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$exp'(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s71.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s71, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_72 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$float'(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$float'(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s72.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s72, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_73 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$float_integer_part'(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$float_integer_part'(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s73.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s73, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_74 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$float_fractional_part'(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$float_fractional_part'(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s74.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s74, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_75 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$float_quotient'(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$float_quotient'(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s75.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s75, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_76 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$floor'(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$floor'(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s76.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s76, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_77 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$int_quotient'(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$int_quotient'(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s77.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s77, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_78 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$log'(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$log'(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s78.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s78, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_79 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$max'(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$max'(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s79.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s79, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_80 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$min'(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$min'(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s80.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s80, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_81 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$minus'(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$minus'(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s81.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s81, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_82 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$mod'(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$mod'(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s82.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s82, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_83 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$multi'(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$multi'(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s83.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s83, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_84 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$plus'(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$plus'(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s84.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s84, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_85 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$pow'(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$pow'(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s85.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s85, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_86 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$radians'(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$radians'(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s86.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s86, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_87 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$rint'(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$rint'(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s87.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s87, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_88 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$round'(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$round'(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s88.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s88, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_89 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$shift_left'(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$shift_left'(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s89.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s89, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_90 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$shift_right'(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$shift_right'(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s90.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s90, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_91 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$sign'(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$sign'(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s91.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s91, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_92 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$sin'(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$sin'(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s92.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s92, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_93 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$sqrt'(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$sqrt'(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s93.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s93, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_94 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$tan'(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$tan'(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s94.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s94, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_95 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$truncate'(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$truncate'(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s95.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s95, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_96 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(A=:=B):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(A=:=B):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s96.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s96, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_97 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$arith_equal'(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$arith_equal'(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s97.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s97, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_98 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(A=\=B):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(A=\=B):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s98.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s98, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_99 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$arith_not_equal'(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$arith_not_equal'(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s99.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s99, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_100 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(A<B):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(A<B):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s100.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s100, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_101 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$less_than'(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$less_than'(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s101.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s101, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_102 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(A=<B):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(A=<B):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s102.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s102, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_103 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$less_or_equal'(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$less_or_equal'(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s103.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s103, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_104 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(A>B):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(A>B):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s104.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s104, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_105 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$greater_than'(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$greater_than'(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s105.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s105, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_106 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(A>=B):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(A>=B):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s106.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s106, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_107 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$greater_or_equal'(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$greater_or_equal'(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s107.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s107, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_108 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(clause(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(clause(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s108.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s108, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_109 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(initialization(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(initialization(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s109.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s109, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_110 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$new_indexing_hash'(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$new_indexing_hash'(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s110.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s110, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_111 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(assert(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(assert(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s111.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s111, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_112 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(assertz(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(assertz(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s112.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s112, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_113 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(asserta(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(asserta(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s113.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s113, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_114 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(retract(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(retract(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s114.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s114, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_115 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(abolish(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(abolish(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s115.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s115, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_116 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(retractall(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(retractall(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s116.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s116, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_117 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(findall(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(findall(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s117.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s117, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_118 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(bagof(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(bagof(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s118.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s118, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_119 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(setof(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(setof(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s119.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s119, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_120 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(current_input(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(current_input(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s120.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s120, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_121 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(current_output(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(current_output(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s121.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s121, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_122 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(set_input(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(set_input(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s122.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s122, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_123 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(set_output(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(set_output(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s123.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s123, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_124 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(open(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(open(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s124.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s124, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_125 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(open(A,B,C,D)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(open(A,B,C,D)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s125.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s125, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_126 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(close(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(close(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s126.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s126, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_127 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(close(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(close(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s127.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s127, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_128 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(flush_output(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(flush_output(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s128.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s128, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_129 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(flush_output):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(flush_output):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s129))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s129, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_130 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(stream_property(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(stream_property(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s130.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s130, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_131 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(get_char(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(get_char(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s131.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s131, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_132 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(get_char(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(get_char(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s132.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s132, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_133 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(get_code(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(get_code(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s133.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s133, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_134 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(get_code(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(get_code(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s134.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s134, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_135 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(peek_char(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(peek_char(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s135.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s135, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_136 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(peek_char(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(peek_char(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s136.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s136, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_137 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(peek_code(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(peek_code(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s137.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s137, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_138 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(peek_code(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(peek_code(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s138.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s138, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_139 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(put_char(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(put_char(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s139.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s139, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_140 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(put_char(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(put_char(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s140.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s140, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_141 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(put_code(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(put_code(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s141.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s141, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_142 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(put_code(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(put_code(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s142.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s142, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_143 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(nl):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(nl):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s143))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s143, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_144 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(nl(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(nl(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s144.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s144, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_145 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(get0(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(get0(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s145.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s145, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_146 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(get0(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(get0(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s146.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s146, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_147 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(get(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(get(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s147.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s147, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_148 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(get(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(get(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s148.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s148, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_149 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(put(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(put(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s149.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s149, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_150 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(put(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(put(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s150.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s150, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_151 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(tab(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(tab(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s151.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s151, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_152 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(tab(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(tab(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s152.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s152, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_153 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(skip(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(skip(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s153.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s153, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_154 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(skip(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(skip(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s154.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s154, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_155 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(get_byte(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(get_byte(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s155.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s155, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_156 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(get_byte(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(get_byte(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s156.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s156, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_157 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(peek_byte(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(peek_byte(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s157.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s157, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_158 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(peek_byte(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(peek_byte(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s158.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s158, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_159 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(put_byte(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(put_byte(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s159.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s159, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_160 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(put_byte(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(put_byte(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s160.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s160, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_161 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(read(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(read(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s161.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s161, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_162 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(read(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(read(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s162.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s162, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_163 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(read_with_variables(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(read_with_variables(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s163.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s163, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_164 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(read_with_variables(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(read_with_variables(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s164.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s164, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_165 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(read_line(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(read_line(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s165.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s165, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_166 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(read_line(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(read_line(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s166.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s166, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_167 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(write(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(write(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s167.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s167, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_168 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(write(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(write(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s168.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s168, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_169 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(writeq(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(writeq(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s169.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s169, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_170 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(writeq(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(writeq(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s170.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s170, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_171 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(write_canonical(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(write_canonical(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s171.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s171, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_172 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(write_canonical(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(write_canonical(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s172.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s172, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_173 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(write_term(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(write_term(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s173.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s173, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_174 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(write_term(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(write_term(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s174.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s174, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_175 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(op(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(op(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s175.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s175, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_176 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(current_op(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(current_op(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s176.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s176, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_177 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(\+A):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(\+A):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s177.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s177, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_178 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(once(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(once(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s178.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s178, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_179 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(repeat):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(repeat):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s179))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s179, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_180 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(atom_length(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(atom_length(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s180.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s180, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_181 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(atom_concat(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(atom_concat(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s181.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s181, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_182 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(sub_atom(A,B,C,D,E)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(sub_atom(A,B,C,D,E)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s182.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s182, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_183 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(atom_chars(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(atom_chars(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s183.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s183, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_184 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(atom_codes(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(atom_codes(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s184.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s184, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_185 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(char_code(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(char_code(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s185.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s185, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_186 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(number_chars(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(number_chars(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s186.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s186, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_187 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(number_codes(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(number_codes(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s187.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s187, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_188 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(name(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(name(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s188.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s188, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_189 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(set_prolog_flag(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(set_prolog_flag(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s189.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s189, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_190 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(current_prolog_flag(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(current_prolog_flag(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s190.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s190, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_191 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(halt):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(halt):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s191))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s191, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_192 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(halt(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(halt(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s192.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s192, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_193 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(abort):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(abort):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s193))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s193, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_194 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('C'(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('C'(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s194.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s194, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_195 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(expand_term(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(expand_term(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s195.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s195, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_196 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(new_hash(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(new_hash(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s196.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s196, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_197 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(new_hash(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(new_hash(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s197.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s197, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_198 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(hash_clear(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(hash_clear(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s198.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s198, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_199 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(hash_contains_key(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(hash_contains_key(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s199.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s199, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_200 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(hash_get(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(hash_get(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s200.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s200, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_201 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(hash_is_empty(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(hash_is_empty(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s201.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s201, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_202 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(hash_keys(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(hash_keys(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s202.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s202, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_203 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(hash_map(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(hash_map(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s203.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s203, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_204 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(hash_put(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(hash_put(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s204.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s204, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_205 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(hash_remove(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(hash_remove(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s205.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s205, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_206 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(hash_size(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(hash_size(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s206.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s206, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_207 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate('$get_hash_manager'(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate('$get_hash_manager'(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s207.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s207, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_208 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(java_constructor0(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(java_constructor0(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s208.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s208, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_209 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(java_constructor(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(java_constructor(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s209.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s209, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_210 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(java_declared_constructor0(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(java_declared_constructor0(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s210.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s210, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_211 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(java_declared_constructor(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(java_declared_constructor(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s211.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s211, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_212 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(java_method0(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(java_method0(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s212.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s212, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_213 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(java_method(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(java_method(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s213.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s213, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_214 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(java_declared_method0(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(java_declared_method0(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s214.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s214, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_215 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(java_declared_method(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(java_declared_method(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s215.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s215, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_216 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(java_get_field0(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(java_get_field0(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s216.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s216, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_217 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(java_get_field(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(java_get_field(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s217.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s217, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_218 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(java_get_declared_field0(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(java_get_declared_field0(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s218.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s218, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_219 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(java_get_declared_field(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(java_get_declared_field(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s219.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s219, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_220 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(java_set_field0(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(java_set_field0(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s220.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s220, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_221 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(java_set_field(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(java_set_field(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s221.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s221, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_222 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(java_set_declared_field0(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(java_set_declared_field0(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s222.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s222, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_223 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(java_set_declared_field(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(java_set_declared_field(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s223.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s223, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_224 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(java_conversion(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(java_conversion(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s224.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s224, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_225 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(cafeteria):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(cafeteria):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s225))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s225, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_226 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(consult(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(consult(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s226.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s226, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_227 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(trace):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(trace):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s227))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s227, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_228 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(notrace):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(notrace):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s228))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s228, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_229 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(debug):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(debug):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s229))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s229, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_230 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(nodebug):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(nodebug):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s230))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s230, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_231 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(leash(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(leash(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s231.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s231, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_232 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(spy(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(spy(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s232.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s232, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_233 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(nospy(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(nospy(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s233.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s233, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_234 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(nospyall):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(nospyall):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s234))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s234, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_235 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(listing):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(listing):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s235))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s235, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_236 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(listing(A)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(listing(A)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s236.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s236, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_237 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(length(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(length(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s237.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s237, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_238 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(numbervars(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(numbervars(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s238.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s238, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_239 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(statistics(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(statistics(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s239.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s239, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_240 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(member(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(member(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s240.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s240, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_241 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(max_list(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(max_list(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s241.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s241, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_242 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(max_list(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(max_list(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s242.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s242, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_243 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(sumlist(A,B)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(sumlist(A,B)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s243.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s243, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_system_predicate_1_244 extends PRED_system_predicate_1 {
    public Predicate exec(Prolog engine) {
    // system_predicate(sumlist(A,B,C)):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // system_predicate(sumlist(A,B,C)):-[]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s244.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s244, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}
