package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>expand_term/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_expand_term_2 extends Predicate {
    static Predicate _expand_term_2_sub_1 = new PRED_expand_term_2_sub_1();
    static Predicate _expand_term_2_sub_2 = new PRED_expand_term_2_sub_2();
    static Predicate _expand_term_2_1 = new PRED_expand_term_2_1();
    static Predicate _expand_term_2_2 = new PRED_expand_term_2_2();
    static Predicate _expand_term_2_3 = new PRED_expand_term_2_3();

    public Term arg1, arg2;

    public PRED_expand_term_2(Term a1, Term a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_expand_term_2(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String toString() {
        return "expand_term(" + arg1 + "," + arg2 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_expand_term_2_1, _expand_term_2_sub_1);
    }
}

class PRED_expand_term_2_sub_1 extends PRED_expand_term_2 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_expand_term_2_2, _expand_term_2_sub_2);
    }
}

class PRED_expand_term_2_sub_2 extends PRED_expand_term_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_expand_term_2_3);
    }
}

class PRED_expand_term_2_1 extends PRED_expand_term_2 {
    public Predicate exec(Prolog engine) {
    // expand_term(A,B):-var(A),!,A=B
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // expand_term(A,B):-['$get_level'(C),var(A),'$cut'(C),'$unify'(A,B)]
        a3 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(3))
        if (! a3.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of var(a(1))
        a1 = a1.dereference();
        if (! a1.isVariable()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(3))
        a3 = a3.dereference();
        if (! a3.isInteger()) {
            throw new IllegalTypeException("integer", a3);
        } else {
            engine.cut(((IntegerTerm) a3).intValue());
        }
        //END inline expansion
        //START inline expansion of $unify(a(1),a(2))
        if (! a1.unify(a2, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        return cont;
    }
}

class PRED_expand_term_2_2 extends PRED_expand_term_2 {
    public Predicate exec(Prolog engine) {
    // expand_term(A,B):-'$dcg_expansion'(A,C),!,C=B
        Term a1, a2, a3, a4;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // expand_term(A,B):-['$get_level'(C),'$dcg_expansion'(A,D),'$cut'(C),'$unify'(D,B)]
        a3 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(3))
        if (! a3.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a4 = new VariableTerm(engine);
        p1 = new PRED_$unify_2(a4, a2, cont);
        p2 = new PRED_$cut_1(a3, p1);
        return new PRED_$dcg_expansion_2(a1, a4, p2);
    }
}

class PRED_expand_term_2_3 extends PRED_expand_term_2 {
    public Predicate exec(Prolog engine) {
    // expand_term(A,A):-true
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // expand_term(A,A):-[]
        if (! a1.unify(a2, engine.trail))
            return engine.fail();
        return cont;
    }
}
