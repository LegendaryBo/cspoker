package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$update_indexing_hash'/4</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$update_indexing_hash_4 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("a");
    static SymbolTerm s2 = SymbolTerm.makeSymbol("z");
    static Predicate _fail_0 = new PRED_fail_0();
    static Predicate _$update_indexing_hash_4_var = new PRED_$update_indexing_hash_4_var();
    static Predicate _$update_indexing_hash_4_var_1 = new PRED_$update_indexing_hash_4_var_1();
    static Predicate _$update_indexing_hash_4_con = new PRED_$update_indexing_hash_4_con();
    static Predicate _$update_indexing_hash_4_1 = new PRED_$update_indexing_hash_4_1();
    static Predicate _$update_indexing_hash_4_2 = new PRED_$update_indexing_hash_4_2();
    static java.util.Hashtable<Term, Predicate> con = new java.util.Hashtable<Term, Predicate>(2);
    static {
        con.put(s1, _$update_indexing_hash_4_1);
        con.put(s2, _$update_indexing_hash_4_2);
    }

    public Term arg1, arg2, arg3, arg4;

    public PRED_$update_indexing_hash_4(Term a1, Term a2, Term a3, Term a4, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        this.cont = cont;
    }

    public PRED_$update_indexing_hash_4(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        this.cont = cont;
    }

    public int arity() { return 4; }

    public String toString() {
        return "$update_indexing_hash(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.aregs[4] = arg4;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$update_indexing_hash_4_var, _fail_0, _fail_0, _$update_indexing_hash_4_con, _fail_0, _fail_0);
    }
}

class PRED_$update_indexing_hash_4_var extends PRED_$update_indexing_hash_4 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$update_indexing_hash_4_1, _$update_indexing_hash_4_var_1);
    }
}

class PRED_$update_indexing_hash_4_var_1 extends PRED_$update_indexing_hash_4 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$update_indexing_hash_4_2);
    }
}

class PRED_$update_indexing_hash_4_con extends PRED_$update_indexing_hash_4 {
    public Predicate exec(Prolog engine) {
        return engine.switch_on_hash(con, _fail_0);
    }
}

class PRED_$update_indexing_hash_4_1 extends PRED_$update_indexing_hash_4 {
    public Predicate exec(Prolog engine) {
    // '$update_indexing_hash'(a,A,B,C):-!,'$hash_addz_all'(A,B,C)
        Term a1, a2, a3, a4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // '$update_indexing_hash'(a,A,B,C):-['$neck_cut','$hash_addz_all'(A,B,C)]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s1))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return new PRED_$hash_addz_all_3(a2, a3, a4, cont);
    }
}

class PRED_$update_indexing_hash_4_2 extends PRED_$update_indexing_hash_4 {
    public Predicate exec(Prolog engine) {
    // '$update_indexing_hash'(z,A,B,C):-!,'$hash_adda_all'(A,B,C)
        Term a1, a2, a3, a4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // '$update_indexing_hash'(z,A,B,C):-['$neck_cut','$hash_adda_all'(A,B,C)]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s2))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s2, engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return new PRED_$hash_adda_all_3(a2, a3, a4, cont);
    }
}
