package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.ListTerm;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.SymbolTerm;
import jp.ac.kobe_u.cs.prolog.lang.Term;
import jp.ac.kobe_u.cs.prolog.lang.VariableTerm;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$merge'/5</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$merge_5 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("[]");
    static Predicate _$merge_5_var = new PRED_$merge_5_var();
    static Predicate _$merge_5_var_1 = new PRED_$merge_5_var_1();
    static Predicate _$merge_5_var_2 = new PRED_$merge_5_var_2();
    static Predicate _$merge_5_con = new PRED_$merge_5_con();
    static Predicate _$merge_5_con_1 = new PRED_$merge_5_con_1();
    static Predicate _$merge_5_lis = new PRED_$merge_5_lis();
    static Predicate _$merge_5_lis_1 = new PRED_$merge_5_lis_1();
    static Predicate _$merge_5_1 = new PRED_$merge_5_1();
    static Predicate _$merge_5_2 = new PRED_$merge_5_2();
    static Predicate _$merge_5_3 = new PRED_$merge_5_3();

    public Term arg1, arg2, arg3, arg4, arg5;

    public PRED_$merge_5(Term a1, Term a2, Term a3, Term a4, Term a5, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        arg5 = a5;
        this.cont = cont;
    }

    public PRED_$merge_5(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        arg5 = args[4];
        this.cont = cont;
    }

    public int arity() { return 5; }

    public String toString() {
        return "$merge(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + "," + arg5 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.aregs[4] = arg4;
        engine.aregs[5] = arg5;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$merge_5_var, _$merge_5_3, _$merge_5_3, _$merge_5_con, _$merge_5_3, _$merge_5_lis);
    }
}

class PRED_$merge_5_var extends PRED_$merge_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$merge_5_1, _$merge_5_var_1);
    }
}

class PRED_$merge_5_var_1 extends PRED_$merge_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$merge_5_2, _$merge_5_var_2);
    }
}

class PRED_$merge_5_var_2 extends PRED_$merge_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$merge_5_3);
    }
}

class PRED_$merge_5_con extends PRED_$merge_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$merge_5_2, _$merge_5_con_1);
    }
}

class PRED_$merge_5_con_1 extends PRED_$merge_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$merge_5_3);
    }
}

class PRED_$merge_5_lis extends PRED_$merge_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$merge_5_1, _$merge_5_lis_1);
    }
}

class PRED_$merge_5_lis_1 extends PRED_$merge_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$merge_5_3);
    }
}

class PRED_$merge_5_1 extends PRED_$merge_5 {
    public Predicate exec(Prolog engine) {
    // '$merge'([A|B],[C|D],[E|F],G,H):-!,'$compare'(G,H,A,C,I),'$dummy_4_builtins.pl'(C,A,B,G,E,F,I,H,D)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$merge'([A|B],[C|D],[E|F],G,H):-['$neck_cut','$compare'(G,H,A,C,I),'$dummy_4_builtins.pl'(C,A,B,G,E,F,I,H,D)]
        a1 = a1.dereference();
        if (a1.isList()){
            Term[] args = {((ListTerm)a1).car(), ((ListTerm)a1).cdr()};
            a6 = args[0];
            a7 = args[1];
        } else if (a1.isVariable()){
            a6 = new VariableTerm(engine);
            a7 = new VariableTerm(engine);
            ((VariableTerm) a1).bind(new ListTerm(a6, a7), engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isList()){
            Term[] args = {((ListTerm)a2).car(), ((ListTerm)a2).cdr()};
            a8 = args[0];
            a9 = args[1];
        } else if (a2.isVariable()){
            a8 = new VariableTerm(engine);
            a9 = new VariableTerm(engine);
            ((VariableTerm) a2).bind(new ListTerm(a8, a9), engine.trail);
        } else {
            return engine.fail();
        }
        a3 = a3.dereference();
        if (a3.isList()){
            Term[] args = {((ListTerm)a3).car(), ((ListTerm)a3).cdr()};
            a10 = args[0];
            a11 = args[1];
        } else if (a3.isVariable()){
            a10 = new VariableTerm(engine);
            a11 = new VariableTerm(engine);
            ((VariableTerm) a3).bind(new ListTerm(a10, a11), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        a12 = new VariableTerm(engine);
        p1 = new PRED_$dummy_4_builtins$002Epl_9(a8, a6, a7, a4, a10, a11, a12, a5, a9, cont);
        return new PRED_$compare_5(a4, a5, a6, a8, a12, p1);
    }
}

class PRED_$merge_5_2 extends PRED_$merge_5 {
    public Predicate exec(Prolog engine) {
    // '$merge'([],A,A,B,C):-!
        Term a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$merge'([],A,A,B,C):-['$neck_cut']
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s1))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        if (! a2.unify(a3, engine.trail))
            return engine.fail();
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_$merge_5_3 extends PRED_$merge_5 {
    public Predicate exec(Prolog engine) {
    // '$merge'(A,[],A,B,C):-true
        Term a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$merge'(A,[],A,B,C):-[]
        a2 = a2.dereference();
        if (a2.isSymbol()){
            if (! a2.equals(s1))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        if (! a1.unify(a3, engine.trail))
            return engine.fail();
        return cont;
    }
}
