package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.IllegalTypeException;
import jp.ac.kobe_u.cs.prolog.lang.IntegerTerm;
import jp.ac.kobe_u.cs.prolog.lang.ListTerm;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.Term;
import jp.ac.kobe_u.cs.prolog.lang.VariableTerm;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$builtin_memq'/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$builtin_memq_2 extends Predicate {
    static Predicate _$builtin_memq_2_top = new PRED_$builtin_memq_2_top();
    static Predicate _$builtin_memq_2_sub_1 = new PRED_$builtin_memq_2_sub_1();
    static Predicate _$builtin_memq_2_1 = new PRED_$builtin_memq_2_1();
    static Predicate _$builtin_memq_2_2 = new PRED_$builtin_memq_2_2();

    public Term arg1, arg2;

    public PRED_$builtin_memq_2(Term a1, Term a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_$builtin_memq_2(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String toString() {
        return "$builtin_memq(" + arg1 + "," + arg2 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.cont = cont;
        return _$builtin_memq_2_top;
    }
}

class PRED_$builtin_memq_2_top extends PRED_$builtin_memq_2 {
    public Predicate exec(Prolog engine) {
        engine.setB0();
        return engine.jtry(_$builtin_memq_2_1, _$builtin_memq_2_sub_1);
    }
}

class PRED_$builtin_memq_2_sub_1 extends PRED_$builtin_memq_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$builtin_memq_2_2);
    }
}

class PRED_$builtin_memq_2_1 extends PRED_$builtin_memq_2 {
    public Predicate exec(Prolog engine) {
    // '$builtin_memq'(A,[B|C]):-A==B,!
        Term a1, a2, a3, a4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$builtin_memq'(A,[B|C]):-['$get_level'(D),'$equality_of_term'(A,B),'$cut'(D)]
        a2 = a2.dereference();
        if (a2.isList()){
            Term[] args = {((ListTerm)a2).car(), ((ListTerm)a2).cdr()};
            a3 = args[0];
        } else if (a2.isVariable()){
            a3 = new VariableTerm(engine);
            ((VariableTerm) a2).bind(new ListTerm(a3, new VariableTerm(engine)), engine.trail);
        } else {
            return engine.fail();
        }
        a4 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(4))
        if (! a4.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $equality_of_term(a(1),a(3))
        a1 = a1.dereference();
        a3 = a3.dereference();
        if (! a1.equals(a3)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(4))
        a4 = a4.dereference();
        if (! a4.isInteger()) {
            throw new IllegalTypeException("integer", a4);
        } else {
            engine.cut(((IntegerTerm) a4).intValue());
        }
        //END inline expansion
        return cont;
    }
}

class PRED_$builtin_memq_2_2 extends PRED_$builtin_memq_2 {
    public Predicate exec(Prolog engine) {
    // '$builtin_memq'(A,[B|C]):-'$builtin_memq'(A,C)
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$builtin_memq'(A,[B|C]):-['$builtin_memq'(A,C)]
        a2 = a2.dereference();
        if (a2.isList()){
            Term[] args = {((ListTerm)a2).car(), ((ListTerm)a2).cdr()};
            a3 = args[1];
        } else if (a2.isVariable()){
            a3 = new VariableTerm(engine);
            ((VariableTerm) a2).bind(new ListTerm(new VariableTerm(engine), a3), engine.trail);
        } else {
            return engine.fail();
        }
        engine.aregs[1] = a1;
        engine.aregs[2] = a3;
        engine.cont = cont;
        return _$builtin_memq_2_top;
    }
}
