package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.IntegerTerm;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.StructureTerm;
import jp.ac.kobe_u.cs.prolog.lang.SymbolTerm;
import jp.ac.kobe_u.cs.prolog.lang.Term;
import jp.ac.kobe_u.cs.prolog.lang.VariableTerm;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$set_prolog_flag0'/4</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$set_prolog_flag0_4 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("no");
    static SymbolTerm s2 = SymbolTerm.makeSymbol("permission", 4);
    static SymbolTerm s3 = SymbolTerm.makeSymbol("modify");
    static SymbolTerm s4 = SymbolTerm.makeSymbol("flag");
    static SymbolTerm s5 = SymbolTerm.makeSymbol("set_prolog_flag", 2);
    static SymbolTerm s6 = SymbolTerm.makeSymbol("domain", 2);
    static SymbolTerm s7 = SymbolTerm.makeSymbol("atom");
    static SymbolTerm s8 = SymbolTerm.makeSymbol("flag_value");
    static Term[] s9 = {s7, s8};
    static StructureTerm s10 = new StructureTerm(s6, s9);
    static IntegerTerm si11 = new IntegerTerm(2);
    static Predicate _$set_prolog_flag0_4_var = new PRED_$set_prolog_flag0_4_var();
    static Predicate _$set_prolog_flag0_4_var_1 = new PRED_$set_prolog_flag0_4_var_1();
    static Predicate _$set_prolog_flag0_4_var_2 = new PRED_$set_prolog_flag0_4_var_2();
    static Predicate _$set_prolog_flag0_4_int = new PRED_$set_prolog_flag0_4_int();
    static Predicate _$set_prolog_flag0_4_int_1 = new PRED_$set_prolog_flag0_4_int_1();
    static Predicate _$set_prolog_flag0_4_1 = new PRED_$set_prolog_flag0_4_1();
    static Predicate _$set_prolog_flag0_4_2 = new PRED_$set_prolog_flag0_4_2();
    static Predicate _$set_prolog_flag0_4_3 = new PRED_$set_prolog_flag0_4_3();

    public Term arg1, arg2, arg3, arg4;

    public PRED_$set_prolog_flag0_4(Term a1, Term a2, Term a3, Term a4, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        this.cont = cont;
    }

    public PRED_$set_prolog_flag0_4(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        this.cont = cont;
    }

    public int arity() { return 4; }

    public String toString() {
        return "$set_prolog_flag0(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.aregs[4] = arg4;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$set_prolog_flag0_4_var, _$set_prolog_flag0_4_int, _$set_prolog_flag0_4_int, _$set_prolog_flag0_4_var, _$set_prolog_flag0_4_int, _$set_prolog_flag0_4_int);
    }
}

class PRED_$set_prolog_flag0_4_var extends PRED_$set_prolog_flag0_4 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$set_prolog_flag0_4_1, _$set_prolog_flag0_4_var_1);
    }
}

class PRED_$set_prolog_flag0_4_var_1 extends PRED_$set_prolog_flag0_4 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$set_prolog_flag0_4_2, _$set_prolog_flag0_4_var_2);
    }
}

class PRED_$set_prolog_flag0_4_var_2 extends PRED_$set_prolog_flag0_4 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$set_prolog_flag0_4_3);
    }
}

class PRED_$set_prolog_flag0_4_int extends PRED_$set_prolog_flag0_4 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$set_prolog_flag0_4_2, _$set_prolog_flag0_4_int_1);
    }
}

class PRED_$set_prolog_flag0_4_int_1 extends PRED_$set_prolog_flag0_4 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$set_prolog_flag0_4_3);
    }
}

class PRED_$set_prolog_flag0_4_1 extends PRED_$set_prolog_flag0_4 {
    public Predicate exec(Prolog engine) {
    // '$set_prolog_flag0'(no,A,B,C):-!,illarg(permission(modify,flag,A,D),set_prolog_flag(A,B),E)
        Term a1, a2, a3, a4, a5, a6;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // '$set_prolog_flag0'(no,A,B,C):-['$neck_cut',illarg(permission(modify,flag,A,D),set_prolog_flag(A,B),E)]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s1))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        Term[] y1 = {s3, s4, a2, new VariableTerm(engine)};
        a5 = new StructureTerm(s2, y1);
        Term[] y2 = {a2, a3};
        a6 = new StructureTerm(s5, y2);
        return new PRED_illarg_3(a5, a6, new VariableTerm(engine), cont);
    }
}

class PRED_$set_prolog_flag0_4_2 extends PRED_$set_prolog_flag0_4 {
    public Predicate exec(Prolog engine) {
    // '$set_prolog_flag0'(A,B,C,D):-'$builtin_member'(C,D),!,'$set_prolog_impl_flag'(B,C)
        Term a1, a2, a3, a4, a5;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // '$set_prolog_flag0'(A,B,C,D):-['$get_level'(E),'$builtin_member'(C,D),'$cut'(E),'$set_prolog_impl_flag'(B,C)]
        a5 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(5))
        if (! a5.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        p1 = new PRED_$set_prolog_impl_flag_2(a2, a3, cont);
        p2 = new PRED_$cut_1(a5, p1);
        return new PRED_$builtin_member_2(a3, a4, p2);
    }
}

class PRED_$set_prolog_flag0_4_3 extends PRED_$set_prolog_flag0_4 {
    public Predicate exec(Prolog engine) {
    // '$set_prolog_flag0'(A,B,C,D):-illarg(domain(atom,flag_value),set_prolog_flag(B,C),2)
        Term a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // '$set_prolog_flag0'(A,B,C,D):-[illarg(domain(atom,flag_value),set_prolog_flag(B,C),2)]
        Term[] y1 = {a2, a3};
        a5 = new StructureTerm(s5, y1);
        return new PRED_illarg_3(s10, a5, si11, cont);
    }
}
