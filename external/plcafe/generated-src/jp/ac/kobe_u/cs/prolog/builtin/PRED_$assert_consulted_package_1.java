package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.IntegerTerm;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.StructureTerm;
import jp.ac.kobe_u.cs.prolog.lang.SymbolTerm;
import jp.ac.kobe_u.cs.prolog.lang.Term;
import jp.ac.kobe_u.cs.prolog.lang.VariableTerm;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$assert_consulted_package'/1</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$assert_consulted_package_1 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol(":", 2);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("jp.ac.kobe_u.cs.prolog.builtin");
    static SymbolTerm s3 = SymbolTerm.makeSymbol("$consulted_package", 1);
    static Predicate _$assert_consulted_package_1_sub_1 = new PRED_$assert_consulted_package_1_sub_1();
    static Predicate _$assert_consulted_package_1_1 = new PRED_$assert_consulted_package_1_1();
    static Predicate _$assert_consulted_package_1_2 = new PRED_$assert_consulted_package_1_2();

    public Term arg1;

    public PRED_$assert_consulted_package_1(Term a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_$assert_consulted_package_1(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String toString() {
        return "$assert_consulted_package(" + arg1 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$assert_consulted_package_1_1, _$assert_consulted_package_1_sub_1);
    }
}

class PRED_$assert_consulted_package_1_sub_1 extends PRED_$assert_consulted_package_1 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$assert_consulted_package_1_2);
    }
}

class PRED_$assert_consulted_package_1_1 extends PRED_$assert_consulted_package_1 {
    public Predicate exec(Prolog engine) {
    // '$assert_consulted_package'(A):-clause('$consulted_package'(A),B),!
        Term a1, a2, a3, a4;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$assert_consulted_package'(A):-['$get_level'(B),clause('jp.ac.kobe_u.cs.prolog.builtin':'$consulted_package'(A),C),'$cut'(B)]
        a2 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(2))
        if (! a2.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        Term[] y1 = {a1};
        a3 = new StructureTerm(s3, y1);
        Term[] y2 = {s2, a3};
        a4 = new StructureTerm(s1, y2);
        p1 = new PRED_$cut_1(a2, cont);
        return new PRED_clause_2(a4, new VariableTerm(engine), p1);
    }
}

class PRED_$assert_consulted_package_1_2 extends PRED_$assert_consulted_package_1 {
    public Predicate exec(Prolog engine) {
    // '$assert_consulted_package'(A):-retractall('$consulted_package'(B)),assertz('$consulted_package'(A))
        Term a1, a2, a3, a4, a5;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$assert_consulted_package'(A):-[retractall('jp.ac.kobe_u.cs.prolog.builtin':'$consulted_package'(B)),assertz('jp.ac.kobe_u.cs.prolog.builtin':'$consulted_package'(A))]
        Term[] y1 = {new VariableTerm(engine)};
        a2 = new StructureTerm(s3, y1);
        Term[] y2 = {s2, a2};
        a3 = new StructureTerm(s1, y2);
        Term[] y3 = {a1};
        a4 = new StructureTerm(s3, y3);
        Term[] y4 = {s2, a4};
        a5 = new StructureTerm(s1, y4);
        p1 = new PRED_assertz_1(a5, cont);
        return new PRED_retractall_1(a3, p1);
    }
}
