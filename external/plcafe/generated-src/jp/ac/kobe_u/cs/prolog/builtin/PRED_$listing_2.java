package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$listing'/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$listing_2 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("/", 2);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("type", 1);
    static SymbolTerm s3 = SymbolTerm.makeSymbol("predicate_indicator");
    static Term[] s4 = {s3};
    static StructureTerm s5 = new StructureTerm(s2, s4);
    static SymbolTerm s6 = SymbolTerm.makeSymbol("listing", 1);
    static SymbolTerm s7 = SymbolTerm.makeSymbol(":", 2);
    static IntegerTerm si8 = new IntegerTerm(1);
    static Predicate _$listing_2_var = new PRED_$listing_2_var();
    static Predicate _$listing_2_var_1 = new PRED_$listing_2_var_1();
    static Predicate _$listing_2_var_2 = new PRED_$listing_2_var_2();
    static Predicate _$listing_2_int = new PRED_$listing_2_int();
    static Predicate _$listing_2_int_1 = new PRED_$listing_2_int_1();
    static Predicate _$listing_2_1 = new PRED_$listing_2_1();
    static Predicate _$listing_2_2 = new PRED_$listing_2_2();
    static Predicate _$listing_2_3 = new PRED_$listing_2_3();

    public Term arg1, arg2;

    public PRED_$listing_2(Term a1, Term a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_$listing_2(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String toString() {
        return "$listing(" + arg1 + "," + arg2 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$listing_2_var, _$listing_2_int, _$listing_2_int, _$listing_2_int, _$listing_2_var, _$listing_2_int);
    }
}

class PRED_$listing_2_var extends PRED_$listing_2 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$listing_2_1, _$listing_2_var_1);
    }
}

class PRED_$listing_2_var_1 extends PRED_$listing_2 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$listing_2_2, _$listing_2_var_2);
    }
}

class PRED_$listing_2_var_2 extends PRED_$listing_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$listing_2_3);
    }
}

class PRED_$listing_2_int extends PRED_$listing_2 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$listing_2_1, _$listing_2_int_1);
    }
}

class PRED_$listing_2_int_1 extends PRED_$listing_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$listing_2_3);
    }
}

class PRED_$listing_2_1 extends PRED_$listing_2 {
    public Predicate exec(Prolog engine) {
    // '$listing'(A,B):-var(A),!,'$listing_dynamic_clause'(B,C)
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$listing'(A,B):-['$get_level'(C),var(A),'$cut'(C),'$listing_dynamic_clause'(B,D)]
        a3 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(3))
        if (! a3.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of var(a(1))
        a1 = a1.dereference();
        if (! a1.isVariable()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(3))
        a3 = a3.dereference();
        if (! a3.isInteger()) {
            throw new IllegalTypeException("integer", a3);
        } else {
            engine.cut(((IntegerTerm) a3).intValue());
        }
        //END inline expansion
        return new PRED_$listing_dynamic_clause_2(a2, new VariableTerm(engine), cont);
    }
}

class PRED_$listing_2_2 extends PRED_$listing_2 {
    public Predicate exec(Prolog engine) {
    // '$listing'(A/B,C):-atom(A),integer(B),!,'$listing_dynamic_clause'(C,A/B)
        Term a1, a2, a3, a4, a5, a6;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$listing'(A/B,C):-['$get_level'(D),atom(A),integer(B),'$cut'(D),'$listing_dynamic_clause'(C,A/B)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s1.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a3 = args[0];
            a4 = args[1];
        } else if (a1.isVariable()){
            a3 = new VariableTerm(engine);
            a4 = new VariableTerm(engine);
            Term[] args = {a3, a4};
            ((VariableTerm) a1).bind(new StructureTerm(s1, args), engine.trail);
        } else {
            return engine.fail();
        }
        a5 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(5))
        if (! a5.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of atom(a(3))
        a3 = a3.dereference();
        if (! a3.isSymbol()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of integer(a(4))
        a4 = a4.dereference();
        if (! a4.isInteger()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(5))
        a5 = a5.dereference();
        if (! a5.isInteger()) {
            throw new IllegalTypeException("integer", a5);
        } else {
            engine.cut(((IntegerTerm) a5).intValue());
        }
        //END inline expansion
        Term[] y1 = {a3, a4};
        a6 = new StructureTerm(s1, y1);
        return new PRED_$listing_dynamic_clause_2(a2, a6, cont);
    }
}

class PRED_$listing_2_3 extends PRED_$listing_2 {
    public Predicate exec(Prolog engine) {
    // '$listing'(A,B):-illarg(type(predicate_indicator),listing(B:A),1)
        Term a1, a2, a3, a4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$listing'(A,B):-[illarg(type(predicate_indicator),listing(B:A),1)]
        Term[] y1 = {a2, a1};
        a3 = new StructureTerm(s7, y1);
        Term[] y2 = {a3};
        a4 = new StructureTerm(s6, y2);
        return new PRED_illarg_3(s5, a4, si8, cont);
    }
}
