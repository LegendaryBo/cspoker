package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.IntegerTerm;
import jp.ac.kobe_u.cs.prolog.lang.ListTerm;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.StructureTerm;
import jp.ac.kobe_u.cs.prolog.lang.SymbolTerm;
import jp.ac.kobe_u.cs.prolog.lang.Term;
import jp.ac.kobe_u.cs.prolog.lang.VariableTerm;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$variants_subset'/5</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$variants_subset_5 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("[]");
    static SymbolTerm s2 = SymbolTerm.makeSymbol("+", 2);
    static Predicate _$variants_subset_5_top = new PRED_$variants_subset_5_top();
    static Predicate _fail_0 = new PRED_fail_0();
    static Predicate _$variants_subset_5_var = new PRED_$variants_subset_5_var();
    static Predicate _$variants_subset_5_var_1 = new PRED_$variants_subset_5_var_1();
    static Predicate _$variants_subset_5_var_2 = new PRED_$variants_subset_5_var_2();
    static Predicate _$variants_subset_5_lis = new PRED_$variants_subset_5_lis();
    static Predicate _$variants_subset_5_lis_1 = new PRED_$variants_subset_5_lis_1();
    static Predicate _$variants_subset_5_1 = new PRED_$variants_subset_5_1();
    static Predicate _$variants_subset_5_2 = new PRED_$variants_subset_5_2();
    static Predicate _$variants_subset_5_3 = new PRED_$variants_subset_5_3();

    public Term arg1, arg2, arg3, arg4, arg5;

    public PRED_$variants_subset_5(Term a1, Term a2, Term a3, Term a4, Term a5, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        arg5 = a5;
        this.cont = cont;
    }

    public PRED_$variants_subset_5(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        arg5 = args[4];
        this.cont = cont;
    }

    public int arity() { return 5; }

    public String toString() {
        return "$variants_subset(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + "," + arg5 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.aregs[4] = arg4;
        engine.aregs[5] = arg5;
        engine.cont = cont;
        return _$variants_subset_5_top;
    }
}

class PRED_$variants_subset_5_top extends PRED_$variants_subset_5 {
    public Predicate exec(Prolog engine) {
        engine.setB0();
        return engine.switch_on_term(_$variants_subset_5_var, _fail_0, _fail_0, _$variants_subset_5_1, _fail_0, _$variants_subset_5_lis);
    }
}

class PRED_$variants_subset_5_var extends PRED_$variants_subset_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$variants_subset_5_1, _$variants_subset_5_var_1);
    }
}

class PRED_$variants_subset_5_var_1 extends PRED_$variants_subset_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$variants_subset_5_2, _$variants_subset_5_var_2);
    }
}

class PRED_$variants_subset_5_var_2 extends PRED_$variants_subset_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$variants_subset_5_3);
    }
}

class PRED_$variants_subset_5_lis extends PRED_$variants_subset_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$variants_subset_5_2, _$variants_subset_5_lis_1);
    }
}

class PRED_$variants_subset_5_lis_1 extends PRED_$variants_subset_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$variants_subset_5_3);
    }
}

class PRED_$variants_subset_5_1 extends PRED_$variants_subset_5 {
    public Predicate exec(Prolog engine) {
    // '$variants_subset'([],A,[],[],[]):-!
        Term a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$variants_subset'([],A,[],[],[]):-['$neck_cut']
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s1))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a3 = a3.dereference();
        if (a3.isSymbol()){
            if (! a3.equals(s1))
                return engine.fail();
        } else if (a3.isVariable()){
            ((VariableTerm) a3).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a4 = a4.dereference();
        if (a4.isSymbol()){
            if (! a4.equals(s1))
                return engine.fail();
        } else if (a4.isVariable()){
            ((VariableTerm) a4).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a5 = a5.dereference();
        if (a5.isSymbol()){
            if (! a5.equals(s1))
                return engine.fail();
        } else if (a5.isVariable()){
            ((VariableTerm) a5).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_$variants_subset_5_2 extends PRED_$variants_subset_5 {
    public Predicate exec(Prolog engine) {
    // '$variants_subset'([A+B|C],D,[A+B|E],[B|F],G):-'$term_variant'(D,A),!,'$variants_subset'(C,D,E,F,G)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$variants_subset'([A+B|C],D,[A+B|E],[B|F],G):-['$get_level'(H),'$term_variant'(D,A),'$cut'(H),'$variants_subset'(C,D,E,F,G)]
        a1 = a1.dereference();
        if (a1.isList()){
            Term[] args = {((ListTerm)a1).car(), ((ListTerm)a1).cdr()};
            a6 = args[0];
            a7 = args[1];
        } else if (a1.isVariable()){
            a6 = new VariableTerm(engine);
            a7 = new VariableTerm(engine);
            ((VariableTerm) a1).bind(new ListTerm(a6, a7), engine.trail);
        } else {
            return engine.fail();
        }
        a6 = a6.dereference();
        if (a6.isStructure()){
            if (! s2.equals(((StructureTerm)a6).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a6).args();
            a8 = args[0];
            a9 = args[1];
        } else if (a6.isVariable()){
            a8 = new VariableTerm(engine);
            a9 = new VariableTerm(engine);
            Term[] args = {a8, a9};
            ((VariableTerm) a6).bind(new StructureTerm(s2, args), engine.trail);
        } else {
            return engine.fail();
        }
        a3 = a3.dereference();
        if (a3.isList()){
            Term[] args = {((ListTerm)a3).car(), ((ListTerm)a3).cdr()};
            a10 = args[0];
            a11 = args[1];
        } else if (a3.isVariable()){
            a10 = new VariableTerm(engine);
            a11 = new VariableTerm(engine);
            ((VariableTerm) a3).bind(new ListTerm(a10, a11), engine.trail);
        } else {
            return engine.fail();
        }
        a10 = a10.dereference();
        if (a10.isStructure()){
            if (! s2.equals(((StructureTerm)a10).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a10).args();
            if (! a8.unify(args[0], engine.trail))
                return engine.fail();
            if (! a9.unify(args[1], engine.trail))
                return engine.fail();
        } else if (a10.isVariable()){
            Term[] args = {a8, a9};
            ((VariableTerm) a10).bind(new StructureTerm(s2, args), engine.trail);
        } else {
            return engine.fail();
        }
        a4 = a4.dereference();
        if (a4.isList()){
            Term[] args = {((ListTerm)a4).car(), ((ListTerm)a4).cdr()};
            if (! a9.unify(args[0], engine.trail))
                return engine.fail();
            a12 = args[1];
        } else if (a4.isVariable()){
            a12 = new VariableTerm(engine);
            ((VariableTerm) a4).bind(new ListTerm(a9, a12), engine.trail);
        } else {
            return engine.fail();
        }
        a13 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(13))
        if (! a13.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        p1 = new PRED_$variants_subset_5(a7, a2, a11, a12, a5, cont);
        p2 = new PRED_$cut_1(a13, p1);
        return new PRED_$term_variant_2(a2, a8, p2);
    }
}

class PRED_$variants_subset_5_3 extends PRED_$variants_subset_5 {
    public Predicate exec(Prolog engine) {
    // '$variants_subset'([A|B],C,D,E,[A|F]):-'$variants_subset'(B,C,D,E,F)
        Term a1, a2, a3, a4, a5, a6, a7, a8;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$variants_subset'([A|B],C,D,E,[A|F]):-['$variants_subset'(B,C,D,E,F)]
        a1 = a1.dereference();
        if (a1.isList()){
            Term[] args = {((ListTerm)a1).car(), ((ListTerm)a1).cdr()};
            a6 = args[0];
            a7 = args[1];
        } else if (a1.isVariable()){
            a6 = new VariableTerm(engine);
            a7 = new VariableTerm(engine);
            ((VariableTerm) a1).bind(new ListTerm(a6, a7), engine.trail);
        } else {
            return engine.fail();
        }
        a5 = a5.dereference();
        if (a5.isList()){
            Term[] args = {((ListTerm)a5).car(), ((ListTerm)a5).cdr()};
            if (! a6.unify(args[0], engine.trail))
                return engine.fail();
            a8 = args[1];
        } else if (a5.isVariable()){
            a8 = new VariableTerm(engine);
            ((VariableTerm) a5).bind(new ListTerm(a6, a8), engine.trail);
        } else {
            return engine.fail();
        }
        engine.aregs[1] = a7;
        engine.aregs[2] = a2;
        engine.aregs[3] = a3;
        engine.aregs[4] = a4;
        engine.aregs[5] = a8;
        engine.cont = cont;
        return _$variants_subset_5_top;
    }
}
