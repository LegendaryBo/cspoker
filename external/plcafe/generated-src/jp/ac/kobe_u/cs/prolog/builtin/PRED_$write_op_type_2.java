package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$write_op_type'/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$write_op_type_2 extends Predicate {
    static IntegerTerm si1 = new IntegerTerm(1);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("fx");
    static SymbolTerm s3 = SymbolTerm.makeSymbol("fy");
    static SymbolTerm s4 = SymbolTerm.makeSymbol("xf");
    static SymbolTerm s5 = SymbolTerm.makeSymbol("yf");
    static IntegerTerm si6 = new IntegerTerm(2);
    static SymbolTerm s7 = SymbolTerm.makeSymbol("xfx");
    static SymbolTerm s8 = SymbolTerm.makeSymbol("xfy");
    static SymbolTerm s9 = SymbolTerm.makeSymbol("yfx");
    static Predicate _fail_0 = new PRED_fail_0();
    static Predicate _$write_op_type_2_var = new PRED_$write_op_type_2_var();
    static Predicate _$write_op_type_2_var_1 = new PRED_$write_op_type_2_var_1();
    static Predicate _$write_op_type_2_var_2 = new PRED_$write_op_type_2_var_2();
    static Predicate _$write_op_type_2_var_3 = new PRED_$write_op_type_2_var_3();
    static Predicate _$write_op_type_2_var_4 = new PRED_$write_op_type_2_var_4();
    static Predicate _$write_op_type_2_var_5 = new PRED_$write_op_type_2_var_5();
    static Predicate _$write_op_type_2_var_6 = new PRED_$write_op_type_2_var_6();
    static Predicate _$write_op_type_2_int = new PRED_$write_op_type_2_int();
    static Predicate _$write_op_type_2_int_0 = new PRED_$write_op_type_2_int_0();
    static Predicate _$write_op_type_2_int_0_1 = new PRED_$write_op_type_2_int_0_1();
    static Predicate _$write_op_type_2_int_0_2 = new PRED_$write_op_type_2_int_0_2();
    static Predicate _$write_op_type_2_int_0_3 = new PRED_$write_op_type_2_int_0_3();
    static Predicate _$write_op_type_2_int_1 = new PRED_$write_op_type_2_int_1();
    static Predicate _$write_op_type_2_int_1_1 = new PRED_$write_op_type_2_int_1_1();
    static Predicate _$write_op_type_2_int_1_2 = new PRED_$write_op_type_2_int_1_2();
    static Predicate _$write_op_type_2_1 = new PRED_$write_op_type_2_1();
    static Predicate _$write_op_type_2_2 = new PRED_$write_op_type_2_2();
    static Predicate _$write_op_type_2_3 = new PRED_$write_op_type_2_3();
    static Predicate _$write_op_type_2_4 = new PRED_$write_op_type_2_4();
    static Predicate _$write_op_type_2_5 = new PRED_$write_op_type_2_5();
    static Predicate _$write_op_type_2_6 = new PRED_$write_op_type_2_6();
    static Predicate _$write_op_type_2_7 = new PRED_$write_op_type_2_7();
    static java.util.Hashtable<Term, Predicate> Int = new java.util.Hashtable<Term, Predicate>(2);
    static {
        Int.put(si1, _$write_op_type_2_int_0);
        Int.put(si6, _$write_op_type_2_int_1);
    }

    public Term arg1, arg2;

    public PRED_$write_op_type_2(Term a1, Term a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_$write_op_type_2(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String toString() {
        return "$write_op_type(" + arg1 + "," + arg2 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$write_op_type_2_var, _$write_op_type_2_int, _fail_0, _fail_0, _fail_0, _fail_0);
    }
}

class PRED_$write_op_type_2_var extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$write_op_type_2_1, _$write_op_type_2_var_1);
    }
}

class PRED_$write_op_type_2_var_1 extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$write_op_type_2_2, _$write_op_type_2_var_2);
    }
}

class PRED_$write_op_type_2_var_2 extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$write_op_type_2_3, _$write_op_type_2_var_3);
    }
}

class PRED_$write_op_type_2_var_3 extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$write_op_type_2_4, _$write_op_type_2_var_4);
    }
}

class PRED_$write_op_type_2_var_4 extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$write_op_type_2_5, _$write_op_type_2_var_5);
    }
}

class PRED_$write_op_type_2_var_5 extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$write_op_type_2_6, _$write_op_type_2_var_6);
    }
}

class PRED_$write_op_type_2_var_6 extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$write_op_type_2_7);
    }
}

class PRED_$write_op_type_2_int extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) {
        return engine.switch_on_hash(Int, _fail_0);
    }
}

class PRED_$write_op_type_2_int_0 extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$write_op_type_2_1, _$write_op_type_2_int_0_1);
    }
}

class PRED_$write_op_type_2_int_0_1 extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$write_op_type_2_2, _$write_op_type_2_int_0_2);
    }
}

class PRED_$write_op_type_2_int_0_2 extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$write_op_type_2_3, _$write_op_type_2_int_0_3);
    }
}

class PRED_$write_op_type_2_int_0_3 extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$write_op_type_2_4);
    }
}

class PRED_$write_op_type_2_int_1 extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$write_op_type_2_5, _$write_op_type_2_int_1_1);
    }
}

class PRED_$write_op_type_2_int_1_1 extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$write_op_type_2_6, _$write_op_type_2_int_1_2);
    }
}

class PRED_$write_op_type_2_int_1_2 extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$write_op_type_2_7);
    }
}

class PRED_$write_op_type_2_1 extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) {
    // '$write_op_type'(1,fx):-true
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$write_op_type'(1,fx):-[]
        a1 = a1.dereference();
        if (a1.isInteger()){
            if (((IntegerTerm) a1).intValue() != 1)
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(si1, engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isSymbol()){
            if (! a2.equals(s2))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(s2, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_$write_op_type_2_2 extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) {
    // '$write_op_type'(1,fy):-true
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$write_op_type'(1,fy):-[]
        a1 = a1.dereference();
        if (a1.isInteger()){
            if (((IntegerTerm) a1).intValue() != 1)
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(si1, engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isSymbol()){
            if (! a2.equals(s3))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(s3, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_$write_op_type_2_3 extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) {
    // '$write_op_type'(1,xf):-true
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$write_op_type'(1,xf):-[]
        a1 = a1.dereference();
        if (a1.isInteger()){
            if (((IntegerTerm) a1).intValue() != 1)
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(si1, engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isSymbol()){
            if (! a2.equals(s4))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(s4, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_$write_op_type_2_4 extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) {
    // '$write_op_type'(1,yf):-true
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$write_op_type'(1,yf):-[]
        a1 = a1.dereference();
        if (a1.isInteger()){
            if (((IntegerTerm) a1).intValue() != 1)
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(si1, engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isSymbol()){
            if (! a2.equals(s5))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(s5, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_$write_op_type_2_5 extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) {
    // '$write_op_type'(2,xfx):-true
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$write_op_type'(2,xfx):-[]
        a1 = a1.dereference();
        if (a1.isInteger()){
            if (((IntegerTerm) a1).intValue() != 2)
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(si6, engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isSymbol()){
            if (! a2.equals(s7))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(s7, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_$write_op_type_2_6 extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) {
    // '$write_op_type'(2,xfy):-true
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$write_op_type'(2,xfy):-[]
        a1 = a1.dereference();
        if (a1.isInteger()){
            if (((IntegerTerm) a1).intValue() != 2)
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(si6, engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isSymbol()){
            if (! a2.equals(s8))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(s8, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_$write_op_type_2_7 extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) {
    // '$write_op_type'(2,yfx):-true
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$write_op_type'(2,yfx):-[]
        a1 = a1.dereference();
        if (a1.isInteger()){
            if (((IntegerTerm) a1).intValue() != 2)
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(si6, engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isSymbol()){
            if (! a2.equals(s9))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(s9, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}
