package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.Term;
import jp.ac.kobe_u.cs.prolog.lang.VariableTerm;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>name/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_name_2 extends Predicate {
    static Predicate _name_2_sub_1 = new PRED_name_2_sub_1();
    static Predicate _name_2_1 = new PRED_name_2_1();
    static Predicate _name_2_2 = new PRED_name_2_2();

    public Term arg1, arg2;

    public PRED_name_2(Term a1, Term a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_name_2(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String toString() {
        return "name(" + arg1 + "," + arg2 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_name_2_1, _name_2_sub_1);
    }
}

class PRED_name_2_sub_1 extends PRED_name_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_name_2_2);
    }
}

class PRED_name_2_1 extends PRED_name_2 {
    public Predicate exec(Prolog engine) {
    // name(A,B):-nonvar(A),'$dummy_19_builtins.pl'(A,B)
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // name(A,B):-[nonvar(A),'$dummy_19_builtins.pl'(A,B)]
        //START inline expansion of nonvar(a(1))
        a1 = a1.dereference();
        if (a1.isVariable()) {
            return engine.fail();
        }
        //END inline expansion
        return new PRED_$dummy_19_builtins$002Epl_2(a1, a2, cont);
    }
}

class PRED_name_2_2 extends PRED_name_2 {
    public Predicate exec(Prolog engine) {
    // name(A,B):-var(A),'$dummy_21_builtins.pl'(B,A,C)
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // name(A,B):-[var(A),'$dummy_21_builtins.pl'(B,A,C)]
        //START inline expansion of var(a(1))
        a1 = a1.dereference();
        if (! a1.isVariable()) {
            return engine.fail();
        }
        //END inline expansion
        return new PRED_$dummy_21_builtins$002Epl_3(a2, a1, new VariableTerm(engine), cont);
    }
}
