package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>initialization/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_initialization_2 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("[]");
    static SymbolTerm s2 = SymbolTerm.makeSymbol(":", 2);
    static SymbolTerm s3 = SymbolTerm.makeSymbol("jp.ac.kobe_u.cs.prolog.builtin");
    static Predicate _fail_0 = new PRED_fail_0();
    static Predicate _initialization_2_var = new PRED_initialization_2_var();
    static Predicate _initialization_2_var_1 = new PRED_initialization_2_var_1();
    static Predicate _initialization_2_1 = new PRED_initialization_2_1();
    static Predicate _initialization_2_2 = new PRED_initialization_2_2();

    public Term arg1, arg2;

    public PRED_initialization_2(Term a1, Term a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_initialization_2(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String toString() {
        return "initialization(" + arg1 + "," + arg2 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_initialization_2_var, _fail_0, _fail_0, _initialization_2_1, _fail_0, _initialization_2_2);
    }
}

class PRED_initialization_2_var extends PRED_initialization_2 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_initialization_2_1, _initialization_2_var_1);
    }
}

class PRED_initialization_2_var_1 extends PRED_initialization_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_initialization_2_2);
    }
}

class PRED_initialization_2_1 extends PRED_initialization_2 {
    public Predicate exec(Prolog engine) {
    // initialization([],A):-!,once(A)
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // initialization([],A):-['$neck_cut',once('jp.ac.kobe_u.cs.prolog.builtin':A)]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s1))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        Term[] y1 = {s3, a2};
        a3 = new StructureTerm(s2, y1);
        return new PRED_once_1(a3, cont);
    }
}

class PRED_initialization_2_2 extends PRED_initialization_2 {
    public Predicate exec(Prolog engine) {
    // initialization([A|B],C):-'$new_internal_database'(A),initialization(B,C)
        Term a1, a2, a3, a4;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // initialization([A|B],C):-['$new_internal_database'(A),initialization(B,C)]
        a1 = a1.dereference();
        if (a1.isList()){
            Term[] args = {((ListTerm)a1).car(), ((ListTerm)a1).cdr()};
            a3 = args[0];
            a4 = args[1];
        } else if (a1.isVariable()){
            a3 = new VariableTerm(engine);
            a4 = new VariableTerm(engine);
            ((VariableTerm) a1).bind(new ListTerm(a3, a4), engine.trail);
        } else {
            return engine.fail();
        }
        p1 = new PRED_initialization_2(a4, a2, cont);
        return new PRED_$new_internal_database_1(a3, p1);
    }
}
