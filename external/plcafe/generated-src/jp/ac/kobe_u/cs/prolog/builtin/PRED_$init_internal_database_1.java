package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.IntegerTerm;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.StructureTerm;
import jp.ac.kobe_u.cs.prolog.lang.SymbolTerm;
import jp.ac.kobe_u.cs.prolog.lang.Term;
import jp.ac.kobe_u.cs.prolog.lang.VariableTerm;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$init_internal_database'/1</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$init_internal_database_1 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("$init");
    static IntegerTerm si2 = new IntegerTerm(0);
    static SymbolTerm s3 = SymbolTerm.makeSymbol(":", 2);
    static Predicate _$init_internal_database_1_sub_1 = new PRED_$init_internal_database_1_sub_1();
    static Predicate _$init_internal_database_1_1 = new PRED_$init_internal_database_1_1();
    static Predicate _$init_internal_database_1_2 = new PRED_$init_internal_database_1_2();

    public Term arg1;

    public PRED_$init_internal_database_1(Term a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_$init_internal_database_1(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String toString() {
        return "$init_internal_database(" + arg1 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$init_internal_database_1_1, _$init_internal_database_1_sub_1);
    }
}

class PRED_$init_internal_database_1_sub_1 extends PRED_$init_internal_database_1 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$init_internal_database_1_2);
    }
}

class PRED_$init_internal_database_1_1 extends PRED_$init_internal_database_1 {
    public Predicate exec(Prolog engine) {
    // '$init_internal_database'(A):-'$compiled_predicate'(A,'$init',0),call(A:'$init'),!
        Term a1, a2, a3;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$init_internal_database'(A):-['$get_level'(B),'$compiled_predicate'(A,'$init',0),call(A:'$init'),'$cut'(B)]
        a2 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(2))
        if (! a2.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        Term[] y1 = {a1, s1};
        a3 = new StructureTerm(s3, y1);
        p1 = new PRED_$cut_1(a2, cont);
        p2 = new PRED_call_1(a3, p1);
        return new PRED_$compiled_predicate_3(a1, s1, si2, p2);
    }
}

class PRED_$init_internal_database_1_2 extends PRED_$init_internal_database_1 {
    public Predicate exec(Prolog engine) {
    // '$init_internal_database'(A):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$init_internal_database'(A):-[]
        return cont;
    }
}
