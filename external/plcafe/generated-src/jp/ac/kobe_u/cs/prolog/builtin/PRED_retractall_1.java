package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>retractall/1</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_retractall_1 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol(":", 2);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("retractall", 1);
    static SymbolTerm s3 = SymbolTerm.makeSymbol("access");
    static SymbolTerm s4 = SymbolTerm.makeSymbol("static_procedure");
    static SymbolTerm s5 = SymbolTerm.makeSymbol(":-", 2);
    static Predicate _retractall_1_sub_1 = new PRED_retractall_1_sub_1();
    static Predicate _retractall_1_1 = new PRED_retractall_1_1();
    static Predicate _retractall_1_2 = new PRED_retractall_1_2();

    public Term arg1;

    public PRED_retractall_1(Term a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_retractall_1(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String toString() {
        return "retractall(" + arg1 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_retractall_1_1, _retractall_1_sub_1);
    }
}

class PRED_retractall_1_sub_1 extends PRED_retractall_1 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_retractall_1_2);
    }
}

class PRED_retractall_1_1 extends PRED_retractall_1 {
    public Predicate exec(Prolog engine) {
    // retractall(A):-'$head_to_term'(A,B,C:D,retractall(A)),'$new_internal_database'(C),'$check_procedure_permission'(C:D,access,static_procedure,retractall(A)),'$clause_internal'(C,D,B,E,F),copy_term(E,(B:-G)),'$erase'(F),'$rehash_indexing'(C,D,F),fail
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11;
        Predicate p1, p2, p3, p4, p5, p6, p7;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // retractall(A):-['$head_to_term'(A,B,C:D,retractall(A)),'$new_internal_database'(C),'$check_procedure_permission'(C:D,access,static_procedure,retractall(A)),'$clause_internal'(C,D,B,E,F),copy_term(E,(B:-G)),'$erase'(F),'$rehash_indexing'(C,D,F),fail]
        a2 = new VariableTerm(engine);
        a3 = new VariableTerm(engine);
        a4 = new VariableTerm(engine);
        Term[] y1 = {a3, a4};
        a5 = new StructureTerm(s1, y1);
        Term[] y2 = {a1};
        a6 = new StructureTerm(s2, y2);
        Term[] y3 = {a3, a4};
        a7 = new StructureTerm(s1, y3);
        Term[] y4 = {a1};
        a8 = new StructureTerm(s2, y4);
        a9 = new VariableTerm(engine);
        a10 = new VariableTerm(engine);
        Term[] y5 = {a2, new VariableTerm(engine)};
        a11 = new StructureTerm(s5, y5);
        p1 = new PRED_fail_0(cont);
        p2 = new PRED_$rehash_indexing_3(a3, a4, a10, p1);
        p3 = new PRED_$erase_1(a10, p2);
        p4 = new PRED_copy_term_2(a9, a11, p3);
        p5 = new PRED_$clause_internal_5(a3, a4, a2, a9, a10, p4);
        p6 = new PRED_$check_procedure_permission_4(a7, s3, s4, a8, p5);
        p7 = new PRED_$new_internal_database_1(a3, p6);
        return new PRED_$head_to_term_4(a1, a2, a5, a6, p7);
    }
}

class PRED_retractall_1_2 extends PRED_retractall_1 {
    public Predicate exec(Prolog engine) {
    // retractall(A):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // retractall(A):-[]
        return cont;
    }
}
