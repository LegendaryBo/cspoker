package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.IntegerTerm;
import jp.ac.kobe_u.cs.prolog.lang.ListTerm;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.StructureTerm;
import jp.ac.kobe_u.cs.prolog.lang.SymbolTerm;
import jp.ac.kobe_u.cs.prolog.lang.Term;
import jp.ac.kobe_u.cs.prolog.lang.VariableTerm;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$consult'/1</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$consult_1 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("read");
    static SymbolTerm s2 = SymbolTerm.makeSymbol("file_name", 1);
    static SymbolTerm s3 = SymbolTerm.makeSymbol("info");
    static SymbolTerm s4 = SymbolTerm.makeSymbol("consulting");
    static SymbolTerm s5 = SymbolTerm.makeSymbol("...");
    static SymbolTerm s6 = SymbolTerm.makeSymbol("[]");
    static ListTerm s7 = new ListTerm(s5, s6);
    static SymbolTerm s8 = SymbolTerm.makeSymbol("runtime");
    static SymbolTerm s9 = SymbolTerm.makeSymbol("end_of_file");
    static SymbolTerm s10 = SymbolTerm.makeSymbol("consulted,");
    static SymbolTerm s11 = SymbolTerm.makeSymbol("msec");
    static ListTerm s12 = new ListTerm(s11, s6);

    public Term arg1;

    public PRED_$consult_1(Term a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_$consult_1(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String toString() {
        return "$consult(" + arg1 + ")";
    }

    public Predicate exec(Prolog engine) {
    // '$consult'(A):-'$prolog_file_name'(A,B),open(B,read,C),stream_property(C,file_name(D)),print_message(info,[consulting,D,...]),statistics(runtime,E),'$consult_init'(D),repeat,read(C,F),'$consult_clause'(F),F==end_of_file,!,statistics(runtime,[G,H]),print_message(info,[D,'consulted,',H,msec]),close(C)
        engine.setB0();
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15;
        Predicate p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13;
        a1 = arg1;
    // '$consult'(A):-['$get_level'(B),'$prolog_file_name'(A,C),open(C,read,D),stream_property(D,file_name(E)),print_message(info,[consulting,E,...]),statistics(runtime,F),'$consult_init'(E),repeat,read(D,G),'$consult_clause'(G),'$equality_of_term'(G,end_of_file),'$cut'(B),statistics(runtime,[H,I]),print_message(info,[E,'consulted,',I,msec]),close(D)]
        a2 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(2))
        if (! a2.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a3 = new VariableTerm(engine);
        a4 = new VariableTerm(engine);
        a5 = new VariableTerm(engine);
        Term[] y1 = {a5};
        a6 = new StructureTerm(s2, y1);
        a7 = new ListTerm(a5, s7);
        a8 = new ListTerm(s4, a7);
        a9 = new VariableTerm(engine);
        a10 = new VariableTerm(engine);
        a11 = new ListTerm(a10, s6);
        a12 = new ListTerm(new VariableTerm(engine), a11);
        a13 = new ListTerm(a10, s12);
        a14 = new ListTerm(s10, a13);
        a15 = new ListTerm(a5, a14);
        p1 = new PRED_close_1(a4, cont);
        p2 = new PRED_print_message_2(s3, a15, p1);
        p3 = new PRED_statistics_2(s8, a12, p2);
        p4 = new PRED_$cut_1(a2, p3);
        p5 = new PRED_$equality_of_term_2(a9, s9, p4);
        p6 = new PRED_$consult_clause_1(a9, p5);
        p7 = new PRED_read_2(a4, a9, p6);
        p8 = new PRED_repeat_0(p7);
        p9 = new PRED_$consult_init_1(a5, p8);
        p10 = new PRED_statistics_2(s8, new VariableTerm(engine), p9);
        p11 = new PRED_print_message_2(s3, a8, p10);
        p12 = new PRED_stream_property_2(a4, a6, p11);
        p13 = new PRED_open_3(a3, s1, a4, p12);
        return new PRED_$prolog_file_name_2(a1, a3, p13);
    }
}
