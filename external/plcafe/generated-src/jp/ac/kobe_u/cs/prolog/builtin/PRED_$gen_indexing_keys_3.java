package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$gen_indexing_keys'/3</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$gen_indexing_keys_3 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol(":-", 2);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("all");
    static SymbolTerm s3 = SymbolTerm.makeSymbol("[]");
    static ListTerm s4 = new ListTerm(s2, s3);
    static IntegerTerm si5 = new IntegerTerm(1);
    static Predicate _fail_0 = new PRED_fail_0();
    static Predicate _$gen_indexing_keys_3_var = new PRED_$gen_indexing_keys_3_var();
    static Predicate _$gen_indexing_keys_3_var_1 = new PRED_$gen_indexing_keys_3_var_1();
    static Predicate _$gen_indexing_keys_3_1 = new PRED_$gen_indexing_keys_3_1();
    static Predicate _$gen_indexing_keys_3_2 = new PRED_$gen_indexing_keys_3_2();

    public Term arg1, arg2, arg3;

    public PRED_$gen_indexing_keys_3(Term a1, Term a2, Term a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_$gen_indexing_keys_3(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String toString() {
        return "$gen_indexing_keys(" + arg1 + "," + arg2 + "," + arg3 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$gen_indexing_keys_3_var, _fail_0, _fail_0, _fail_0, _$gen_indexing_keys_3_var, _fail_0);
    }
}

class PRED_$gen_indexing_keys_3_var extends PRED_$gen_indexing_keys_3 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$gen_indexing_keys_3_1, _$gen_indexing_keys_3_var_1);
    }
}

class PRED_$gen_indexing_keys_3_var_1 extends PRED_$gen_indexing_keys_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$gen_indexing_keys_3_2);
    }
}

class PRED_$gen_indexing_keys_3_1 extends PRED_$gen_indexing_keys_3 {
    public Predicate exec(Prolog engine) {
    // '$gen_indexing_keys'((A:-B),C,[all]):-atom(A),!
        Term a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$gen_indexing_keys'((A:-B),C,[all]):-['$get_level'(D),atom(A),'$cut'(D)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s1.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a4 = args[0];
        } else if (a1.isVariable()){
            a4 = new VariableTerm(engine);
            Term[] args = {a4, new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s1, args), engine.trail);
        } else {
            return engine.fail();
        }
        if (! s4.unify(a3, engine.trail))
            return engine.fail();
        a5 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(5))
        if (! a5.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of atom(a(4))
        a4 = a4.dereference();
        if (! a4.isSymbol()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(5))
        a5 = a5.dereference();
        if (! a5.isInteger()) {
            throw new IllegalTypeException("integer", a5);
        } else {
            engine.cut(((IntegerTerm) a5).intValue());
        }
        //END inline expansion
        return cont;
    }
}

class PRED_$gen_indexing_keys_3_2 extends PRED_$gen_indexing_keys_3 {
    public Predicate exec(Prolog engine) {
    // '$gen_indexing_keys'((A:-B),C,D):-arg(1,A,E),'$gen_indexing_keys0'(E,C,D)
        Term a1, a2, a3, a4, a5;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$gen_indexing_keys'((A:-B),C,D):-[arg(1,A,E),'$gen_indexing_keys0'(E,C,D)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s1.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a4 = args[0];
        } else if (a1.isVariable()){
            a4 = new VariableTerm(engine);
            Term[] args = {a4, new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s1, args), engine.trail);
        } else {
            return engine.fail();
        }
        a5 = new VariableTerm(engine);
        p1 = new PRED_$gen_indexing_keys0_3(a5, a2, a3, cont);
        return new PRED_arg_3(si5, a4, a5, p1);
    }
}
