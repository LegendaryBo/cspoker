package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$bagof_instances'/3</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$bagof_instances_3 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("[]");
    static SymbolTerm s2 = SymbolTerm.makeSymbol("+", 2);
    static Predicate _$bagof_instances_3_var = new PRED_$bagof_instances_3_var();
    static Predicate _$bagof_instances_3_var_1 = new PRED_$bagof_instances_3_var_1();
    static Predicate _$bagof_instances_3_1 = new PRED_$bagof_instances_3_1();
    static Predicate _$bagof_instances_3_2 = new PRED_$bagof_instances_3_2();

    public Term arg1, arg2, arg3;

    public PRED_$bagof_instances_3(Term a1, Term a2, Term a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_$bagof_instances_3(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String toString() {
        return "$bagof_instances(" + arg1 + "," + arg2 + "," + arg3 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$bagof_instances_3_var, _$bagof_instances_3_2, _$bagof_instances_3_2, _$bagof_instances_3_var, _$bagof_instances_3_2, _$bagof_instances_3_2);
    }
}

class PRED_$bagof_instances_3_var extends PRED_$bagof_instances_3 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$bagof_instances_3_1, _$bagof_instances_3_var_1);
    }
}

class PRED_$bagof_instances_3_var_1 extends PRED_$bagof_instances_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$bagof_instances_3_2);
    }
}

class PRED_$bagof_instances_3_1 extends PRED_$bagof_instances_3 {
    public Predicate exec(Prolog engine) {
    // '$bagof_instances'([],A,B):-fail
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$bagof_instances'([],A,B):-[fail]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s1))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of fail
        return engine.fail();
        //END inline expansion
    }
}

class PRED_$bagof_instances_3_2 extends PRED_$bagof_instances_3 {
    public Predicate exec(Prolog engine) {
    // '$bagof_instances'(A,B,C):-A=[D+E|F],'$variants_subset'(F,D,G,H,I),'$bagof_instances0'(I,B,C,[D+E|G],[E|H])
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$bagof_instances'(A,B,C):-['$unify'(A,[D+E|F]),'$variants_subset'(F,D,G,H,I),'$bagof_instances0'(I,B,C,[D+E|G],[E|H])]
        a4 = new VariableTerm(engine);
        a5 = new VariableTerm(engine);
        Term[] y1 = {a4, a5};
        a6 = new StructureTerm(s2, y1);
        a7 = new VariableTerm(engine);
        a8 = new ListTerm(a6, a7);
        //START inline expansion of $unify(a(1),a(8))
        if (! a1.unify(a8, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a9 = new VariableTerm(engine);
        a10 = new VariableTerm(engine);
        a11 = new VariableTerm(engine);
        Term[] y2 = {a4, a5};
        a12 = new StructureTerm(s2, y2);
        a13 = new ListTerm(a12, a9);
        a14 = new ListTerm(a5, a10);
        p1 = new PRED_$bagof_instances0_5(a11, a2, a3, a13, a14, cont);
        return new PRED_$variants_subset_5(a7, a4, a9, a10, a11, p1);
    }
}
