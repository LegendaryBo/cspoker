package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.IntegerTerm;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.StructureTerm;
import jp.ac.kobe_u.cs.prolog.lang.SymbolTerm;
import jp.ac.kobe_u.cs.prolog.lang.Term;
import jp.ac.kobe_u.cs.prolog.lang.VariableTerm;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>;/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_$003B_2 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("->", 2);
    static SymbolTerm s2 = SymbolTerm.makeSymbol(":", 2);
    static SymbolTerm s3 = SymbolTerm.makeSymbol("jp.ac.kobe_u.cs.prolog.builtin");
    static Predicate _$003B_2_var = new PRED_$003B_2_var();
    static Predicate _$003B_2_var_1 = new PRED_$003B_2_var_1();
    static Predicate _$003B_2_var_2 = new PRED_$003B_2_var_2();
    static Predicate _$003B_2_var_3 = new PRED_$003B_2_var_3();
    static Predicate _$003B_2_int = new PRED_$003B_2_int();
    static Predicate _$003B_2_int_1 = new PRED_$003B_2_int_1();
    static Predicate _$003B_2_1 = new PRED_$003B_2_1();
    static Predicate _$003B_2_2 = new PRED_$003B_2_2();
    static Predicate _$003B_2_3 = new PRED_$003B_2_3();
    static Predicate _$003B_2_4 = new PRED_$003B_2_4();

    public Term arg1, arg2;

    public PRED_$003B_2(Term a1, Term a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_$003B_2(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String toString() {
        return ";(" + arg1 + "," + arg2 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$003B_2_var, _$003B_2_int, _$003B_2_int, _$003B_2_int, _$003B_2_var, _$003B_2_int);
    }
}

class PRED_$003B_2_var extends PRED_$003B_2 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$003B_2_1, _$003B_2_var_1);
    }
}

class PRED_$003B_2_var_1 extends PRED_$003B_2 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$003B_2_2, _$003B_2_var_2);
    }
}

class PRED_$003B_2_var_2 extends PRED_$003B_2 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$003B_2_3, _$003B_2_var_3);
    }
}

class PRED_$003B_2_var_3 extends PRED_$003B_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$003B_2_4);
    }
}

class PRED_$003B_2_int extends PRED_$003B_2 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$003B_2_1, _$003B_2_int_1);
    }
}

class PRED_$003B_2_int_1 extends PRED_$003B_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$003B_2_2);
    }
}

class PRED_$003B_2_1 extends PRED_$003B_2 {
    public Predicate exec(Prolog engine) {
    // A;B:-A\=(C->D),call(A)
        Term a1, a2, a3, a4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // A;B:-['$not_unifiable'(A,(C->D)),call('jp.ac.kobe_u.cs.prolog.builtin':A)]
        Term[] y1 = {new VariableTerm(engine), new VariableTerm(engine)};
        a3 = new StructureTerm(s1, y1);
        //START inline expansion of $not_unifiable(a(1),a(3))
        if (a1.unify(a3, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        Term[] y2 = {s3, a1};
        a4 = new StructureTerm(s2, y2);
        return new PRED_call_1(a4, cont);
    }
}

class PRED_$003B_2_2 extends PRED_$003B_2 {
    public Predicate exec(Prolog engine) {
    // A;B:-B\=(C->D),call(B)
        Term a1, a2, a3, a4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // A;B:-['$not_unifiable'(B,(C->D)),call('jp.ac.kobe_u.cs.prolog.builtin':B)]
        Term[] y1 = {new VariableTerm(engine), new VariableTerm(engine)};
        a3 = new StructureTerm(s1, y1);
        //START inline expansion of $not_unifiable(a(2),a(3))
        if (a2.unify(a3, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        Term[] y2 = {s3, a2};
        a4 = new StructureTerm(s2, y2);
        return new PRED_call_1(a4, cont);
    }
}

class PRED_$003B_2_3 extends PRED_$003B_2 {
    public Predicate exec(Prolog engine) {
    // A->B;C:-call(A),!,call(B)
        Term a1, a2, a3, a4, a5, a6, a7;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // A->B;C:-['$get_level'(D),call('jp.ac.kobe_u.cs.prolog.builtin':A),'$cut'(D),call('jp.ac.kobe_u.cs.prolog.builtin':B)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s1.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a3 = args[0];
            a4 = args[1];
        } else if (a1.isVariable()){
            a3 = new VariableTerm(engine);
            a4 = new VariableTerm(engine);
            Term[] args = {a3, a4};
            ((VariableTerm) a1).bind(new StructureTerm(s1, args), engine.trail);
        } else {
            return engine.fail();
        }
        a5 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(5))
        if (! a5.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        Term[] y1 = {s3, a3};
        a6 = new StructureTerm(s2, y1);
        Term[] y2 = {s3, a4};
        a7 = new StructureTerm(s2, y2);
        p1 = new PRED_call_1(a7, cont);
        p2 = new PRED_$cut_1(a5, p1);
        return new PRED_call_1(a6, p2);
    }
}

class PRED_$003B_2_4 extends PRED_$003B_2 {
    public Predicate exec(Prolog engine) {
    // A->B;C:-call(C)
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // A->B;C:-[call('jp.ac.kobe_u.cs.prolog.builtin':C)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s1.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
        } else if (a1.isVariable()){
            Term[] args = {new VariableTerm(engine), new VariableTerm(engine)};
            ((VariableTerm) a1).bind(new StructureTerm(s1, args), engine.trail);
        } else {
            return engine.fail();
        }
        Term[] y1 = {s3, a2};
        a3 = new StructureTerm(s2, y1);
        return new PRED_call_1(a3, cont);
    }
}
