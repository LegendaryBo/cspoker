package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.IntegerTerm;
import jp.ac.kobe_u.cs.prolog.lang.ListTerm;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.StructureTerm;
import jp.ac.kobe_u.cs.prolog.lang.SymbolTerm;
import jp.ac.kobe_u.cs.prolog.lang.Term;
import jp.ac.kobe_u.cs.prolog.lang.VariableTerm;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$read_token1'/3</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$read_token1_3 extends Predicate {
    static IntegerTerm si1 = new IntegerTerm(-2);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("[]");
    static ListTerm s3 = new ListTerm(si1, s2);
    static SymbolTerm s4 = SymbolTerm.makeSymbol("error", 1);
    static IntegerTerm si5 = new IntegerTerm(73);
    static ListTerm s6 = new ListTerm(si5, s2);
    static SymbolTerm s7 = SymbolTerm.makeSymbol("number", 1);
    static IntegerTerm si8 = new IntegerTerm(68);
    static ListTerm s9 = new ListTerm(si8, s2);
    static IntegerTerm si10 = new IntegerTerm(65);
    static ListTerm s11 = new ListTerm(si10, s2);
    static SymbolTerm s12 = SymbolTerm.makeSymbol("atom", 1);
    static IntegerTerm si13 = new IntegerTerm(86);
    static ListTerm s14 = new ListTerm(si13, s2);
    static SymbolTerm s15 = SymbolTerm.makeSymbol("var", 1);
    static IntegerTerm si16 = new IntegerTerm(83);
    static ListTerm s17 = new ListTerm(si16, s2);
    static SymbolTerm s18 = SymbolTerm.makeSymbol("string", 1);
    static Predicate _$read_token1_3_var = new PRED_$read_token1_3_var();
    static Predicate _$read_token1_3_var_1 = new PRED_$read_token1_3_var_1();
    static Predicate _$read_token1_3_var_2 = new PRED_$read_token1_3_var_2();
    static Predicate _$read_token1_3_var_3 = new PRED_$read_token1_3_var_3();
    static Predicate _$read_token1_3_var_4 = new PRED_$read_token1_3_var_4();
    static Predicate _$read_token1_3_var_5 = new PRED_$read_token1_3_var_5();
    static Predicate _$read_token1_3_var_6 = new PRED_$read_token1_3_var_6();
    static Predicate _$read_token1_3_1 = new PRED_$read_token1_3_1();
    static Predicate _$read_token1_3_2 = new PRED_$read_token1_3_2();
    static Predicate _$read_token1_3_3 = new PRED_$read_token1_3_3();
    static Predicate _$read_token1_3_4 = new PRED_$read_token1_3_4();
    static Predicate _$read_token1_3_5 = new PRED_$read_token1_3_5();
    static Predicate _$read_token1_3_6 = new PRED_$read_token1_3_6();
    static Predicate _$read_token1_3_7 = new PRED_$read_token1_3_7();

    public Term arg1, arg2, arg3;

    public PRED_$read_token1_3(Term a1, Term a2, Term a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_$read_token1_3(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String toString() {
        return "$read_token1(" + arg1 + "," + arg2 + "," + arg3 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$read_token1_3_var, _$read_token1_3_7, _$read_token1_3_7, _$read_token1_3_7, _$read_token1_3_7, _$read_token1_3_var);
    }
}

class PRED_$read_token1_3_var extends PRED_$read_token1_3 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$read_token1_3_1, _$read_token1_3_var_1);
    }
}

class PRED_$read_token1_3_var_1 extends PRED_$read_token1_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$read_token1_3_2, _$read_token1_3_var_2);
    }
}

class PRED_$read_token1_3_var_2 extends PRED_$read_token1_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$read_token1_3_3, _$read_token1_3_var_3);
    }
}

class PRED_$read_token1_3_var_3 extends PRED_$read_token1_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$read_token1_3_4, _$read_token1_3_var_4);
    }
}

class PRED_$read_token1_3_var_4 extends PRED_$read_token1_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$read_token1_3_5, _$read_token1_3_var_5);
    }
}

class PRED_$read_token1_3_var_5 extends PRED_$read_token1_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$read_token1_3_6, _$read_token1_3_var_6);
    }
}

class PRED_$read_token1_3_var_6 extends PRED_$read_token1_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$read_token1_3_7);
    }
}

class PRED_$read_token1_3_1 extends PRED_$read_token1_3 {
    public Predicate exec(Prolog engine) {
    // '$read_token1'([-2],A,error(A)):-!
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$read_token1'([-2],A,error(A)):-['$neck_cut']
        if (! s3.unify(a1, engine.trail))
            return engine.fail();
        a3 = a3.dereference();
        if (a3.isStructure()){
            if (! s4.equals(((StructureTerm)a3).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a3).args();
            if (! a2.unify(args[0], engine.trail))
                return engine.fail();
        } else if (a3.isVariable()){
            Term[] args = {a2};
            ((VariableTerm) a3).bind(new StructureTerm(s4, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_$read_token1_3_2 extends PRED_$read_token1_3 {
    public Predicate exec(Prolog engine) {
    // '$read_token1'([73],A,number(A)):-!
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$read_token1'([73],A,number(A)):-['$neck_cut']
        if (! s6.unify(a1, engine.trail))
            return engine.fail();
        a3 = a3.dereference();
        if (a3.isStructure()){
            if (! s7.equals(((StructureTerm)a3).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a3).args();
            if (! a2.unify(args[0], engine.trail))
                return engine.fail();
        } else if (a3.isVariable()){
            Term[] args = {a2};
            ((VariableTerm) a3).bind(new StructureTerm(s7, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_$read_token1_3_3 extends PRED_$read_token1_3 {
    public Predicate exec(Prolog engine) {
    // '$read_token1'([68],A,number(A)):-!
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$read_token1'([68],A,number(A)):-['$neck_cut']
        if (! s9.unify(a1, engine.trail))
            return engine.fail();
        a3 = a3.dereference();
        if (a3.isStructure()){
            if (! s7.equals(((StructureTerm)a3).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a3).args();
            if (! a2.unify(args[0], engine.trail))
                return engine.fail();
        } else if (a3.isVariable()){
            Term[] args = {a2};
            ((VariableTerm) a3).bind(new StructureTerm(s7, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_$read_token1_3_4 extends PRED_$read_token1_3 {
    public Predicate exec(Prolog engine) {
    // '$read_token1'([65],A,atom(A)):-!
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$read_token1'([65],A,atom(A)):-['$neck_cut']
        if (! s11.unify(a1, engine.trail))
            return engine.fail();
        a3 = a3.dereference();
        if (a3.isStructure()){
            if (! s12.equals(((StructureTerm)a3).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a3).args();
            if (! a2.unify(args[0], engine.trail))
                return engine.fail();
        } else if (a3.isVariable()){
            Term[] args = {a2};
            ((VariableTerm) a3).bind(new StructureTerm(s12, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_$read_token1_3_5 extends PRED_$read_token1_3 {
    public Predicate exec(Prolog engine) {
    // '$read_token1'([86],A,var(A)):-!
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$read_token1'([86],A,var(A)):-['$neck_cut']
        if (! s14.unify(a1, engine.trail))
            return engine.fail();
        a3 = a3.dereference();
        if (a3.isStructure()){
            if (! s15.equals(((StructureTerm)a3).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a3).args();
            if (! a2.unify(args[0], engine.trail))
                return engine.fail();
        } else if (a3.isVariable()){
            Term[] args = {a2};
            ((VariableTerm) a3).bind(new StructureTerm(s15, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_$read_token1_3_6 extends PRED_$read_token1_3 {
    public Predicate exec(Prolog engine) {
    // '$read_token1'([83],A,string(A)):-!
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$read_token1'([83],A,string(A)):-['$neck_cut']
        if (! s17.unify(a1, engine.trail))
            return engine.fail();
        a3 = a3.dereference();
        if (a3.isStructure()){
            if (! s18.equals(((StructureTerm)a3).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a3).args();
            if (! a2.unify(args[0], engine.trail))
                return engine.fail();
        } else if (a3.isVariable()){
            Term[] args = {a2};
            ((VariableTerm) a3).bind(new StructureTerm(s18, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_$read_token1_3_7 extends PRED_$read_token1_3 {
    public Predicate exec(Prolog engine) {
    // '$read_token1'(A,B,B):-!
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$read_token1'(A,B,B):-['$neck_cut']
        if (! a2.unify(a3, engine.trail))
            return engine.fail();
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}
