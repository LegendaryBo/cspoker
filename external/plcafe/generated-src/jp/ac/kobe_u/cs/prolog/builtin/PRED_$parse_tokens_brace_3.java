package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$parse_tokens_brace'/3</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$parse_tokens_brace_3 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("{}");
    static SymbolTerm s2 = SymbolTerm.makeSymbol("}");
    static IntegerTerm si3 = new IntegerTerm(1201);
    static SymbolTerm s4 = SymbolTerm.makeSymbol("{}", 1);
    static Predicate _$parse_tokens_brace_3_var = new PRED_$parse_tokens_brace_3_var();
    static Predicate _$parse_tokens_brace_3_var_1 = new PRED_$parse_tokens_brace_3_var_1();
    static Predicate _$parse_tokens_brace_3_1 = new PRED_$parse_tokens_brace_3_1();
    static Predicate _$parse_tokens_brace_3_2 = new PRED_$parse_tokens_brace_3_2();

    public Term arg1, arg2, arg3;

    public PRED_$parse_tokens_brace_3(Term a1, Term a2, Term a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_$parse_tokens_brace_3(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String toString() {
        return "$parse_tokens_brace(" + arg1 + "," + arg2 + "," + arg3 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$parse_tokens_brace_3_var, _$parse_tokens_brace_3_2, _$parse_tokens_brace_3_2, _$parse_tokens_brace_3_var, _$parse_tokens_brace_3_2, _$parse_tokens_brace_3_2);
    }
}

class PRED_$parse_tokens_brace_3_var extends PRED_$parse_tokens_brace_3 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$parse_tokens_brace_3_1, _$parse_tokens_brace_3_var_1);
    }
}

class PRED_$parse_tokens_brace_3_var_1 extends PRED_$parse_tokens_brace_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$parse_tokens_brace_3_2);
    }
}

class PRED_$parse_tokens_brace_3_1 extends PRED_$parse_tokens_brace_3 {
    public Predicate exec(Prolog engine) {
    // '$parse_tokens_brace'({},A,B):-'C'(A,'}',B),!
        Term a1, a2, a3, a4;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$parse_tokens_brace'({},A,B):-['$get_level'(C),'C'(A,'}',B),'$cut'(C)]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s1))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a4 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(4))
        if (! a4.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        p1 = new PRED_$cut_1(a4, cont);
        return new PRED_C_3(a2, s2, a3, p1);
    }
}

class PRED_$parse_tokens_brace_3_2 extends PRED_$parse_tokens_brace_3 {
    public Predicate exec(Prolog engine) {
    // '$parse_tokens_brace'(A,B,C):-'$parse_tokens'(D,1201,B,E),'$parse_tokens_expect'('}',E,C),A={D}
        Term a1, a2, a3, a4, a5, a6;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$parse_tokens_brace'(A,B,C):-['$parse_tokens'(D,1201,B,E),'$parse_tokens_expect'('}',E,C),'$unify'(A,{D})]
        a4 = new VariableTerm(engine);
        a5 = new VariableTerm(engine);
        Term[] y1 = {a4};
        a6 = new StructureTerm(s4, y1);
        p1 = new PRED_$unify_2(a1, a6, cont);
        p2 = new PRED_$parse_tokens_expect_3(s2, a5, a3, p1);
        return new PRED_$parse_tokens_4(a4, si3, a2, a5, p2);
    }
}
