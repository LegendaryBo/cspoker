package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$calc_indexing_key'/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$calc_indexing_key_2 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("all");
    static IntegerTerm si2 = new IntegerTerm(1);
    static Predicate _$calc_indexing_key_2_sub_1 = new PRED_$calc_indexing_key_2_sub_1();
    static Predicate _$calc_indexing_key_2_1 = new PRED_$calc_indexing_key_2_1();
    static Predicate _$calc_indexing_key_2_2 = new PRED_$calc_indexing_key_2_2();

    public Term arg1, arg2;

    public PRED_$calc_indexing_key_2(Term a1, Term a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_$calc_indexing_key_2(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String toString() {
        return "$calc_indexing_key(" + arg1 + "," + arg2 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$calc_indexing_key_2_1, _$calc_indexing_key_2_sub_1);
    }
}

class PRED_$calc_indexing_key_2_sub_1 extends PRED_$calc_indexing_key_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$calc_indexing_key_2_2);
    }
}

class PRED_$calc_indexing_key_2_1 extends PRED_$calc_indexing_key_2 {
    public Predicate exec(Prolog engine) {
    // '$calc_indexing_key'(A,all):-atom(A),!
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$calc_indexing_key'(A,all):-['$get_level'(B),atom(A),'$cut'(B)]
        a2 = a2.dereference();
        if (a2.isSymbol()){
            if (! a2.equals(s1))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a3 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(3))
        if (! a3.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of atom(a(1))
        a1 = a1.dereference();
        if (! a1.isSymbol()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(3))
        a3 = a3.dereference();
        if (! a3.isInteger()) {
            throw new IllegalTypeException("integer", a3);
        } else {
            engine.cut(((IntegerTerm) a3).intValue());
        }
        //END inline expansion
        return cont;
    }
}

class PRED_$calc_indexing_key_2_2 extends PRED_$calc_indexing_key_2 {
    public Predicate exec(Prolog engine) {
    // '$calc_indexing_key'(A,B):-arg(1,A,C),'$calc_indexing_key0'(C,B)
        Term a1, a2, a3;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$calc_indexing_key'(A,B):-[arg(1,A,C),'$calc_indexing_key0'(C,B)]
        a3 = new VariableTerm(engine);
        p1 = new PRED_$calc_indexing_key0_2(a3, a2, cont);
        return new PRED_arg_3(si2, a1, a3, p1);
    }
}
