package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$clause_internal0'/3</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$clause_internal0_3 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("[]");
    static SymbolTerm s2 = SymbolTerm.makeSymbol(",", 2);
    static Predicate _$clause_internal0_3_var = new PRED_$clause_internal0_3_var();
    static Predicate _$clause_internal0_3_var_1 = new PRED_$clause_internal0_3_var_1();
    static Predicate _$clause_internal0_3_var_2 = new PRED_$clause_internal0_3_var_2();
    static Predicate _$clause_internal0_3_con = new PRED_$clause_internal0_3_con();
    static Predicate _$clause_internal0_3_con_1 = new PRED_$clause_internal0_3_con_1();
    static Predicate _$clause_internal0_3_lis = new PRED_$clause_internal0_3_lis();
    static Predicate _$clause_internal0_3_lis_1 = new PRED_$clause_internal0_3_lis_1();
    static Predicate _$clause_internal0_3_1 = new PRED_$clause_internal0_3_1();
    static Predicate _$clause_internal0_3_2 = new PRED_$clause_internal0_3_2();
    static Predicate _$clause_internal0_3_3 = new PRED_$clause_internal0_3_3();

    public Term arg1, arg2, arg3;

    public PRED_$clause_internal0_3(Term a1, Term a2, Term a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_$clause_internal0_3(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String toString() {
        return "$clause_internal0(" + arg1 + "," + arg2 + "," + arg3 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$clause_internal0_3_var, _$clause_internal0_3_3, _$clause_internal0_3_3, _$clause_internal0_3_con, _$clause_internal0_3_3, _$clause_internal0_3_lis);
    }
}

class PRED_$clause_internal0_3_var extends PRED_$clause_internal0_3 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$clause_internal0_3_1, _$clause_internal0_3_var_1);
    }
}

class PRED_$clause_internal0_3_var_1 extends PRED_$clause_internal0_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$clause_internal0_3_2, _$clause_internal0_3_var_2);
    }
}

class PRED_$clause_internal0_3_var_2 extends PRED_$clause_internal0_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$clause_internal0_3_3);
    }
}

class PRED_$clause_internal0_3_con extends PRED_$clause_internal0_3 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$clause_internal0_3_1, _$clause_internal0_3_con_1);
    }
}

class PRED_$clause_internal0_3_con_1 extends PRED_$clause_internal0_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$clause_internal0_3_3);
    }
}

class PRED_$clause_internal0_3_lis extends PRED_$clause_internal0_3 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$clause_internal0_3_2, _$clause_internal0_3_lis_1);
    }
}

class PRED_$clause_internal0_3_lis_1 extends PRED_$clause_internal0_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$clause_internal0_3_3);
    }
}

class PRED_$clause_internal0_3_1 extends PRED_$clause_internal0_3 {
    public Predicate exec(Prolog engine) {
    // '$clause_internal0'([],A,B):-fail
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$clause_internal0'([],A,B):-[fail]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s1))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of fail
        return engine.fail();
        //END inline expansion
    }
}

class PRED_$clause_internal0_3_2 extends PRED_$clause_internal0_3 {
    public Predicate exec(Prolog engine) {
    // '$clause_internal0'([(A,B)],A,B):-!
        Term a1, a2, a3, a4, a5, a6;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$clause_internal0'([(A,B)],A,B):-['$neck_cut']
        a1 = a1.dereference();
        if (a1.isList()){
            Term[] args = {((ListTerm)a1).car(), ((ListTerm)a1).cdr()};
            a4 = args[0];
            if (! s1.unify(args[1], engine.trail))
                return engine.fail();
        } else if (a1.isVariable()){
            a4 = new VariableTerm(engine);
            ((VariableTerm) a1).bind(new ListTerm(a4, s1), engine.trail);
        } else {
            return engine.fail();
        }
        a4 = a4.dereference();
        if (a4.isStructure()){
            if (! s2.equals(((StructureTerm)a4).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a4).args();
            a5 = args[0];
            a6 = args[1];
        } else if (a4.isVariable()){
            a5 = new VariableTerm(engine);
            a6 = new VariableTerm(engine);
            Term[] args = {a5, a6};
            ((VariableTerm) a4).bind(new StructureTerm(s2, args), engine.trail);
        } else {
            return engine.fail();
        }
        if (! a5.unify(a2, engine.trail))
            return engine.fail();
        if (! a6.unify(a3, engine.trail))
            return engine.fail();
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_$clause_internal0_3_3 extends PRED_$clause_internal0_3 {
    public Predicate exec(Prolog engine) {
    // '$clause_internal0'(A,B,C):-'$builtin_member'((B,C),A)
        Term a1, a2, a3, a4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$clause_internal0'(A,B,C):-['$builtin_member'((B,C),A)]
        Term[] y1 = {a2, a3};
        a4 = new StructureTerm(s2, y1);
        return new PRED_$builtin_member_2(a4, a1, cont);
    }
}
