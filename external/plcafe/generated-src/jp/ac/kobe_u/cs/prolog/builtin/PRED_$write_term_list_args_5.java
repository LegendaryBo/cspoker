package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.IllegalTypeException;
import jp.ac.kobe_u.cs.prolog.lang.IntegerTerm;
import jp.ac.kobe_u.cs.prolog.lang.ListTerm;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.SymbolTerm;
import jp.ac.kobe_u.cs.prolog.lang.Term;
import jp.ac.kobe_u.cs.prolog.lang.VariableTerm;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$write_term_list_args'/5</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$write_term_list_args_5 extends Predicate {
    static IntegerTerm si1 = new IntegerTerm(999);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("punct");
    static SymbolTerm s3 = SymbolTerm.makeSymbol(",");
    static SymbolTerm s4 = SymbolTerm.makeSymbol("[]");
    static SymbolTerm s5 = SymbolTerm.makeSymbol("|");
    static Predicate _fail_0 = new PRED_fail_0();
    static Predicate _$write_term_list_args_5_var = new PRED_$write_term_list_args_5_var();
    static Predicate _$write_term_list_args_5_var_1 = new PRED_$write_term_list_args_5_var_1();
    static Predicate _$write_term_list_args_5_var_2 = new PRED_$write_term_list_args_5_var_2();
    static Predicate _$write_term_list_args_5_1 = new PRED_$write_term_list_args_5_1();
    static Predicate _$write_term_list_args_5_2 = new PRED_$write_term_list_args_5_2();
    static Predicate _$write_term_list_args_5_3 = new PRED_$write_term_list_args_5_3();

    public Term arg1, arg2, arg3, arg4, arg5;

    public PRED_$write_term_list_args_5(Term a1, Term a2, Term a3, Term a4, Term a5, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        arg5 = a5;
        this.cont = cont;
    }

    public PRED_$write_term_list_args_5(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        arg5 = args[4];
        this.cont = cont;
    }

    public int arity() { return 5; }

    public String toString() {
        return "$write_term_list_args(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + "," + arg5 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.aregs[4] = arg4;
        engine.aregs[5] = arg5;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$write_term_list_args_5_var, _fail_0, _fail_0, _fail_0, _fail_0, _$write_term_list_args_5_var);
    }
}

class PRED_$write_term_list_args_5_var extends PRED_$write_term_list_args_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$write_term_list_args_5_1, _$write_term_list_args_5_var_1);
    }
}

class PRED_$write_term_list_args_5_var_1 extends PRED_$write_term_list_args_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$write_term_list_args_5_2, _$write_term_list_args_5_var_2);
    }
}

class PRED_$write_term_list_args_5_var_2 extends PRED_$write_term_list_args_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$write_term_list_args_5_3);
    }
}

class PRED_$write_term_list_args_5_1 extends PRED_$write_term_list_args_5 {
    public Predicate exec(Prolog engine) {
    // '$write_term_list_args'([A|B],C,D,E,F):-nonvar(B),B=[G|H],!,'$write_term0'(A,999,C,I,E,F),'$write_space_if_needed'(I,punct,F),put_char(F,','),'$write_term_list_args'(B,punct,D,E,F)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;
        Predicate p1, p2, p3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$write_term_list_args'([A|B],C,D,E,F):-['$get_level'(G),nonvar(B),'$unify'(B,[H|I]),'$cut'(G),'$write_term0'(A,999,C,J,E,F),'$write_space_if_needed'(J,punct,F),put_char(F,','),'$write_term_list_args'(B,punct,D,E,F)]
        a1 = a1.dereference();
        if (a1.isList()){
            Term[] args = {((ListTerm)a1).car(), ((ListTerm)a1).cdr()};
            a6 = args[0];
            a7 = args[1];
        } else if (a1.isVariable()){
            a6 = new VariableTerm(engine);
            a7 = new VariableTerm(engine);
            ((VariableTerm) a1).bind(new ListTerm(a6, a7), engine.trail);
        } else {
            return engine.fail();
        }
        a8 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(8))
        if (! a8.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of nonvar(a(7))
        a7 = a7.dereference();
        if (a7.isVariable()) {
            return engine.fail();
        }
        //END inline expansion
        a9 = new ListTerm(new VariableTerm(engine), new VariableTerm(engine));
        //START inline expansion of $unify(a(7),a(9))
        if (! a7.unify(a9, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(8))
        a8 = a8.dereference();
        if (! a8.isInteger()) {
            throw new IllegalTypeException("integer", a8);
        } else {
            engine.cut(((IntegerTerm) a8).intValue());
        }
        //END inline expansion
        a10 = new VariableTerm(engine);
        p1 = new PRED_$write_term_list_args_5(a7, s2, a3, a4, a5, cont);
        p2 = new PRED_put_char_2(a5, s3, p1);
        p3 = new PRED_$write_space_if_needed_3(a10, s2, a5, p2);
        return new PRED_$write_term0_6(a6, si1, a2, a10, a4, a5, p3);
    }
}

class PRED_$write_term_list_args_5_2 extends PRED_$write_term_list_args_5 {
    public Predicate exec(Prolog engine) {
    // '$write_term_list_args'([A|B],C,D,E,F):-nonvar(B),B=[],!,'$write_term0'(A,999,C,D,E,F)
        Term a1, a2, a3, a4, a5, a6, a7, a8;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$write_term_list_args'([A|B],C,D,E,F):-['$get_level'(G),nonvar(B),'$unify'(B,[]),'$cut'(G),'$write_term0'(A,999,C,D,E,F)]
        a1 = a1.dereference();
        if (a1.isList()){
            Term[] args = {((ListTerm)a1).car(), ((ListTerm)a1).cdr()};
            a6 = args[0];
            a7 = args[1];
        } else if (a1.isVariable()){
            a6 = new VariableTerm(engine);
            a7 = new VariableTerm(engine);
            ((VariableTerm) a1).bind(new ListTerm(a6, a7), engine.trail);
        } else {
            return engine.fail();
        }
        a8 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(8))
        if (! a8.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of nonvar(a(7))
        a7 = a7.dereference();
        if (a7.isVariable()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $unify(a(7),s(4))
        if (! a7.unify(s4, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(8))
        a8 = a8.dereference();
        if (! a8.isInteger()) {
            throw new IllegalTypeException("integer", a8);
        } else {
            engine.cut(((IntegerTerm) a8).intValue());
        }
        //END inline expansion
        return new PRED_$write_term0_6(a6, si1, a2, a3, a4, a5, cont);
    }
}

class PRED_$write_term_list_args_5_3 extends PRED_$write_term_list_args_5 {
    public Predicate exec(Prolog engine) {
    // '$write_term_list_args'([A|B],C,D,E,F):-'$write_term0'(A,999,C,G,E,F),'$write_space_if_needed'(G,punct,F),put_char(F,'|'),'$write_term0'(B,999,punct,D,E,F)
        Term a1, a2, a3, a4, a5, a6, a7, a8;
        Predicate p1, p2, p3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$write_term_list_args'([A|B],C,D,E,F):-['$write_term0'(A,999,C,G,E,F),'$write_space_if_needed'(G,punct,F),put_char(F,'|'),'$write_term0'(B,999,punct,D,E,F)]
        a1 = a1.dereference();
        if (a1.isList()){
            Term[] args = {((ListTerm)a1).car(), ((ListTerm)a1).cdr()};
            a6 = args[0];
            a7 = args[1];
        } else if (a1.isVariable()){
            a6 = new VariableTerm(engine);
            a7 = new VariableTerm(engine);
            ((VariableTerm) a1).bind(new ListTerm(a6, a7), engine.trail);
        } else {
            return engine.fail();
        }
        a8 = new VariableTerm(engine);
        p1 = new PRED_$write_term0_6(a7, si1, s2, a3, a4, a5, cont);
        p2 = new PRED_put_char_2(a5, s5, p1);
        p3 = new PRED_$write_space_if_needed_3(a8, s2, a5, p2);
        return new PRED_$write_term0_6(a6, si1, a2, a8, a4, a5, p3);
    }
}
