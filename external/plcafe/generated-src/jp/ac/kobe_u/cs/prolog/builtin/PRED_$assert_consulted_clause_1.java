package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.IntegerTerm;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.StructureTerm;
import jp.ac.kobe_u.cs.prolog.lang.SymbolTerm;
import jp.ac.kobe_u.cs.prolog.lang.Term;
import jp.ac.kobe_u.cs.prolog.lang.VariableTerm;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$assert_consulted_clause'/1</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$assert_consulted_clause_1 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol(":-", 2);
    static SymbolTerm s2 = SymbolTerm.makeSymbol(":", 2);
    static SymbolTerm s3 = SymbolTerm.makeSymbol("jp.ac.kobe_u.cs.prolog.builtin");
    static SymbolTerm s4 = SymbolTerm.makeSymbol("$consulted_file", 1);
    static SymbolTerm s5 = SymbolTerm.makeSymbol("$consulted_package", 1);
    static SymbolTerm s6 = SymbolTerm.makeSymbol("$consulted_predicate", 3);
    static SymbolTerm s7 = SymbolTerm.makeSymbol("/", 2);

    public Term arg1;

    public PRED_$assert_consulted_clause_1(Term a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_$assert_consulted_clause_1(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String toString() {
        return "$assert_consulted_clause(" + arg1 + ")";
    }

    public Predicate exec(Prolog engine) {
    // '$assert_consulted_clause'(A):-A=(B:-C),functor(B,D,E),clause('$consulted_file'(F),G),clause('$consulted_package'(H),I),assertz(H:A),assertz('$consulted_predicate'(H,D/E,F)),!
        engine.setB0();
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16;
        Predicate p1, p2, p3, p4, p5;
        a1 = arg1;
    // '$assert_consulted_clause'(A):-['$get_level'(B),'$unify'(A,(C:-D)),functor(C,E,F),clause('jp.ac.kobe_u.cs.prolog.builtin':'$consulted_file'(G),H),clause('jp.ac.kobe_u.cs.prolog.builtin':'$consulted_package'(I),J),assertz(I:A),assertz('jp.ac.kobe_u.cs.prolog.builtin':'$consulted_predicate'(I,E/F,G)),'$cut'(B)]
        a2 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(2))
        if (! a2.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a3 = new VariableTerm(engine);
        Term[] y1 = {a3, new VariableTerm(engine)};
        a4 = new StructureTerm(s1, y1);
        //START inline expansion of $unify(a(1),a(4))
        if (! a1.unify(a4, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a5 = new VariableTerm(engine);
        a6 = new VariableTerm(engine);
        a7 = new VariableTerm(engine);
        Term[] y2 = {a7};
        a8 = new StructureTerm(s4, y2);
        Term[] y3 = {s3, a8};
        a9 = new StructureTerm(s2, y3);
        a10 = new VariableTerm(engine);
        Term[] y4 = {a10};
        a11 = new StructureTerm(s5, y4);
        Term[] y5 = {s3, a11};
        a12 = new StructureTerm(s2, y5);
        Term[] y6 = {a10, a1};
        a13 = new StructureTerm(s2, y6);
        Term[] y7 = {a5, a6};
        a14 = new StructureTerm(s7, y7);
        Term[] y8 = {a10, a14, a7};
        a15 = new StructureTerm(s6, y8);
        Term[] y9 = {s3, a15};
        a16 = new StructureTerm(s2, y9);
        p1 = new PRED_$cut_1(a2, cont);
        p2 = new PRED_assertz_1(a16, p1);
        p3 = new PRED_assertz_1(a13, p2);
        p4 = new PRED_clause_2(a12, new VariableTerm(engine), p3);
        p5 = new PRED_clause_2(a9, new VariableTerm(engine), p4);
        return new PRED_functor_3(a3, a5, a6, p5);
    }
}
