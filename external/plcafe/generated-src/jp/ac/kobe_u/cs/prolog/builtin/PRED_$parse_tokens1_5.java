package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$parse_tokens1'/5</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$parse_tokens1_5 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("cannot");
    static SymbolTerm s2 = SymbolTerm.makeSymbol("start");
    static SymbolTerm s3 = SymbolTerm.makeSymbol("an");
    static SymbolTerm s4 = SymbolTerm.makeSymbol("expression");
    static SymbolTerm s5 = SymbolTerm.makeSymbol("[]");
    static ListTerm s6 = new ListTerm(s4, s5);
    static ListTerm s7 = new ListTerm(s3, s6);
    static ListTerm s8 = new ListTerm(s2, s7);
    static ListTerm s9 = new ListTerm(s1, s8);
    static Predicate _$parse_tokens1_5_sub_1 = new PRED_$parse_tokens1_5_sub_1();
    static Predicate _$parse_tokens1_5_1 = new PRED_$parse_tokens1_5_1();
    static Predicate _$parse_tokens1_5_2 = new PRED_$parse_tokens1_5_2();

    public Term arg1, arg2, arg3, arg4, arg5;

    public PRED_$parse_tokens1_5(Term a1, Term a2, Term a3, Term a4, Term a5, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        arg5 = a5;
        this.cont = cont;
    }

    public PRED_$parse_tokens1_5(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        arg5 = args[4];
        this.cont = cont;
    }

    public int arity() { return 5; }

    public String toString() {
        return "$parse_tokens1(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + "," + arg5 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.aregs[4] = arg4;
        engine.aregs[5] = arg5;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$parse_tokens1_5_1, _$parse_tokens1_5_sub_1);
    }
}

class PRED_$parse_tokens1_5_sub_1 extends PRED_$parse_tokens1_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$parse_tokens1_5_2);
    }
}

class PRED_$parse_tokens1_5_1 extends PRED_$parse_tokens1_5 {
    public Predicate exec(Prolog engine) {
    // '$parse_tokens1'(A,B,C,D,E):-'$parse_tokens_peep_next'(F,D,G),'$parse_tokens_is_starter'(F),!,'$parse_tokens_before_op'(A,B,C,G,E)
        Term a1, a2, a3, a4, a5, a6, a7, a8;
        Predicate p1, p2, p3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$parse_tokens1'(A,B,C,D,E):-['$get_level'(F),'$parse_tokens_peep_next'(G,D,H),'$parse_tokens_is_starter'(G),'$cut'(F),'$parse_tokens_before_op'(A,B,C,H,E)]
        a6 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(6))
        if (! a6.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a7 = new VariableTerm(engine);
        a8 = new VariableTerm(engine);
        p1 = new PRED_$parse_tokens_before_op_5(a1, a2, a3, a8, a5, cont);
        p2 = new PRED_$cut_1(a6, p1);
        p3 = new PRED_$parse_tokens_is_starter_1(a7, p2);
        return new PRED_$parse_tokens_peep_next_3(a7, a4, a8, p3);
    }
}

class PRED_$parse_tokens1_5_2 extends PRED_$parse_tokens1_5 {
    public Predicate exec(Prolog engine) {
    // '$parse_tokens1'(A,B,C,D,E):-'$parse_tokens_peep_next'(F,D,G),'$parse_tokens_error'([F,cannot,start,an,expression],G,E)
        Term a1, a2, a3, a4, a5, a6, a7, a8;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$parse_tokens1'(A,B,C,D,E):-['$parse_tokens_peep_next'(F,D,G),'$parse_tokens_error'([F,cannot,start,an,expression],G,E)]
        a6 = new VariableTerm(engine);
        a7 = new VariableTerm(engine);
        a8 = new ListTerm(a6, s9);
        p1 = new PRED_$parse_tokens_error_3(a8, a7, a5, cont);
        return new PRED_$parse_tokens_peep_next_3(a6, a4, a7, p1);
    }
}
