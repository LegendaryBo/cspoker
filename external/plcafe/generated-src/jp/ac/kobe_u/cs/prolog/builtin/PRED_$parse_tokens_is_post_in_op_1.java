package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.IntegerTerm;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.StructureTerm;
import jp.ac.kobe_u.cs.prolog.lang.SymbolTerm;
import jp.ac.kobe_u.cs.prolog.lang.Term;
import jp.ac.kobe_u.cs.prolog.lang.VariableTerm;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$parse_tokens_is_post_in_op'/1</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$parse_tokens_is_post_in_op_1 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol(",");
    static SymbolTerm s2 = SymbolTerm.makeSymbol("|");
    static SymbolTerm s3 = SymbolTerm.makeSymbol("atom", 1);
    static Predicate _fail_0 = new PRED_fail_0();
    static Predicate _$parse_tokens_is_post_in_op_1_var = new PRED_$parse_tokens_is_post_in_op_1_var();
    static Predicate _$parse_tokens_is_post_in_op_1_var_1 = new PRED_$parse_tokens_is_post_in_op_1_var_1();
    static Predicate _$parse_tokens_is_post_in_op_1_var_2 = new PRED_$parse_tokens_is_post_in_op_1_var_2();
    static Predicate _$parse_tokens_is_post_in_op_1_con = new PRED_$parse_tokens_is_post_in_op_1_con();
    static Predicate _$parse_tokens_is_post_in_op_1_1 = new PRED_$parse_tokens_is_post_in_op_1_1();
    static Predicate _$parse_tokens_is_post_in_op_1_2 = new PRED_$parse_tokens_is_post_in_op_1_2();
    static Predicate _$parse_tokens_is_post_in_op_1_3 = new PRED_$parse_tokens_is_post_in_op_1_3();
    static java.util.Hashtable<Term, Predicate> con = new java.util.Hashtable<Term, Predicate>(2);
    static {
        con.put(s1, _$parse_tokens_is_post_in_op_1_1);
        con.put(s2, _$parse_tokens_is_post_in_op_1_2);
    }

    public Term arg1;

    public PRED_$parse_tokens_is_post_in_op_1(Term a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_$parse_tokens_is_post_in_op_1(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String toString() {
        return "$parse_tokens_is_post_in_op(" + arg1 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$parse_tokens_is_post_in_op_1_var, _fail_0, _fail_0, _$parse_tokens_is_post_in_op_1_con, _$parse_tokens_is_post_in_op_1_3, _fail_0);
    }
}

class PRED_$parse_tokens_is_post_in_op_1_var extends PRED_$parse_tokens_is_post_in_op_1 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$parse_tokens_is_post_in_op_1_1, _$parse_tokens_is_post_in_op_1_var_1);
    }
}

class PRED_$parse_tokens_is_post_in_op_1_var_1 extends PRED_$parse_tokens_is_post_in_op_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$parse_tokens_is_post_in_op_1_2, _$parse_tokens_is_post_in_op_1_var_2);
    }
}

class PRED_$parse_tokens_is_post_in_op_1_var_2 extends PRED_$parse_tokens_is_post_in_op_1 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$parse_tokens_is_post_in_op_1_3);
    }
}

class PRED_$parse_tokens_is_post_in_op_1_con extends PRED_$parse_tokens_is_post_in_op_1 {
    public Predicate exec(Prolog engine) {
        return engine.switch_on_hash(con, _fail_0);
    }
}

class PRED_$parse_tokens_is_post_in_op_1_1 extends PRED_$parse_tokens_is_post_in_op_1 {
    public Predicate exec(Prolog engine) {
    // '$parse_tokens_is_post_in_op'(','):-!
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$parse_tokens_is_post_in_op'(','):-['$neck_cut']
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s1))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_$parse_tokens_is_post_in_op_1_2 extends PRED_$parse_tokens_is_post_in_op_1 {
    public Predicate exec(Prolog engine) {
    // '$parse_tokens_is_post_in_op'('|'):-!
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$parse_tokens_is_post_in_op'('|'):-['$neck_cut']
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s2))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s2, engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_$parse_tokens_is_post_in_op_1_3 extends PRED_$parse_tokens_is_post_in_op_1 {
    public Predicate exec(Prolog engine) {
    // '$parse_tokens_is_post_in_op'(atom(A)):-current_op(B,C,A),'$parse_tokens_post_in_type'(C),!
        Term a1, a2, a3, a4;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // '$parse_tokens_is_post_in_op'(atom(A)):-['$get_level'(B),current_op(C,D,A),'$parse_tokens_post_in_type'(D),'$cut'(B)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s3.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a2 = args[0];
        } else if (a1.isVariable()){
            a2 = new VariableTerm(engine);
            Term[] args = {a2};
            ((VariableTerm) a1).bind(new StructureTerm(s3, args), engine.trail);
        } else {
            return engine.fail();
        }
        a3 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(3))
        if (! a3.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a4 = new VariableTerm(engine);
        p1 = new PRED_$cut_1(a3, cont);
        p2 = new PRED_$parse_tokens_post_in_type_1(a4, p1);
        return new PRED_current_op_3(new VariableTerm(engine), a4, a2, p2);
    }
}
