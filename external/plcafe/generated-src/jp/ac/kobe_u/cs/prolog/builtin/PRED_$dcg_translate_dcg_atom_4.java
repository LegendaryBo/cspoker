package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$dcg_translate_dcg_atom'/4</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$dcg_translate_dcg_atom_4 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("phrase", 3);
    static SymbolTerm s2 = SymbolTerm.makeSymbol(":", 2);
    static IntegerTerm si3 = new IntegerTerm(1);
    static IntegerTerm si4 = new IntegerTerm(2);
    static Predicate _$dcg_translate_dcg_atom_4_top = new PRED_$dcg_translate_dcg_atom_4_top();
    static Predicate _$dcg_translate_dcg_atom_4_var = new PRED_$dcg_translate_dcg_atom_4_var();
    static Predicate _$dcg_translate_dcg_atom_4_var_1 = new PRED_$dcg_translate_dcg_atom_4_var_1();
    static Predicate _$dcg_translate_dcg_atom_4_var_2 = new PRED_$dcg_translate_dcg_atom_4_var_2();
    static Predicate _$dcg_translate_dcg_atom_4_int = new PRED_$dcg_translate_dcg_atom_4_int();
    static Predicate _$dcg_translate_dcg_atom_4_int_1 = new PRED_$dcg_translate_dcg_atom_4_int_1();
    static Predicate _$dcg_translate_dcg_atom_4_1 = new PRED_$dcg_translate_dcg_atom_4_1();
    static Predicate _$dcg_translate_dcg_atom_4_2 = new PRED_$dcg_translate_dcg_atom_4_2();
    static Predicate _$dcg_translate_dcg_atom_4_3 = new PRED_$dcg_translate_dcg_atom_4_3();

    public Term arg1, arg2, arg3, arg4;

    public PRED_$dcg_translate_dcg_atom_4(Term a1, Term a2, Term a3, Term a4, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        this.cont = cont;
    }

    public PRED_$dcg_translate_dcg_atom_4(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        this.cont = cont;
    }

    public int arity() { return 4; }

    public String toString() {
        return "$dcg_translate_dcg_atom(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.aregs[4] = arg4;
        engine.cont = cont;
        return _$dcg_translate_dcg_atom_4_top;
    }
}

class PRED_$dcg_translate_dcg_atom_4_top extends PRED_$dcg_translate_dcg_atom_4 {
    public Predicate exec(Prolog engine) {
        engine.setB0();
        return engine.switch_on_term(_$dcg_translate_dcg_atom_4_var, _$dcg_translate_dcg_atom_4_int, _$dcg_translate_dcg_atom_4_int, _$dcg_translate_dcg_atom_4_int, _$dcg_translate_dcg_atom_4_var, _$dcg_translate_dcg_atom_4_int);
    }
}

class PRED_$dcg_translate_dcg_atom_4_var extends PRED_$dcg_translate_dcg_atom_4 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$dcg_translate_dcg_atom_4_1, _$dcg_translate_dcg_atom_4_var_1);
    }
}

class PRED_$dcg_translate_dcg_atom_4_var_1 extends PRED_$dcg_translate_dcg_atom_4 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$dcg_translate_dcg_atom_4_2, _$dcg_translate_dcg_atom_4_var_2);
    }
}

class PRED_$dcg_translate_dcg_atom_4_var_2 extends PRED_$dcg_translate_dcg_atom_4 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$dcg_translate_dcg_atom_4_3);
    }
}

class PRED_$dcg_translate_dcg_atom_4_int extends PRED_$dcg_translate_dcg_atom_4 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$dcg_translate_dcg_atom_4_1, _$dcg_translate_dcg_atom_4_int_1);
    }
}

class PRED_$dcg_translate_dcg_atom_4_int_1 extends PRED_$dcg_translate_dcg_atom_4 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$dcg_translate_dcg_atom_4_3);
    }
}

class PRED_$dcg_translate_dcg_atom_4_1 extends PRED_$dcg_translate_dcg_atom_4 {
    public Predicate exec(Prolog engine) {
    // '$dcg_translate_dcg_atom'(A,B,C,D):-var(A),!,B=phrase(A,C,D)
        Term a1, a2, a3, a4, a5, a6;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // '$dcg_translate_dcg_atom'(A,B,C,D):-['$get_level'(E),var(A),'$cut'(E),'$unify'(B,phrase(A,C,D))]
        a5 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(5))
        if (! a5.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of var(a(1))
        a1 = a1.dereference();
        if (! a1.isVariable()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(5))
        a5 = a5.dereference();
        if (! a5.isInteger()) {
            throw new IllegalTypeException("integer", a5);
        } else {
            engine.cut(((IntegerTerm) a5).intValue());
        }
        //END inline expansion
        Term[] y1 = {a1, a3, a4};
        a6 = new StructureTerm(s1, y1);
        //START inline expansion of $unify(a(2),a(6))
        if (! a2.unify(a6, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        return cont;
    }
}

class PRED_$dcg_translate_dcg_atom_4_2 extends PRED_$dcg_translate_dcg_atom_4 {
    public Predicate exec(Prolog engine) {
    // '$dcg_translate_dcg_atom'(A:B,A:C,D,E):-!,'$dcg_translate_dcg_atom'(B,C,D,E)
        Term a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // '$dcg_translate_dcg_atom'(A:B,A:C,D,E):-['$neck_cut','$dcg_translate_dcg_atom'(B,C,D,E)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s2.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a5 = args[0];
            a6 = args[1];
        } else if (a1.isVariable()){
            a5 = new VariableTerm(engine);
            a6 = new VariableTerm(engine);
            Term[] args = {a5, a6};
            ((VariableTerm) a1).bind(new StructureTerm(s2, args), engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isStructure()){
            if (! s2.equals(((StructureTerm)a2).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a2).args();
            if (! a5.unify(args[0], engine.trail))
                return engine.fail();
            a7 = args[1];
        } else if (a2.isVariable()){
            a7 = new VariableTerm(engine);
            Term[] args = {a5, a7};
            ((VariableTerm) a2).bind(new StructureTerm(s2, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        engine.aregs[1] = a6;
        engine.aregs[2] = a7;
        engine.aregs[3] = a3;
        engine.aregs[4] = a4;
        engine.cont = cont;
        return _$dcg_translate_dcg_atom_4_top;
    }
}

class PRED_$dcg_translate_dcg_atom_4_3 extends PRED_$dcg_translate_dcg_atom_4 {
    public Predicate exec(Prolog engine) {
    // '$dcg_translate_dcg_atom'(A,B,C,D):-functor(A,E,F),G is F+1,H is F+2,functor(B,E,H),arg(G,B,C),arg(H,B,D),'$dcg_copy_args'(F,A,B)
        Term a1, a2, a3, a4, a5, a6, a7, a8;
        Predicate p1, p2, p3, p4, p5, p6;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // '$dcg_translate_dcg_atom'(A,B,C,D):-[functor(A,E,F),'$plus'(F,1,G),'$plus'(F,2,H),functor(B,E,H),arg(G,B,C),arg(H,B,D),'$dcg_copy_args'(F,A,B)]
        a5 = new VariableTerm(engine);
        a6 = new VariableTerm(engine);
        a7 = new VariableTerm(engine);
        a8 = new VariableTerm(engine);
        p1 = new PRED_$dcg_copy_args_3(a6, a1, a2, cont);
        p2 = new PRED_arg_3(a8, a2, a4, p1);
        p3 = new PRED_arg_3(a7, a2, a3, p2);
        p4 = new PRED_functor_3(a2, a5, a8, p3);
        p5 = new PRED_$plus_3(a6, si4, a8, p4);
        p6 = new PRED_$plus_3(a6, si3, a7, p5);
        return new PRED_functor_3(a1, a5, a6, p6);
    }
}
