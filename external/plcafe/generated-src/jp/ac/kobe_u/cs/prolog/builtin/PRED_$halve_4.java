package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.ListTerm;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.SymbolTerm;
import jp.ac.kobe_u.cs.prolog.lang.Term;
import jp.ac.kobe_u.cs.prolog.lang.VariableTerm;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$halve'/4</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$halve_4 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("[]");
    static Predicate _$halve_4_top = new PRED_$halve_4_top();
    static Predicate _$halve_4_var = new PRED_$halve_4_var();
    static Predicate _$halve_4_var_1 = new PRED_$halve_4_var_1();
    static Predicate _$halve_4_1 = new PRED_$halve_4_1();
    static Predicate _$halve_4_2 = new PRED_$halve_4_2();

    public Term arg1, arg2, arg3, arg4;

    public PRED_$halve_4(Term a1, Term a2, Term a3, Term a4, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        this.cont = cont;
    }

    public PRED_$halve_4(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        this.cont = cont;
    }

    public int arity() { return 4; }

    public String toString() {
        return "$halve(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.aregs[4] = arg4;
        engine.cont = cont;
        return _$halve_4_top;
    }
}

class PRED_$halve_4_top extends PRED_$halve_4 {
    public Predicate exec(Prolog engine) {
        engine.setB0();
        return engine.switch_on_term(_$halve_4_var, _$halve_4_2, _$halve_4_2, _$halve_4_2, _$halve_4_2, _$halve_4_var);
    }
}

class PRED_$halve_4_var extends PRED_$halve_4 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$halve_4_1, _$halve_4_var_1);
    }
}

class PRED_$halve_4_var_1 extends PRED_$halve_4 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$halve_4_2);
    }
}

class PRED_$halve_4_1 extends PRED_$halve_4 {
    public Predicate exec(Prolog engine) {
    // '$halve'([A,B|C],[D|E],[D|F],G):-!,'$halve'(C,E,F,G)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // '$halve'([A,B|C],[D|E],[D|F],G):-['$neck_cut','$halve'(C,E,F,G)]
        a1 = a1.dereference();
        if (a1.isList()){
            Term[] args = {((ListTerm)a1).car(), ((ListTerm)a1).cdr()};
            a5 = args[1];
        } else if (a1.isVariable()){
            a5 = new VariableTerm(engine);
            ((VariableTerm) a1).bind(new ListTerm(new VariableTerm(engine), a5), engine.trail);
        } else {
            return engine.fail();
        }
        a5 = a5.dereference();
        if (a5.isList()){
            Term[] args = {((ListTerm)a5).car(), ((ListTerm)a5).cdr()};
            a6 = args[1];
        } else if (a5.isVariable()){
            a6 = new VariableTerm(engine);
            ((VariableTerm) a5).bind(new ListTerm(new VariableTerm(engine), a6), engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isList()){
            Term[] args = {((ListTerm)a2).car(), ((ListTerm)a2).cdr()};
            a7 = args[0];
            a8 = args[1];
        } else if (a2.isVariable()){
            a7 = new VariableTerm(engine);
            a8 = new VariableTerm(engine);
            ((VariableTerm) a2).bind(new ListTerm(a7, a8), engine.trail);
        } else {
            return engine.fail();
        }
        a3 = a3.dereference();
        if (a3.isList()){
            Term[] args = {((ListTerm)a3).car(), ((ListTerm)a3).cdr()};
            if (! a7.unify(args[0], engine.trail))
                return engine.fail();
            a9 = args[1];
        } else if (a3.isVariable()){
            a9 = new VariableTerm(engine);
            ((VariableTerm) a3).bind(new ListTerm(a7, a9), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        engine.aregs[1] = a6;
        engine.aregs[2] = a8;
        engine.aregs[3] = a9;
        engine.aregs[4] = a4;
        engine.cont = cont;
        return _$halve_4_top;
    }
}

class PRED_$halve_4_2 extends PRED_$halve_4 {
    public Predicate exec(Prolog engine) {
    // '$halve'(A,B,[],B):-true
        Term a1, a2, a3, a4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // '$halve'(A,B,[],B):-[]
        a3 = a3.dereference();
        if (a3.isSymbol()){
            if (! a3.equals(s1))
                return engine.fail();
        } else if (a3.isVariable()){
            ((VariableTerm) a3).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        if (! a2.unify(a4, engine.trail))
            return engine.fail();
        return cont;
    }
}
