package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.IntegerTerm;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.SymbolTerm;
import jp.ac.kobe_u.cs.prolog.lang.Term;
import jp.ac.kobe_u.cs.prolog.lang.VariableTerm;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>trace/0</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_trace_0 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("debug");
    static SymbolTerm s2 = SymbolTerm.makeSymbol("on");
    static SymbolTerm s3 = SymbolTerm.makeSymbol("{Small debugger is switch on}");
    static Predicate _trace_0_sub_1 = new PRED_trace_0_sub_1();
    static Predicate _trace_0_1 = new PRED_trace_0_1();
    static Predicate _trace_0_2 = new PRED_trace_0_2();

    public PRED_trace_0(Predicate cont) {
        this.cont = cont;
    }

    public PRED_trace_0(){}

    public void setArgument(Term[] args, Predicate cont) {
        this.cont = cont;
    }

    public int arity() { return 0; }

    public String toString() {
        return "trace";
    }

    public Predicate exec(Prolog engine) {
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_trace_0_1, _trace_0_sub_1);
    }
}

class PRED_trace_0_sub_1 extends PRED_trace_0 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_trace_0_2);
    }
}

class PRED_trace_0_1 extends PRED_trace_0 {
    public Predicate exec(Prolog engine) {
    // trace:-current_prolog_flag(debug,on),!
        Term a1;
        Predicate p1;
        Predicate cont;
        cont = engine.cont;
    // trace:-['$get_level'(A),current_prolog_flag(debug,on),'$cut'(A)]
        a1 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(1))
        if (! a1.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        p1 = new PRED_$cut_1(a1, cont);
        return new PRED_current_prolog_flag_2(s1, s2, p1);
    }
}

class PRED_trace_0_2 extends PRED_trace_0 {
    public Predicate exec(Prolog engine) {
    // trace:-set_prolog_flag(debug,on),'$trace_init','$fast_write'('{Small debugger is switch on}'),nl,!
        Term a1;
        Predicate p1, p2, p3, p4;
        Predicate cont;
        cont = engine.cont;
    // trace:-['$get_level'(A),set_prolog_flag(debug,on),'$trace_init','$fast_write'('{Small debugger is switch on}'),nl,'$cut'(A)]
        a1 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(1))
        if (! a1.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        p1 = new PRED_$cut_1(a1, cont);
        p2 = new PRED_nl_0(p1);
        p3 = new PRED_$fast_write_1(s3, p2);
        p4 = new PRED_$trace_init_0(p3);
        return new PRED_set_prolog_flag_2(s1, s2, p4);
    }
}
