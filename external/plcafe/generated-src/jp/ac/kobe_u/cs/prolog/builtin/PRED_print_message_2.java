package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>print_message/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_print_message_2 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("var");
    static SymbolTerm s2 = SymbolTerm.makeSymbol("print_message", 2);
    static IntegerTerm si3 = new IntegerTerm(1);
    static SymbolTerm s4 = SymbolTerm.makeSymbol("error");
    static SymbolTerm s5 = SymbolTerm.makeSymbol("info");
    static SymbolTerm s6 = SymbolTerm.makeSymbol("{");
    static SymbolTerm s7 = SymbolTerm.makeSymbol("}");
    static SymbolTerm s8 = SymbolTerm.makeSymbol("warning");
    static SymbolTerm s9 = SymbolTerm.makeSymbol("{WARNING: ");
    static Predicate _print_message_2_var = new PRED_print_message_2_var();
    static Predicate _print_message_2_var_1 = new PRED_print_message_2_var_1();
    static Predicate _print_message_2_var_2 = new PRED_print_message_2_var_2();
    static Predicate _print_message_2_var_3 = new PRED_print_message_2_var_3();
    static Predicate _print_message_2_con = new PRED_print_message_2_con();
    static Predicate _print_message_2_con_0 = new PRED_print_message_2_con_0();
    static Predicate _print_message_2_con_0_1 = new PRED_print_message_2_con_0_1();
    static Predicate _print_message_2_con_1 = new PRED_print_message_2_con_1();
    static Predicate _print_message_2_con_1_1 = new PRED_print_message_2_con_1_1();
    static Predicate _print_message_2_con_2 = new PRED_print_message_2_con_2();
    static Predicate _print_message_2_con_2_1 = new PRED_print_message_2_con_2_1();
    static Predicate _print_message_2_1 = new PRED_print_message_2_1();
    static Predicate _print_message_2_2 = new PRED_print_message_2_2();
    static Predicate _print_message_2_3 = new PRED_print_message_2_3();
    static Predicate _print_message_2_4 = new PRED_print_message_2_4();
    static java.util.Hashtable<Term, Predicate> con = new java.util.Hashtable<Term, Predicate>(3);
    static {
        con.put(s4, _print_message_2_con_0);
        con.put(s5, _print_message_2_con_1);
        con.put(s8, _print_message_2_con_2);
    }

    public Term arg1, arg2;

    public PRED_print_message_2(Term a1, Term a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_print_message_2(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String toString() {
        return "print_message(" + arg1 + "," + arg2 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_print_message_2_var, _print_message_2_1, _print_message_2_1, _print_message_2_con, _print_message_2_1, _print_message_2_1);
    }
}

class PRED_print_message_2_var extends PRED_print_message_2 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_print_message_2_1, _print_message_2_var_1);
    }
}

class PRED_print_message_2_var_1 extends PRED_print_message_2 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_print_message_2_2, _print_message_2_var_2);
    }
}

class PRED_print_message_2_var_2 extends PRED_print_message_2 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_print_message_2_3, _print_message_2_var_3);
    }
}

class PRED_print_message_2_var_3 extends PRED_print_message_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_print_message_2_4);
    }
}

class PRED_print_message_2_con extends PRED_print_message_2 {
    public Predicate exec(Prolog engine) {
        return engine.switch_on_hash(con, _print_message_2_1);
    }
}

class PRED_print_message_2_con_0 extends PRED_print_message_2 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_print_message_2_1, _print_message_2_con_0_1);
    }
}

class PRED_print_message_2_con_0_1 extends PRED_print_message_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_print_message_2_2);
    }
}

class PRED_print_message_2_con_1 extends PRED_print_message_2 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_print_message_2_1, _print_message_2_con_1_1);
    }
}

class PRED_print_message_2_con_1_1 extends PRED_print_message_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_print_message_2_3);
    }
}

class PRED_print_message_2_con_2 extends PRED_print_message_2 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_print_message_2_1, _print_message_2_con_2_1);
    }
}

class PRED_print_message_2_con_2_1 extends PRED_print_message_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_print_message_2_4);
    }
}

class PRED_print_message_2_1 extends PRED_print_message_2 {
    public Predicate exec(Prolog engine) {
    // print_message(A,B):-var(A),!,illarg(var,print_message(A,B),1)
        Term a1, a2, a3, a4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // print_message(A,B):-['$get_level'(C),var(A),'$cut'(C),illarg(var,print_message(A,B),1)]
        a3 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(3))
        if (! a3.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of var(a(1))
        a1 = a1.dereference();
        if (! a1.isVariable()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(3))
        a3 = a3.dereference();
        if (! a3.isInteger()) {
            throw new IllegalTypeException("integer", a3);
        } else {
            engine.cut(((IntegerTerm) a3).intValue());
        }
        //END inline expansion
        Term[] y1 = {a1, a2};
        a4 = new StructureTerm(s2, y1);
        return new PRED_illarg_3(s1, a4, si3, cont);
    }
}

class PRED_print_message_2_2 extends PRED_print_message_2 {
    public Predicate exec(Prolog engine) {
    // print_message(error,A):-!,'$error_message'(A)
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // print_message(error,A):-['$neck_cut','$error_message'(A)]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s4))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s4, engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return new PRED_$error_message_1(a2, cont);
    }
}

class PRED_print_message_2_3 extends PRED_print_message_2 {
    public Predicate exec(Prolog engine) {
    // print_message(info,A):-!,'$fast_write'('{'),'$builtin_message'(A),'$fast_write'('}'),nl
        Term a1, a2;
        Predicate p1, p2, p3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // print_message(info,A):-['$neck_cut','$fast_write'('{'),'$builtin_message'(A),'$fast_write'('}'),nl]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s5))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s5, engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_nl_0(cont);
        p2 = new PRED_$fast_write_1(s7, p1);
        p3 = new PRED_$builtin_message_1(a2, p2);
        return new PRED_$fast_write_1(s6, p3);
    }
}

class PRED_print_message_2_4 extends PRED_print_message_2 {
    public Predicate exec(Prolog engine) {
    // print_message(warning,A):-!,'$fast_write'('{WARNING: '),'$builtin_message'(A),'$fast_write'('}'),nl
        Term a1, a2;
        Predicate p1, p2, p3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // print_message(warning,A):-['$neck_cut','$fast_write'('{WARNING: '),'$builtin_message'(A),'$fast_write'('}'),nl]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s8))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s8, engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_nl_0(cont);
        p2 = new PRED_$fast_write_1(s7, p1);
        p3 = new PRED_$builtin_message_1(a2, p2);
        return new PRED_$fast_write_1(s9, p3);
    }
}
