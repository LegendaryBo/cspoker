package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.IllegalTypeException;
import jp.ac.kobe_u.cs.prolog.lang.IntegerTerm;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.StructureTerm;
import jp.ac.kobe_u.cs.prolog.lang.SymbolTerm;
import jp.ac.kobe_u.cs.prolog.lang.Term;
import jp.ac.kobe_u.cs.prolog.lang.VariableTerm;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>illarg/3</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_illarg_3 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("var");
    static SymbolTerm s2 = SymbolTerm.makeSymbol("instantiation_error", 2);
    static SymbolTerm s3 = SymbolTerm.makeSymbol("type", 1);
    static SymbolTerm s4 = SymbolTerm.makeSymbol("domain", 2);
    static SymbolTerm s5 = SymbolTerm.makeSymbol("existence", 3);
    static SymbolTerm s6 = SymbolTerm.makeSymbol("existence_error", 5);
    static SymbolTerm s7 = SymbolTerm.makeSymbol("permission", 4);
    static SymbolTerm s8 = SymbolTerm.makeSymbol("permission_error", 5);
    static SymbolTerm s9 = SymbolTerm.makeSymbol("representation", 1);
    static SymbolTerm s10 = SymbolTerm.makeSymbol("representation_error", 3);
    static SymbolTerm s11 = SymbolTerm.makeSymbol("evaluation", 1);
    static SymbolTerm s12 = SymbolTerm.makeSymbol("evaluation_error", 3);
    static SymbolTerm s13 = SymbolTerm.makeSymbol("syntax", 3);
    static SymbolTerm s14 = SymbolTerm.makeSymbol("syntax_error", 5);
    static SymbolTerm s15 = SymbolTerm.makeSymbol("system", 1);
    static SymbolTerm s16 = SymbolTerm.makeSymbol("system_error", 1);
    static SymbolTerm s17 = SymbolTerm.makeSymbol("internal", 1);
    static SymbolTerm s18 = SymbolTerm.makeSymbol("internal_error", 1);
    static SymbolTerm s19 = SymbolTerm.makeSymbol("java", 1);
    static SymbolTerm s20 = SymbolTerm.makeSymbol("java_error", 3);
    static Predicate _illarg_3_top = new PRED_illarg_3_top();
    static Predicate _illarg_3_var = new PRED_illarg_3_var();
    static Predicate _illarg_3_var_1 = new PRED_illarg_3_var_1();
    static Predicate _illarg_3_var_2 = new PRED_illarg_3_var_2();
    static Predicate _illarg_3_var_3 = new PRED_illarg_3_var_3();
    static Predicate _illarg_3_var_4 = new PRED_illarg_3_var_4();
    static Predicate _illarg_3_var_5 = new PRED_illarg_3_var_5();
    static Predicate _illarg_3_var_6 = new PRED_illarg_3_var_6();
    static Predicate _illarg_3_var_7 = new PRED_illarg_3_var_7();
    static Predicate _illarg_3_var_8 = new PRED_illarg_3_var_8();
    static Predicate _illarg_3_var_9 = new PRED_illarg_3_var_9();
    static Predicate _illarg_3_var_10 = new PRED_illarg_3_var_10();
    static Predicate _illarg_3_var_11 = new PRED_illarg_3_var_11();
    static Predicate _illarg_3_var_12 = new PRED_illarg_3_var_12();
    static Predicate _illarg_3_int = new PRED_illarg_3_int();
    static Predicate _illarg_3_int_1 = new PRED_illarg_3_int_1();
    static Predicate _illarg_3_con = new PRED_illarg_3_con();
    static Predicate _illarg_3_con_1 = new PRED_illarg_3_con_1();
    static Predicate _illarg_3_con_2 = new PRED_illarg_3_con_2();
    static Predicate _illarg_3_str = new PRED_illarg_3_str();
    static Predicate _illarg_3_str_0 = new PRED_illarg_3_str_0();
    static Predicate _illarg_3_str_0_1 = new PRED_illarg_3_str_0_1();
    static Predicate _illarg_3_str_0_2 = new PRED_illarg_3_str_0_2();
    static Predicate _illarg_3_str_1 = new PRED_illarg_3_str_1();
    static Predicate _illarg_3_str_1_1 = new PRED_illarg_3_str_1_1();
    static Predicate _illarg_3_str_1_2 = new PRED_illarg_3_str_1_2();
    static Predicate _illarg_3_str_2 = new PRED_illarg_3_str_2();
    static Predicate _illarg_3_str_2_1 = new PRED_illarg_3_str_2_1();
    static Predicate _illarg_3_str_2_2 = new PRED_illarg_3_str_2_2();
    static Predicate _illarg_3_str_3 = new PRED_illarg_3_str_3();
    static Predicate _illarg_3_str_3_1 = new PRED_illarg_3_str_3_1();
    static Predicate _illarg_3_str_3_2 = new PRED_illarg_3_str_3_2();
    static Predicate _illarg_3_str_4 = new PRED_illarg_3_str_4();
    static Predicate _illarg_3_str_4_1 = new PRED_illarg_3_str_4_1();
    static Predicate _illarg_3_str_4_2 = new PRED_illarg_3_str_4_2();
    static Predicate _illarg_3_str_5 = new PRED_illarg_3_str_5();
    static Predicate _illarg_3_str_5_1 = new PRED_illarg_3_str_5_1();
    static Predicate _illarg_3_str_5_2 = new PRED_illarg_3_str_5_2();
    static Predicate _illarg_3_str_6 = new PRED_illarg_3_str_6();
    static Predicate _illarg_3_str_6_1 = new PRED_illarg_3_str_6_1();
    static Predicate _illarg_3_str_6_2 = new PRED_illarg_3_str_6_2();
    static Predicate _illarg_3_str_7 = new PRED_illarg_3_str_7();
    static Predicate _illarg_3_str_7_1 = new PRED_illarg_3_str_7_1();
    static Predicate _illarg_3_str_7_2 = new PRED_illarg_3_str_7_2();
    static Predicate _illarg_3_str_8 = new PRED_illarg_3_str_8();
    static Predicate _illarg_3_str_8_1 = new PRED_illarg_3_str_8_1();
    static Predicate _illarg_3_str_8_2 = new PRED_illarg_3_str_8_2();
    static Predicate _illarg_3_str_9 = new PRED_illarg_3_str_9();
    static Predicate _illarg_3_str_9_1 = new PRED_illarg_3_str_9_1();
    static Predicate _illarg_3_str_9_2 = new PRED_illarg_3_str_9_2();
    static Predicate _illarg_3_1 = new PRED_illarg_3_1();
    static Predicate _illarg_3_2 = new PRED_illarg_3_2();
    static Predicate _illarg_3_3 = new PRED_illarg_3_3();
    static Predicate _illarg_3_4 = new PRED_illarg_3_4();
    static Predicate _illarg_3_5 = new PRED_illarg_3_5();
    static Predicate _illarg_3_6 = new PRED_illarg_3_6();
    static Predicate _illarg_3_7 = new PRED_illarg_3_7();
    static Predicate _illarg_3_8 = new PRED_illarg_3_8();
    static Predicate _illarg_3_9 = new PRED_illarg_3_9();
    static Predicate _illarg_3_10 = new PRED_illarg_3_10();
    static Predicate _illarg_3_11 = new PRED_illarg_3_11();
    static Predicate _illarg_3_12 = new PRED_illarg_3_12();
    static Predicate _illarg_3_13 = new PRED_illarg_3_13();
    static java.util.Hashtable<Term, Predicate> str = new java.util.Hashtable<Term, Predicate>(10);
    static {
        str.put(s3, _illarg_3_str_0);
        str.put(s4, _illarg_3_str_1);
        str.put(s5, _illarg_3_str_2);
        str.put(s7, _illarg_3_str_3);
        str.put(s9, _illarg_3_str_4);
        str.put(s11, _illarg_3_str_5);
        str.put(s13, _illarg_3_str_6);
        str.put(s15, _illarg_3_str_7);
        str.put(s17, _illarg_3_str_8);
        str.put(s19, _illarg_3_str_9);
    }

    public Term arg1, arg2, arg3;

    public PRED_illarg_3(Term a1, Term a2, Term a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_illarg_3(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String toString() {
        return "illarg(" + arg1 + "," + arg2 + "," + arg3 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.cont = cont;
        return _illarg_3_top;
    }
}

class PRED_illarg_3_top extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        engine.setB0();
        return engine.switch_on_term(_illarg_3_var, _illarg_3_int, _illarg_3_int, _illarg_3_con, _illarg_3_str, _illarg_3_int);
    }
}

class PRED_illarg_3_var extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_illarg_3_1, _illarg_3_var_1);
    }
}

class PRED_illarg_3_var_1 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_illarg_3_2, _illarg_3_var_2);
    }
}

class PRED_illarg_3_var_2 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_illarg_3_3, _illarg_3_var_3);
    }
}

class PRED_illarg_3_var_3 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_illarg_3_4, _illarg_3_var_4);
    }
}

class PRED_illarg_3_var_4 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_illarg_3_5, _illarg_3_var_5);
    }
}

class PRED_illarg_3_var_5 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_illarg_3_6, _illarg_3_var_6);
    }
}

class PRED_illarg_3_var_6 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_illarg_3_7, _illarg_3_var_7);
    }
}

class PRED_illarg_3_var_7 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_illarg_3_8, _illarg_3_var_8);
    }
}

class PRED_illarg_3_var_8 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_illarg_3_9, _illarg_3_var_9);
    }
}

class PRED_illarg_3_var_9 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_illarg_3_10, _illarg_3_var_10);
    }
}

class PRED_illarg_3_var_10 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_illarg_3_11, _illarg_3_var_11);
    }
}

class PRED_illarg_3_var_11 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_illarg_3_12, _illarg_3_var_12);
    }
}

class PRED_illarg_3_var_12 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_illarg_3_13);
    }
}

class PRED_illarg_3_int extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_illarg_3_1, _illarg_3_int_1);
    }
}

class PRED_illarg_3_int_1 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_illarg_3_13);
    }
}

class PRED_illarg_3_con extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_illarg_3_1, _illarg_3_con_1);
    }
}

class PRED_illarg_3_con_1 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_illarg_3_2, _illarg_3_con_2);
    }
}

class PRED_illarg_3_con_2 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_illarg_3_13);
    }
}

class PRED_illarg_3_str extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.switch_on_hash(str, _illarg_3_int);
    }
}

class PRED_illarg_3_str_0 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_illarg_3_1, _illarg_3_str_0_1);
    }
}

class PRED_illarg_3_str_0_1 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_illarg_3_3, _illarg_3_str_0_2);
    }
}

class PRED_illarg_3_str_0_2 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_illarg_3_13);
    }
}

class PRED_illarg_3_str_1 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_illarg_3_1, _illarg_3_str_1_1);
    }
}

class PRED_illarg_3_str_1_1 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_illarg_3_4, _illarg_3_str_1_2);
    }
}

class PRED_illarg_3_str_1_2 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_illarg_3_13);
    }
}

class PRED_illarg_3_str_2 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_illarg_3_1, _illarg_3_str_2_1);
    }
}

class PRED_illarg_3_str_2_1 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_illarg_3_5, _illarg_3_str_2_2);
    }
}

class PRED_illarg_3_str_2_2 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_illarg_3_13);
    }
}

class PRED_illarg_3_str_3 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_illarg_3_1, _illarg_3_str_3_1);
    }
}

class PRED_illarg_3_str_3_1 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_illarg_3_6, _illarg_3_str_3_2);
    }
}

class PRED_illarg_3_str_3_2 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_illarg_3_13);
    }
}

class PRED_illarg_3_str_4 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_illarg_3_1, _illarg_3_str_4_1);
    }
}

class PRED_illarg_3_str_4_1 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_illarg_3_7, _illarg_3_str_4_2);
    }
}

class PRED_illarg_3_str_4_2 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_illarg_3_13);
    }
}

class PRED_illarg_3_str_5 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_illarg_3_1, _illarg_3_str_5_1);
    }
}

class PRED_illarg_3_str_5_1 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_illarg_3_8, _illarg_3_str_5_2);
    }
}

class PRED_illarg_3_str_5_2 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_illarg_3_13);
    }
}

class PRED_illarg_3_str_6 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_illarg_3_1, _illarg_3_str_6_1);
    }
}

class PRED_illarg_3_str_6_1 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_illarg_3_9, _illarg_3_str_6_2);
    }
}

class PRED_illarg_3_str_6_2 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_illarg_3_13);
    }
}

class PRED_illarg_3_str_7 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_illarg_3_1, _illarg_3_str_7_1);
    }
}

class PRED_illarg_3_str_7_1 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_illarg_3_10, _illarg_3_str_7_2);
    }
}

class PRED_illarg_3_str_7_2 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_illarg_3_13);
    }
}

class PRED_illarg_3_str_8 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_illarg_3_1, _illarg_3_str_8_1);
    }
}

class PRED_illarg_3_str_8_1 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_illarg_3_11, _illarg_3_str_8_2);
    }
}

class PRED_illarg_3_str_8_2 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_illarg_3_13);
    }
}

class PRED_illarg_3_str_9 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_illarg_3_1, _illarg_3_str_9_1);
    }
}

class PRED_illarg_3_str_9_1 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_illarg_3_12, _illarg_3_str_9_2);
    }
}

class PRED_illarg_3_str_9_2 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_illarg_3_13);
    }
}

class PRED_illarg_3_1 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
    // illarg(A,B,C):-var(A),!,illarg(var,B,C)
        Term a1, a2, a3, a4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // illarg(A,B,C):-['$get_level'(D),var(A),'$cut'(D),illarg(var,B,C)]
        a4 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(4))
        if (! a4.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of var(a(1))
        a1 = a1.dereference();
        if (! a1.isVariable()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(4))
        a4 = a4.dereference();
        if (! a4.isInteger()) {
            throw new IllegalTypeException("integer", a4);
        } else {
            engine.cut(((IntegerTerm) a4).intValue());
        }
        //END inline expansion
        engine.aregs[1] = s1;
        engine.aregs[2] = a2;
        engine.aregs[3] = a3;
        engine.cont = cont;
        return _illarg_3_top;
    }
}

class PRED_illarg_3_2 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
    // illarg(var,A,B):-raise_exception(instantiation_error(A,B))
        Term a1, a2, a3, a4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // illarg(var,A,B):-[raise_exception(instantiation_error(A,B))]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s1))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        Term[] y1 = {a2, a3};
        a4 = new StructureTerm(s2, y1);
        return new PRED_raise_exception_1(a4, cont);
    }
}

class PRED_illarg_3_3 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
    // illarg(type(A),B,C):-arg(C,B,D),'$dummy_29_builtins.pl'(E,A,C,D,B),raise_exception(E)
        Term a1, a2, a3, a4, a5, a6;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // illarg(type(A),B,C):-[arg(C,B,D),'$dummy_29_builtins.pl'(E,A,C,D,B),raise_exception(E)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s3.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a4 = args[0];
        } else if (a1.isVariable()){
            a4 = new VariableTerm(engine);
            Term[] args = {a4};
            ((VariableTerm) a1).bind(new StructureTerm(s3, args), engine.trail);
        } else {
            return engine.fail();
        }
        a5 = new VariableTerm(engine);
        a6 = new VariableTerm(engine);
        p1 = new PRED_raise_exception_1(a6, cont);
        p2 = new PRED_$dummy_29_builtins$002Epl_5(a6, a4, a3, a5, a2, p1);
        return new PRED_arg_3(a3, a2, a5, p2);
    }
}

class PRED_illarg_3_4 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
    // illarg(domain(A,B),C,D):-arg(D,C,E),'$dummy_30_builtins.pl'(E,D,B,A,F,C),raise_exception(F)
        Term a1, a2, a3, a4, a5, a6, a7;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // illarg(domain(A,B),C,D):-[arg(D,C,E),'$dummy_30_builtins.pl'(E,D,B,A,F,C),raise_exception(F)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s4.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a4 = args[0];
            a5 = args[1];
        } else if (a1.isVariable()){
            a4 = new VariableTerm(engine);
            a5 = new VariableTerm(engine);
            Term[] args = {a4, a5};
            ((VariableTerm) a1).bind(new StructureTerm(s4, args), engine.trail);
        } else {
            return engine.fail();
        }
        a6 = new VariableTerm(engine);
        a7 = new VariableTerm(engine);
        p1 = new PRED_raise_exception_1(a7, cont);
        p2 = new PRED_$dummy_30_builtins$002Epl_6(a6, a3, a5, a4, a7, a2, p1);
        return new PRED_arg_3(a3, a2, a6, p2);
    }
}

class PRED_illarg_3_5 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
    // illarg(existence(A,B,C),D,E):-raise_exception(existence_error(D,E,A,B,C))
        Term a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // illarg(existence(A,B,C),D,E):-[raise_exception(existence_error(D,E,A,B,C))]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s5.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a4 = args[0];
            a5 = args[1];
            a6 = args[2];
        } else if (a1.isVariable()){
            a4 = new VariableTerm(engine);
            a5 = new VariableTerm(engine);
            a6 = new VariableTerm(engine);
            Term[] args = {a4, a5, a6};
            ((VariableTerm) a1).bind(new StructureTerm(s5, args), engine.trail);
        } else {
            return engine.fail();
        }
        Term[] y1 = {a2, a3, a4, a5, a6};
        a7 = new StructureTerm(s6, y1);
        return new PRED_raise_exception_1(a7, cont);
    }
}

class PRED_illarg_3_6 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
    // illarg(permission(A,B,C,D),E,F):-raise_exception(permission_error(E,A,B,C,D))
        Term a1, a2, a3, a4, a5, a6, a7, a8;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // illarg(permission(A,B,C,D),E,F):-[raise_exception(permission_error(E,A,B,C,D))]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s7.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a4 = args[0];
            a5 = args[1];
            a6 = args[2];
            a7 = args[3];
        } else if (a1.isVariable()){
            a4 = new VariableTerm(engine);
            a5 = new VariableTerm(engine);
            a6 = new VariableTerm(engine);
            a7 = new VariableTerm(engine);
            Term[] args = {a4, a5, a6, a7};
            ((VariableTerm) a1).bind(new StructureTerm(s7, args), engine.trail);
        } else {
            return engine.fail();
        }
        Term[] y1 = {a2, a4, a5, a6, a7};
        a8 = new StructureTerm(s8, y1);
        return new PRED_raise_exception_1(a8, cont);
    }
}

class PRED_illarg_3_7 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
    // illarg(representation(A),B,C):-raise_exception(representation_error(B,C,A))
        Term a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // illarg(representation(A),B,C):-[raise_exception(representation_error(B,C,A))]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s9.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a4 = args[0];
        } else if (a1.isVariable()){
            a4 = new VariableTerm(engine);
            Term[] args = {a4};
            ((VariableTerm) a1).bind(new StructureTerm(s9, args), engine.trail);
        } else {
            return engine.fail();
        }
        Term[] y1 = {a2, a3, a4};
        a5 = new StructureTerm(s10, y1);
        return new PRED_raise_exception_1(a5, cont);
    }
}

class PRED_illarg_3_8 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
    // illarg(evaluation(A),B,C):-raise_exception(evaluation_error(B,C,A))
        Term a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // illarg(evaluation(A),B,C):-[raise_exception(evaluation_error(B,C,A))]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s11.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a4 = args[0];
        } else if (a1.isVariable()){
            a4 = new VariableTerm(engine);
            Term[] args = {a4};
            ((VariableTerm) a1).bind(new StructureTerm(s11, args), engine.trail);
        } else {
            return engine.fail();
        }
        Term[] y1 = {a2, a3, a4};
        a5 = new StructureTerm(s12, y1);
        return new PRED_raise_exception_1(a5, cont);
    }
}

class PRED_illarg_3_9 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
    // illarg(syntax(A,B,C),D,E):-raise_exception(syntax_error(D,E,A,B,C))
        Term a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // illarg(syntax(A,B,C),D,E):-[raise_exception(syntax_error(D,E,A,B,C))]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s13.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a4 = args[0];
            a5 = args[1];
            a6 = args[2];
        } else if (a1.isVariable()){
            a4 = new VariableTerm(engine);
            a5 = new VariableTerm(engine);
            a6 = new VariableTerm(engine);
            Term[] args = {a4, a5, a6};
            ((VariableTerm) a1).bind(new StructureTerm(s13, args), engine.trail);
        } else {
            return engine.fail();
        }
        Term[] y1 = {a2, a3, a4, a5, a6};
        a7 = new StructureTerm(s14, y1);
        return new PRED_raise_exception_1(a7, cont);
    }
}

class PRED_illarg_3_10 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
    // illarg(system(A),B,C):-raise_exception(system_error(A))
        Term a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // illarg(system(A),B,C):-[raise_exception(system_error(A))]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s15.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a4 = args[0];
        } else if (a1.isVariable()){
            a4 = new VariableTerm(engine);
            Term[] args = {a4};
            ((VariableTerm) a1).bind(new StructureTerm(s15, args), engine.trail);
        } else {
            return engine.fail();
        }
        Term[] y1 = {a4};
        a5 = new StructureTerm(s16, y1);
        return new PRED_raise_exception_1(a5, cont);
    }
}

class PRED_illarg_3_11 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
    // illarg(internal(A),B,C):-raise_exception(internal_error(A))
        Term a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // illarg(internal(A),B,C):-[raise_exception(internal_error(A))]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s17.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a4 = args[0];
        } else if (a1.isVariable()){
            a4 = new VariableTerm(engine);
            Term[] args = {a4};
            ((VariableTerm) a1).bind(new StructureTerm(s17, args), engine.trail);
        } else {
            return engine.fail();
        }
        Term[] y1 = {a4};
        a5 = new StructureTerm(s18, y1);
        return new PRED_raise_exception_1(a5, cont);
    }
}

class PRED_illarg_3_12 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
    // illarg(java(A),B,C):-raise_exception(java_error(B,C,A))
        Term a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // illarg(java(A),B,C):-[raise_exception(java_error(B,C,A))]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s19.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a4 = args[0];
        } else if (a1.isVariable()){
            a4 = new VariableTerm(engine);
            Term[] args = {a4};
            ((VariableTerm) a1).bind(new StructureTerm(s19, args), engine.trail);
        } else {
            return engine.fail();
        }
        Term[] y1 = {a2, a3, a4};
        a5 = new StructureTerm(s20, y1);
        return new PRED_raise_exception_1(a5, cont);
    }
}

class PRED_illarg_3_13 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) {
    // illarg(A,B,C):-raise_exception(A)
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // illarg(A,B,C):-[raise_exception(A)]
        return new PRED_raise_exception_1(a1, cont);
    }
}
