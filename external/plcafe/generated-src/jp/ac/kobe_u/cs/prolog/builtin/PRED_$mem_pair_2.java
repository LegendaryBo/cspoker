package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$mem_pair'/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$mem_pair_2 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("=", 2);
    static Predicate _$mem_pair_2_top = new PRED_$mem_pair_2_top();
    static Predicate _$mem_pair_2_var = new PRED_$mem_pair_2_var();
    static Predicate _$mem_pair_2_var_1 = new PRED_$mem_pair_2_var_1();
    static Predicate _$mem_pair_2_1 = new PRED_$mem_pair_2_1();
    static Predicate _$mem_pair_2_2 = new PRED_$mem_pair_2_2();

    public Term arg1, arg2;

    public PRED_$mem_pair_2(Term a1, Term a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_$mem_pair_2(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String toString() {
        return "$mem_pair(" + arg1 + "," + arg2 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.cont = cont;
        return _$mem_pair_2_top;
    }
}

class PRED_$mem_pair_2_top extends PRED_$mem_pair_2 {
    public Predicate exec(Prolog engine) {
        engine.setB0();
        return engine.switch_on_term(_$mem_pair_2_var, _$mem_pair_2_2, _$mem_pair_2_2, _$mem_pair_2_2, _$mem_pair_2_var, _$mem_pair_2_2);
    }
}

class PRED_$mem_pair_2_var extends PRED_$mem_pair_2 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$mem_pair_2_1, _$mem_pair_2_var_1);
    }
}

class PRED_$mem_pair_2_var_1 extends PRED_$mem_pair_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$mem_pair_2_2);
    }
}

class PRED_$mem_pair_2_1 extends PRED_$mem_pair_2 {
    public Predicate exec(Prolog engine) {
    // '$mem_pair'(A=B,[C=D|E]):-A==C,!,B=D
        Term a1, a2, a3, a4, a5, a6, a7, a8;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$mem_pair'(A=B,[C=D|E]):-['$get_level'(F),'$equality_of_term'(A,C),'$cut'(F),'$unify'(B,D)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s1.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a3 = args[0];
            a4 = args[1];
        } else if (a1.isVariable()){
            a3 = new VariableTerm(engine);
            a4 = new VariableTerm(engine);
            Term[] args = {a3, a4};
            ((VariableTerm) a1).bind(new StructureTerm(s1, args), engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isList()){
            Term[] args = {((ListTerm)a2).car(), ((ListTerm)a2).cdr()};
            a5 = args[0];
        } else if (a2.isVariable()){
            a5 = new VariableTerm(engine);
            ((VariableTerm) a2).bind(new ListTerm(a5, new VariableTerm(engine)), engine.trail);
        } else {
            return engine.fail();
        }
        a5 = a5.dereference();
        if (a5.isStructure()){
            if (! s1.equals(((StructureTerm)a5).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a5).args();
            a6 = args[0];
            a7 = args[1];
        } else if (a5.isVariable()){
            a6 = new VariableTerm(engine);
            a7 = new VariableTerm(engine);
            Term[] args = {a6, a7};
            ((VariableTerm) a5).bind(new StructureTerm(s1, args), engine.trail);
        } else {
            return engine.fail();
        }
        a8 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(8))
        if (! a8.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $equality_of_term(a(3),a(6))
        a3 = a3.dereference();
        a6 = a6.dereference();
        if (! a3.equals(a6)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(8))
        a8 = a8.dereference();
        if (! a8.isInteger()) {
            throw new IllegalTypeException("integer", a8);
        } else {
            engine.cut(((IntegerTerm) a8).intValue());
        }
        //END inline expansion
        //START inline expansion of $unify(a(4),a(7))
        if (! a4.unify(a7, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        return cont;
    }
}

class PRED_$mem_pair_2_2 extends PRED_$mem_pair_2 {
    public Predicate exec(Prolog engine) {
    // '$mem_pair'(A,[B|C]):-'$mem_pair'(A,C)
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$mem_pair'(A,[B|C]):-['$mem_pair'(A,C)]
        a2 = a2.dereference();
        if (a2.isList()){
            Term[] args = {((ListTerm)a2).car(), ((ListTerm)a2).cdr()};
            a3 = args[1];
        } else if (a2.isVariable()){
            a3 = new VariableTerm(engine);
            ((VariableTerm) a2).bind(new ListTerm(new VariableTerm(engine), a3), engine.trail);
        } else {
            return engine.fail();
        }
        engine.aregs[1] = a1;
        engine.aregs[2] = a3;
        engine.cont = cont;
        return _$mem_pair_2_top;
    }
}
