package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>compound/1</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_compound_1 extends Predicate {
    static IntegerTerm si1 = new IntegerTerm(0);

    public Term arg1;

    public PRED_compound_1(Term a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_compound_1(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String toString() {
        return "compound(" + arg1 + ")";
    }

    public Predicate exec(Prolog engine) {
    // compound(A):-nonvar(A),functor(A,B,C),C>0
        engine.setB0();
        Term a1, a2;
        Predicate p1;
        a1 = arg1;
    // compound(A):-[nonvar(A),functor(A,B,C),'$greater_than'(C,0)]
        //START inline expansion of nonvar(a(1))
        a1 = a1.dereference();
        if (a1.isVariable()) {
            return engine.fail();
        }
        //END inline expansion
        a2 = new VariableTerm(engine);
        p1 = new PRED_$greater_than_2(a2, si1, cont);
        return new PRED_functor_3(a1, new VariableTerm(engine), a2, p1);
    }
}
