package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$write_dynamic_body'/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$write_dynamic_body_2 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol(",", 2);
    static SymbolTerm s2 = SymbolTerm.makeSymbol(",");
    static SymbolTerm s3 = SymbolTerm.makeSymbol(";", 2);
    static IntegerTerm si4 = new IntegerTerm(4);
    static SymbolTerm s5 = SymbolTerm.makeSymbol("(");
    static SymbolTerm s6 = SymbolTerm.makeSymbol(";");
    static SymbolTerm s7 = SymbolTerm.makeSymbol(")");
    static SymbolTerm s8 = SymbolTerm.makeSymbol("->", 2);
    static SymbolTerm s9 = SymbolTerm.makeSymbol("->");
    static Predicate _$write_dynamic_body_2_top = new PRED_$write_dynamic_body_2_top();
    static Predicate _$write_dynamic_body_2_var = new PRED_$write_dynamic_body_2_var();
    static Predicate _$write_dynamic_body_2_var_1 = new PRED_$write_dynamic_body_2_var_1();
    static Predicate _$write_dynamic_body_2_var_2 = new PRED_$write_dynamic_body_2_var_2();
    static Predicate _$write_dynamic_body_2_var_3 = new PRED_$write_dynamic_body_2_var_3();
    static Predicate _$write_dynamic_body_2_str = new PRED_$write_dynamic_body_2_str();
    static Predicate _$write_dynamic_body_2_str_0 = new PRED_$write_dynamic_body_2_str_0();
    static Predicate _$write_dynamic_body_2_str_0_1 = new PRED_$write_dynamic_body_2_str_0_1();
    static Predicate _$write_dynamic_body_2_str_1 = new PRED_$write_dynamic_body_2_str_1();
    static Predicate _$write_dynamic_body_2_str_1_1 = new PRED_$write_dynamic_body_2_str_1_1();
    static Predicate _$write_dynamic_body_2_str_2 = new PRED_$write_dynamic_body_2_str_2();
    static Predicate _$write_dynamic_body_2_str_2_1 = new PRED_$write_dynamic_body_2_str_2_1();
    static Predicate _$write_dynamic_body_2_1 = new PRED_$write_dynamic_body_2_1();
    static Predicate _$write_dynamic_body_2_2 = new PRED_$write_dynamic_body_2_2();
    static Predicate _$write_dynamic_body_2_3 = new PRED_$write_dynamic_body_2_3();
    static Predicate _$write_dynamic_body_2_4 = new PRED_$write_dynamic_body_2_4();
    static java.util.Hashtable<Term, Predicate> str = new java.util.Hashtable<Term, Predicate>(3);
    static {
        str.put(s1, _$write_dynamic_body_2_str_0);
        str.put(s3, _$write_dynamic_body_2_str_1);
        str.put(s8, _$write_dynamic_body_2_str_2);
    }

    public Term arg1, arg2;

    public PRED_$write_dynamic_body_2(Term a1, Term a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_$write_dynamic_body_2(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String toString() {
        return "$write_dynamic_body(" + arg1 + "," + arg2 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.cont = cont;
        return _$write_dynamic_body_2_top;
    }
}

class PRED_$write_dynamic_body_2_top extends PRED_$write_dynamic_body_2 {
    public Predicate exec(Prolog engine) {
        engine.setB0();
        return engine.switch_on_term(_$write_dynamic_body_2_var, _$write_dynamic_body_2_4, _$write_dynamic_body_2_4, _$write_dynamic_body_2_4, _$write_dynamic_body_2_str, _$write_dynamic_body_2_4);
    }
}

class PRED_$write_dynamic_body_2_var extends PRED_$write_dynamic_body_2 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$write_dynamic_body_2_1, _$write_dynamic_body_2_var_1);
    }
}

class PRED_$write_dynamic_body_2_var_1 extends PRED_$write_dynamic_body_2 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$write_dynamic_body_2_2, _$write_dynamic_body_2_var_2);
    }
}

class PRED_$write_dynamic_body_2_var_2 extends PRED_$write_dynamic_body_2 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$write_dynamic_body_2_3, _$write_dynamic_body_2_var_3);
    }
}

class PRED_$write_dynamic_body_2_var_3 extends PRED_$write_dynamic_body_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$write_dynamic_body_2_4);
    }
}

class PRED_$write_dynamic_body_2_str extends PRED_$write_dynamic_body_2 {
    public Predicate exec(Prolog engine) {
        return engine.switch_on_hash(str, _$write_dynamic_body_2_4);
    }
}

class PRED_$write_dynamic_body_2_str_0 extends PRED_$write_dynamic_body_2 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$write_dynamic_body_2_1, _$write_dynamic_body_2_str_0_1);
    }
}

class PRED_$write_dynamic_body_2_str_0_1 extends PRED_$write_dynamic_body_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$write_dynamic_body_2_4);
    }
}

class PRED_$write_dynamic_body_2_str_1 extends PRED_$write_dynamic_body_2 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$write_dynamic_body_2_2, _$write_dynamic_body_2_str_1_1);
    }
}

class PRED_$write_dynamic_body_2_str_1_1 extends PRED_$write_dynamic_body_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$write_dynamic_body_2_4);
    }
}

class PRED_$write_dynamic_body_2_str_2 extends PRED_$write_dynamic_body_2 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$write_dynamic_body_2_3, _$write_dynamic_body_2_str_2_1);
    }
}

class PRED_$write_dynamic_body_2_str_2_1 extends PRED_$write_dynamic_body_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$write_dynamic_body_2_4);
    }
}

class PRED_$write_dynamic_body_2_1 extends PRED_$write_dynamic_body_2 {
    public Predicate exec(Prolog engine) {
    // '$write_dynamic_body'((A,B),C):-!,'$write_dynamic_body'(A,C),write(','),nl,'$write_dynamic_body'(B,C)
        Term a1, a2, a3, a4;
        Predicate p1, p2, p3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$write_dynamic_body'((A,B),C):-['$neck_cut','$write_dynamic_body'(A,C),write(','),nl,'$write_dynamic_body'(B,C)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s1.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a3 = args[0];
            a4 = args[1];
        } else if (a1.isVariable()){
            a3 = new VariableTerm(engine);
            a4 = new VariableTerm(engine);
            Term[] args = {a3, a4};
            ((VariableTerm) a1).bind(new StructureTerm(s1, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_$write_dynamic_body_2(a4, a2, cont);
        p2 = new PRED_nl_0(p1);
        p3 = new PRED_write_1(s2, p2);
        engine.aregs[1] = a3;
        engine.aregs[2] = a2;
        engine.cont = p3;
        return _$write_dynamic_body_2_top;
    }
}

class PRED_$write_dynamic_body_2_2 extends PRED_$write_dynamic_body_2 {
    public Predicate exec(Prolog engine) {
    // '$write_dynamic_body'((A;B),C):-!,D is C+4,tab(C),write('('),nl,'$write_dynamic_body'(A,D),nl,tab(C),write(;),nl,'$write_dynamic_body'(B,D),nl,tab(C),write(')')
        Term a1, a2, a3, a4, a5;
        Predicate p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$write_dynamic_body'((A;B),C):-['$neck_cut','$plus'(C,4,D),tab(C),write('('),nl,'$write_dynamic_body'(A,D),nl,tab(C),write(;),nl,'$write_dynamic_body'(B,D),nl,tab(C),write(')')]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s3.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a3 = args[0];
            a4 = args[1];
        } else if (a1.isVariable()){
            a3 = new VariableTerm(engine);
            a4 = new VariableTerm(engine);
            Term[] args = {a3, a4};
            ((VariableTerm) a1).bind(new StructureTerm(s3, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        a5 = new VariableTerm(engine);
        //START inline expansion of $plus(a(2),si(4),a(5))
        try {
            if (! a5.unify(Arithmetic.evaluate(a2).add(si4), engine.trail)) {
                return engine.fail();
            }
        } catch (BuiltinException e) {
            e.goal = this;
            throw e;
        }
        //END inline expansion
        p1 = new PRED_write_1(s7, cont);
        p2 = new PRED_tab_1(a2, p1);
        p3 = new PRED_nl_0(p2);
        p4 = new PRED_$write_dynamic_body_2(a4, a5, p3);
        p5 = new PRED_nl_0(p4);
        p6 = new PRED_write_1(s6, p5);
        p7 = new PRED_tab_1(a2, p6);
        p8 = new PRED_nl_0(p7);
        p9 = new PRED_$write_dynamic_body_2(a3, a5, p8);
        p10 = new PRED_nl_0(p9);
        p11 = new PRED_write_1(s5, p10);
        return new PRED_tab_1(a2, p11);
    }
}

class PRED_$write_dynamic_body_2_3 extends PRED_$write_dynamic_body_2 {
    public Predicate exec(Prolog engine) {
    // '$write_dynamic_body'((A->B),C):-!,D is C+4,tab(C),write('('),nl,'$write_dynamic_body'(A,D),nl,tab(C),write(->),nl,'$write_dynamic_body'(B,D),nl,tab(C),write(')')
        Term a1, a2, a3, a4, a5;
        Predicate p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$write_dynamic_body'((A->B),C):-['$neck_cut','$plus'(C,4,D),tab(C),write('('),nl,'$write_dynamic_body'(A,D),nl,tab(C),write(->),nl,'$write_dynamic_body'(B,D),nl,tab(C),write(')')]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s8.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a3 = args[0];
            a4 = args[1];
        } else if (a1.isVariable()){
            a3 = new VariableTerm(engine);
            a4 = new VariableTerm(engine);
            Term[] args = {a3, a4};
            ((VariableTerm) a1).bind(new StructureTerm(s8, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        a5 = new VariableTerm(engine);
        //START inline expansion of $plus(a(2),si(4),a(5))
        try {
            if (! a5.unify(Arithmetic.evaluate(a2).add(si4), engine.trail)) {
                return engine.fail();
            }
        } catch (BuiltinException e) {
            e.goal = this;
            throw e;
        }
        //END inline expansion
        p1 = new PRED_write_1(s7, cont);
        p2 = new PRED_tab_1(a2, p1);
        p3 = new PRED_nl_0(p2);
        p4 = new PRED_$write_dynamic_body_2(a4, a5, p3);
        p5 = new PRED_nl_0(p4);
        p6 = new PRED_write_1(s9, p5);
        p7 = new PRED_tab_1(a2, p6);
        p8 = new PRED_nl_0(p7);
        p9 = new PRED_$write_dynamic_body_2(a3, a5, p8);
        p10 = new PRED_nl_0(p9);
        p11 = new PRED_write_1(s5, p10);
        return new PRED_tab_1(a2, p11);
    }
}

class PRED_$write_dynamic_body_2_4 extends PRED_$write_dynamic_body_2 {
    public Predicate exec(Prolog engine) {
    // '$write_dynamic_body'(A,B):-tab(B),writeq(A)
        Term a1, a2;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$write_dynamic_body'(A,B):-[tab(B),writeq(A)]
        p1 = new PRED_writeq_1(a1, cont);
        return new PRED_tab_1(a2, p1);
    }
}
