package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$op2'/3</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$op2_3 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("[]");
    static SymbolTerm s2 = SymbolTerm.makeSymbol("type", 1);
    static SymbolTerm s3 = SymbolTerm.makeSymbol("list", 1);
    static SymbolTerm s4 = SymbolTerm.makeSymbol("atom");
    static Term[] s5 = {s4};
    static StructureTerm s6 = new StructureTerm(s3, s5);
    static Term[] s7 = {s6};
    static StructureTerm s8 = new StructureTerm(s2, s7);
    static SymbolTerm s9 = SymbolTerm.makeSymbol("op", 3);
    static IntegerTerm si10 = new IntegerTerm(3);
    static Predicate _$op2_3_sub_1 = new PRED_$op2_3_sub_1();
    static Predicate _$op2_3_sub_2 = new PRED_$op2_3_sub_2();
    static Predicate _$op2_3_1 = new PRED_$op2_3_1();
    static Predicate _$op2_3_2 = new PRED_$op2_3_2();
    static Predicate _$op2_3_3 = new PRED_$op2_3_3();

    public Term arg1, arg2, arg3;

    public PRED_$op2_3(Term a1, Term a2, Term a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_$op2_3(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String toString() {
        return "$op2(" + arg1 + "," + arg2 + "," + arg3 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$op2_3_1, _$op2_3_sub_1);
    }
}

class PRED_$op2_3_sub_1 extends PRED_$op2_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$op2_3_2, _$op2_3_sub_2);
    }
}

class PRED_$op2_3_sub_2 extends PRED_$op2_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$op2_3_3);
    }
}

class PRED_$op2_3_1 extends PRED_$op2_3 {
    public Predicate exec(Prolog engine) {
    // '$op2'(A,B,C):-atom(C),!,'$add_operators'([C],A,B)
        Term a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$op2'(A,B,C):-['$get_level'(D),atom(C),'$cut'(D),'$add_operators'([C],A,B)]
        a4 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(4))
        if (! a4.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of atom(a(3))
        a3 = a3.dereference();
        if (! a3.isSymbol()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(4))
        a4 = a4.dereference();
        if (! a4.isInteger()) {
            throw new IllegalTypeException("integer", a4);
        } else {
            engine.cut(((IntegerTerm) a4).intValue());
        }
        //END inline expansion
        a5 = new ListTerm(a3, s1);
        return new PRED_$add_operators_3(a5, a1, a2, cont);
    }
}

class PRED_$op2_3_2 extends PRED_$op2_3 {
    public Predicate exec(Prolog engine) {
    // '$op2'(A,B,C):-'$op_atom_list'(C,D),!,'$add_operators'(D,A,B)
        Term a1, a2, a3, a4, a5;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$op2'(A,B,C):-['$get_level'(D),'$op_atom_list'(C,E),'$cut'(D),'$add_operators'(E,A,B)]
        a4 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(4))
        if (! a4.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a5 = new VariableTerm(engine);
        p1 = new PRED_$add_operators_3(a5, a1, a2, cont);
        p2 = new PRED_$cut_1(a4, p1);
        return new PRED_$op_atom_list_2(a3, a5, p2);
    }
}

class PRED_$op2_3_3 extends PRED_$op2_3 {
    public Predicate exec(Prolog engine) {
    // '$op2'(A,B,C):-illarg(type(list(atom)),op(A,B,C),3)
        Term a1, a2, a3, a4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$op2'(A,B,C):-[illarg(type(list(atom)),op(A,B,C),3)]
        Term[] y1 = {a1, a2, a3};
        a4 = new StructureTerm(s9, y1);
        return new PRED_illarg_3(s8, a4, si10, cont);
    }
}
