package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.IllegalTypeException;
import jp.ac.kobe_u.cs.prolog.lang.IntegerTerm;
import jp.ac.kobe_u.cs.prolog.lang.ListTerm;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.StructureTerm;
import jp.ac.kobe_u.cs.prolog.lang.SymbolTerm;
import jp.ac.kobe_u.cs.prolog.lang.Term;
import jp.ac.kobe_u.cs.prolog.lang.VariableTerm;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$calc_indexing_key0'/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$calc_indexing_key0_2 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("all");
    static SymbolTerm s2 = SymbolTerm.makeSymbol("lis");
    static SymbolTerm s3 = SymbolTerm.makeSymbol("str");
    static SymbolTerm s4 = SymbolTerm.makeSymbol("type", 1);
    static SymbolTerm s5 = SymbolTerm.makeSymbol("term");
    static Term[] s6 = {s5};
    static StructureTerm s7 = new StructureTerm(s4, s6);
    static SymbolTerm s8 = SymbolTerm.makeSymbol("$calc_indexing_key0", 2);
    static IntegerTerm si9 = new IntegerTerm(1);
    static Predicate _$calc_indexing_key0_2_sub_1 = new PRED_$calc_indexing_key0_2_sub_1();
    static Predicate _$calc_indexing_key0_2_sub_2 = new PRED_$calc_indexing_key0_2_sub_2();
    static Predicate _$calc_indexing_key0_2_sub_3 = new PRED_$calc_indexing_key0_2_sub_3();
    static Predicate _$calc_indexing_key0_2_sub_4 = new PRED_$calc_indexing_key0_2_sub_4();
    static Predicate _$calc_indexing_key0_2_1 = new PRED_$calc_indexing_key0_2_1();
    static Predicate _$calc_indexing_key0_2_2 = new PRED_$calc_indexing_key0_2_2();
    static Predicate _$calc_indexing_key0_2_3 = new PRED_$calc_indexing_key0_2_3();
    static Predicate _$calc_indexing_key0_2_4 = new PRED_$calc_indexing_key0_2_4();
    static Predicate _$calc_indexing_key0_2_5 = new PRED_$calc_indexing_key0_2_5();

    public Term arg1, arg2;

    public PRED_$calc_indexing_key0_2(Term a1, Term a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_$calc_indexing_key0_2(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String toString() {
        return "$calc_indexing_key0(" + arg1 + "," + arg2 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$calc_indexing_key0_2_1, _$calc_indexing_key0_2_sub_1);
    }
}

class PRED_$calc_indexing_key0_2_sub_1 extends PRED_$calc_indexing_key0_2 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$calc_indexing_key0_2_2, _$calc_indexing_key0_2_sub_2);
    }
}

class PRED_$calc_indexing_key0_2_sub_2 extends PRED_$calc_indexing_key0_2 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$calc_indexing_key0_2_3, _$calc_indexing_key0_2_sub_3);
    }
}

class PRED_$calc_indexing_key0_2_sub_3 extends PRED_$calc_indexing_key0_2 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$calc_indexing_key0_2_4, _$calc_indexing_key0_2_sub_4);
    }
}

class PRED_$calc_indexing_key0_2_sub_4 extends PRED_$calc_indexing_key0_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$calc_indexing_key0_2_5);
    }
}

class PRED_$calc_indexing_key0_2_1 extends PRED_$calc_indexing_key0_2 {
    public Predicate exec(Prolog engine) {
    // '$calc_indexing_key0'(A,all):-var(A),!
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$calc_indexing_key0'(A,all):-['$get_level'(B),var(A),'$cut'(B)]
        a2 = a2.dereference();
        if (a2.isSymbol()){
            if (! a2.equals(s1))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a3 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(3))
        if (! a3.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of var(a(1))
        a1 = a1.dereference();
        if (! a1.isVariable()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(3))
        a3 = a3.dereference();
        if (! a3.isInteger()) {
            throw new IllegalTypeException("integer", a3);
        } else {
            engine.cut(((IntegerTerm) a3).intValue());
        }
        //END inline expansion
        return cont;
    }
}

class PRED_$calc_indexing_key0_2_2 extends PRED_$calc_indexing_key0_2 {
    public Predicate exec(Prolog engine) {
    // '$calc_indexing_key0'(A,lis):-A=[B|C],!
        Term a1, a2, a3, a4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$calc_indexing_key0'(A,lis):-['$get_level'(B),'$unify'(A,[C|D]),'$cut'(B)]
        a2 = a2.dereference();
        if (a2.isSymbol()){
            if (! a2.equals(s2))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(s2, engine.trail);
        } else {
            return engine.fail();
        }
        a3 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(3))
        if (! a3.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a4 = new ListTerm(new VariableTerm(engine), new VariableTerm(engine));
        //START inline expansion of $unify(a(1),a(4))
        if (! a1.unify(a4, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(3))
        a3 = a3.dereference();
        if (! a3.isInteger()) {
            throw new IllegalTypeException("integer", a3);
        } else {
            engine.cut(((IntegerTerm) a3).intValue());
        }
        //END inline expansion
        return cont;
    }
}

class PRED_$calc_indexing_key0_2_3 extends PRED_$calc_indexing_key0_2 {
    public Predicate exec(Prolog engine) {
    // '$calc_indexing_key0'(A,str):-compound(A),!
        Term a1, a2, a3;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$calc_indexing_key0'(A,str):-['$get_level'(B),compound(A),'$cut'(B)]
        a2 = a2.dereference();
        if (a2.isSymbol()){
            if (! a2.equals(s3))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(s3, engine.trail);
        } else {
            return engine.fail();
        }
        a3 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(3))
        if (! a3.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        p1 = new PRED_$cut_1(a3, cont);
        return new PRED_compound_1(a1, p1);
    }
}

class PRED_$calc_indexing_key0_2_4 extends PRED_$calc_indexing_key0_2 {
    public Predicate exec(Prolog engine) {
    // '$calc_indexing_key0'(A,B):-ground(A),!,'$term_hash'(A,B)
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$calc_indexing_key0'(A,B):-['$get_level'(C),ground(A),'$cut'(C),'$term_hash'(A,B)]
        a3 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(3))
        if (! a3.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of ground(a(1))
        a1 = a1.dereference();
        if (! a1.isGround()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(3))
        a3 = a3.dereference();
        if (! a3.isInteger()) {
            throw new IllegalTypeException("integer", a3);
        } else {
            engine.cut(((IntegerTerm) a3).intValue());
        }
        //END inline expansion
        return new PRED_$term_hash_2(a1, a2, cont);
    }
}

class PRED_$calc_indexing_key0_2_5 extends PRED_$calc_indexing_key0_2 {
    public Predicate exec(Prolog engine) {
    // '$calc_indexing_key0'(A,B):-illarg(type(term),'$calc_indexing_key0'(A,B),1)
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$calc_indexing_key0'(A,B):-[illarg(type(term),'$calc_indexing_key0'(A,B),1)]
        Term[] y1 = {a1, a2};
        a3 = new StructureTerm(s8, y1);
        return new PRED_illarg_3(s7, a3, si9, cont);
    }
}
