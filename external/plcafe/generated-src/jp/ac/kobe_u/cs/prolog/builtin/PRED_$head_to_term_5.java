package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$head_to_term'/5</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$head_to_term_5 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("var");
    static IntegerTerm si2 = new IntegerTerm(1);
    static SymbolTerm s3 = SymbolTerm.makeSymbol(":", 2);
    static SymbolTerm s4 = SymbolTerm.makeSymbol("type", 1);
    static SymbolTerm s5 = SymbolTerm.makeSymbol("callable");
    static Term[] s6 = {s5};
    static StructureTerm s7 = new StructureTerm(s4, s6);
    static Predicate _$head_to_term_5_top = new PRED_$head_to_term_5_top();
    static Predicate _$head_to_term_5_var = new PRED_$head_to_term_5_var();
    static Predicate _$head_to_term_5_var_1 = new PRED_$head_to_term_5_var_1();
    static Predicate _$head_to_term_5_var_2 = new PRED_$head_to_term_5_var_2();
    static Predicate _$head_to_term_5_var_3 = new PRED_$head_to_term_5_var_3();
    static Predicate _$head_to_term_5_int = new PRED_$head_to_term_5_int();
    static Predicate _$head_to_term_5_int_1 = new PRED_$head_to_term_5_int_1();
    static Predicate _$head_to_term_5_int_2 = new PRED_$head_to_term_5_int_2();
    static Predicate _$head_to_term_5_1 = new PRED_$head_to_term_5_1();
    static Predicate _$head_to_term_5_2 = new PRED_$head_to_term_5_2();
    static Predicate _$head_to_term_5_3 = new PRED_$head_to_term_5_3();
    static Predicate _$head_to_term_5_4 = new PRED_$head_to_term_5_4();

    public Term arg1, arg2, arg3, arg4, arg5;

    public PRED_$head_to_term_5(Term a1, Term a2, Term a3, Term a4, Term a5, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        arg5 = a5;
        this.cont = cont;
    }

    public PRED_$head_to_term_5(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        arg5 = args[4];
        this.cont = cont;
    }

    public int arity() { return 5; }

    public String toString() {
        return "$head_to_term(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + "," + arg5 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.aregs[4] = arg4;
        engine.aregs[5] = arg5;
        engine.cont = cont;
        return _$head_to_term_5_top;
    }
}

class PRED_$head_to_term_5_top extends PRED_$head_to_term_5 {
    public Predicate exec(Prolog engine) {
        engine.setB0();
        return engine.switch_on_term(_$head_to_term_5_var, _$head_to_term_5_int, _$head_to_term_5_int, _$head_to_term_5_int, _$head_to_term_5_var, _$head_to_term_5_int);
    }
}

class PRED_$head_to_term_5_var extends PRED_$head_to_term_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$head_to_term_5_1, _$head_to_term_5_var_1);
    }
}

class PRED_$head_to_term_5_var_1 extends PRED_$head_to_term_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$head_to_term_5_2, _$head_to_term_5_var_2);
    }
}

class PRED_$head_to_term_5_var_2 extends PRED_$head_to_term_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$head_to_term_5_3, _$head_to_term_5_var_3);
    }
}

class PRED_$head_to_term_5_var_3 extends PRED_$head_to_term_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$head_to_term_5_4);
    }
}

class PRED_$head_to_term_5_int extends PRED_$head_to_term_5 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$head_to_term_5_1, _$head_to_term_5_int_1);
    }
}

class PRED_$head_to_term_5_int_1 extends PRED_$head_to_term_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$head_to_term_5_3, _$head_to_term_5_int_2);
    }
}

class PRED_$head_to_term_5_int_2 extends PRED_$head_to_term_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$head_to_term_5_4);
    }
}

class PRED_$head_to_term_5_1 extends PRED_$head_to_term_5 {
    public Predicate exec(Prolog engine) {
    // '$head_to_term'(A,B,C,D,E):-var(A),!,illarg(var,E,1)
        Term a1, a2, a3, a4, a5, a6;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$head_to_term'(A,B,C,D,E):-['$get_level'(F),var(A),'$cut'(F),illarg(var,E,1)]
        a6 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(6))
        if (! a6.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of var(a(1))
        a1 = a1.dereference();
        if (! a1.isVariable()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(6))
        a6 = a6.dereference();
        if (! a6.isInteger()) {
            throw new IllegalTypeException("integer", a6);
        } else {
            engine.cut(((IntegerTerm) a6).intValue());
        }
        //END inline expansion
        return new PRED_illarg_3(s1, a5, si2, cont);
    }
}

class PRED_$head_to_term_5_2 extends PRED_$head_to_term_5 {
    public Predicate exec(Prolog engine) {
    // '$head_to_term'(A:B,C,D,E,F):-!,'$head_to_term'(B,C,A,E,F)
        Term a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$head_to_term'(A:B,C,D,E,F):-['$neck_cut','$head_to_term'(B,C,A,E,F)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s3.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a6 = args[0];
            a7 = args[1];
        } else if (a1.isVariable()){
            a6 = new VariableTerm(engine);
            a7 = new VariableTerm(engine);
            Term[] args = {a6, a7};
            ((VariableTerm) a1).bind(new StructureTerm(s3, args), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        engine.aregs[1] = a7;
        engine.aregs[2] = a2;
        engine.aregs[3] = a6;
        engine.aregs[4] = a4;
        engine.aregs[5] = a5;
        engine.cont = cont;
        return _$head_to_term_5_top;
    }
}

class PRED_$head_to_term_5_3 extends PRED_$head_to_term_5 {
    public Predicate exec(Prolog engine) {
    // '$head_to_term'(A,A,B,B,C):-callable(A),atom(B),!
        Term a1, a2, a3, a4, a5, a6;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$head_to_term'(A,A,B,B,C):-['$get_level'(D),callable(A),atom(B),'$cut'(D)]
        if (! a1.unify(a2, engine.trail))
            return engine.fail();
        if (! a3.unify(a4, engine.trail))
            return engine.fail();
        a6 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(6))
        if (! a6.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        p1 = new PRED_$cut_1(a6, cont);
        p2 = new PRED_atom_1(a3, p1);
        return new PRED_callable_1(a1, p2);
    }
}

class PRED_$head_to_term_5_4 extends PRED_$head_to_term_5 {
    public Predicate exec(Prolog engine) {
    // '$head_to_term'(A,B,C,D,E):-illarg(type(callable),E,1)
        Term a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$head_to_term'(A,B,C,D,E):-[illarg(type(callable),E,1)]
        return new PRED_illarg_3(s7, a5, si2, cont);
    }
}
