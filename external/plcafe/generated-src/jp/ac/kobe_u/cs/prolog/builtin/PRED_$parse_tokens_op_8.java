package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$parse_tokens_op'/8</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$parse_tokens_op_8 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol(",");
    static SymbolTerm s2 = SymbolTerm.makeSymbol("atom", 1);
    static Term[] s3 = {s1};
    static StructureTerm s4 = new StructureTerm(s2, s3);
    static SymbolTerm s5 = SymbolTerm.makeSymbol("|");
    static SymbolTerm s6 = SymbolTerm.makeSymbol(";");
    static Term[] s7 = {s6};
    static StructureTerm s8 = new StructureTerm(s2, s7);
    static SymbolTerm s9 = SymbolTerm.makeSymbol("xf");
    static IntegerTerm si10 = new IntegerTerm(1);
    static SymbolTerm s11 = SymbolTerm.makeSymbol("yf");
    static SymbolTerm s12 = SymbolTerm.makeSymbol("xfx");
    static IntegerTerm si13 = new IntegerTerm(2);
    static SymbolTerm s14 = SymbolTerm.makeSymbol("xfy");
    static SymbolTerm s15 = SymbolTerm.makeSymbol("yfx");
    static Predicate _$parse_tokens_op_8_top = new PRED_$parse_tokens_op_8_top();
    static Predicate _fail_0 = new PRED_fail_0();
    static Predicate _$parse_tokens_op_8_var = new PRED_$parse_tokens_op_8_var();
    static Predicate _$parse_tokens_op_8_var_1 = new PRED_$parse_tokens_op_8_var_1();
    static Predicate _$parse_tokens_op_8_var_2 = new PRED_$parse_tokens_op_8_var_2();
    static Predicate _$parse_tokens_op_8_var_3 = new PRED_$parse_tokens_op_8_var_3();
    static Predicate _$parse_tokens_op_8_var_4 = new PRED_$parse_tokens_op_8_var_4();
    static Predicate _$parse_tokens_op_8_var_5 = new PRED_$parse_tokens_op_8_var_5();
    static Predicate _$parse_tokens_op_8_var_6 = new PRED_$parse_tokens_op_8_var_6();
    static Predicate _$parse_tokens_op_8_con = new PRED_$parse_tokens_op_8_con();
    static Predicate _$parse_tokens_op_8_str = new PRED_$parse_tokens_op_8_str();
    static Predicate _$parse_tokens_op_8_str_1 = new PRED_$parse_tokens_op_8_str_1();
    static Predicate _$parse_tokens_op_8_str_2 = new PRED_$parse_tokens_op_8_str_2();
    static Predicate _$parse_tokens_op_8_str_3 = new PRED_$parse_tokens_op_8_str_3();
    static Predicate _$parse_tokens_op_8_str_4 = new PRED_$parse_tokens_op_8_str_4();
    static Predicate _$parse_tokens_op_8_1 = new PRED_$parse_tokens_op_8_1();
    static Predicate _$parse_tokens_op_8_2 = new PRED_$parse_tokens_op_8_2();
    static Predicate _$parse_tokens_op_8_3 = new PRED_$parse_tokens_op_8_3();
    static Predicate _$parse_tokens_op_8_4 = new PRED_$parse_tokens_op_8_4();
    static Predicate _$parse_tokens_op_8_5 = new PRED_$parse_tokens_op_8_5();
    static Predicate _$parse_tokens_op_8_6 = new PRED_$parse_tokens_op_8_6();
    static Predicate _$parse_tokens_op_8_7 = new PRED_$parse_tokens_op_8_7();
    static java.util.Hashtable<Term, Predicate> con = new java.util.Hashtable<Term, Predicate>(2);
    static {
        con.put(s1, _$parse_tokens_op_8_1);
        con.put(s5, _$parse_tokens_op_8_2);
    }

    public Term arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8;

    public PRED_$parse_tokens_op_8(Term a1, Term a2, Term a3, Term a4, Term a5, Term a6, Term a7, Term a8, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        arg5 = a5;
        arg6 = a6;
        arg7 = a7;
        arg8 = a8;
        this.cont = cont;
    }

    public PRED_$parse_tokens_op_8(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        arg5 = args[4];
        arg6 = args[5];
        arg7 = args[6];
        arg8 = args[7];
        this.cont = cont;
    }

    public int arity() { return 8; }

    public String toString() {
        return "$parse_tokens_op(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + "," + arg5 + "," + arg6 + "," + arg7 + "," + arg8 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.aregs[4] = arg4;
        engine.aregs[5] = arg5;
        engine.aregs[6] = arg6;
        engine.aregs[7] = arg7;
        engine.aregs[8] = arg8;
        engine.cont = cont;
        return _$parse_tokens_op_8_top;
    }
}

class PRED_$parse_tokens_op_8_top extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) {
        engine.setB0();
        return engine.switch_on_term(_$parse_tokens_op_8_var, _fail_0, _fail_0, _$parse_tokens_op_8_con, _$parse_tokens_op_8_str, _fail_0);
    }
}

class PRED_$parse_tokens_op_8_var extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$parse_tokens_op_8_1, _$parse_tokens_op_8_var_1);
    }
}

class PRED_$parse_tokens_op_8_var_1 extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$parse_tokens_op_8_2, _$parse_tokens_op_8_var_2);
    }
}

class PRED_$parse_tokens_op_8_var_2 extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$parse_tokens_op_8_3, _$parse_tokens_op_8_var_3);
    }
}

class PRED_$parse_tokens_op_8_var_3 extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$parse_tokens_op_8_4, _$parse_tokens_op_8_var_4);
    }
}

class PRED_$parse_tokens_op_8_var_4 extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$parse_tokens_op_8_5, _$parse_tokens_op_8_var_5);
    }
}

class PRED_$parse_tokens_op_8_var_5 extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$parse_tokens_op_8_6, _$parse_tokens_op_8_var_6);
    }
}

class PRED_$parse_tokens_op_8_var_6 extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$parse_tokens_op_8_7);
    }
}

class PRED_$parse_tokens_op_8_con extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) {
        return engine.switch_on_hash(con, _fail_0);
    }
}

class PRED_$parse_tokens_op_8_str extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$parse_tokens_op_8_3, _$parse_tokens_op_8_str_1);
    }
}

class PRED_$parse_tokens_op_8_str_1 extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$parse_tokens_op_8_4, _$parse_tokens_op_8_str_2);
    }
}

class PRED_$parse_tokens_op_8_str_2 extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$parse_tokens_op_8_5, _$parse_tokens_op_8_str_3);
    }
}

class PRED_$parse_tokens_op_8_str_3 extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$parse_tokens_op_8_6, _$parse_tokens_op_8_str_4);
    }
}

class PRED_$parse_tokens_op_8_str_4 extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$parse_tokens_op_8_7);
    }
}

class PRED_$parse_tokens_op_8_1 extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) {
    // '$parse_tokens_op'(',',A,B,C,D,E,F,G):-!,'$parse_tokens_op'(atom(','),A,B,C,D,E,F,G)
        Term a1, a2, a3, a4, a5, a6, a7, a8;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        a7 = engine.aregs[7];
        a8 = engine.aregs[8];
        cont = engine.cont;
    // '$parse_tokens_op'(',',A,B,C,D,E,F,G):-['$neck_cut','$parse_tokens_op'(atom(','),A,B,C,D,E,F,G)]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s1))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        engine.aregs[1] = s4;
        engine.aregs[2] = a2;
        engine.aregs[3] = a3;
        engine.aregs[4] = a4;
        engine.aregs[5] = a5;
        engine.aregs[6] = a6;
        engine.aregs[7] = a7;
        engine.aregs[8] = a8;
        engine.cont = cont;
        return _$parse_tokens_op_8_top;
    }
}

class PRED_$parse_tokens_op_8_2 extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) {
    // '$parse_tokens_op'('|',A,B,C,D,E,F,G):-!,'$parse_tokens_op'(atom(;),A,B,C,D,E,F,G)
        Term a1, a2, a3, a4, a5, a6, a7, a8;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        a7 = engine.aregs[7];
        a8 = engine.aregs[8];
        cont = engine.cont;
    // '$parse_tokens_op'('|',A,B,C,D,E,F,G):-['$neck_cut','$parse_tokens_op'(atom(;),A,B,C,D,E,F,G)]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s5))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s5, engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        engine.aregs[1] = s8;
        engine.aregs[2] = a2;
        engine.aregs[3] = a3;
        engine.aregs[4] = a4;
        engine.aregs[5] = a5;
        engine.aregs[6] = a6;
        engine.aregs[7] = a7;
        engine.aregs[8] = a8;
        engine.cont = cont;
        return _$parse_tokens_op_8_top;
    }
}

class PRED_$parse_tokens_op_8_3 extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) {
    // '$parse_tokens_op'(atom(A),B,C,D,E,F,G,H):-(current_op(F,xf,A),F=<B,D<F,functor(E,A,1),arg(1,E,C)),H=G
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9;
        Predicate p1, p2, p3, p4, p5;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        a7 = engine.aregs[7];
        a8 = engine.aregs[8];
        cont = engine.cont;
    // '$parse_tokens_op'(atom(A),B,C,D,E,F,G,H):-[current_op(F,xf,A),'$less_or_equal'(F,B),'$less_than'(D,F),functor(E,A,1),arg(1,E,C),'$unify'(H,G)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s2.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a9 = args[0];
        } else if (a1.isVariable()){
            a9 = new VariableTerm(engine);
            Term[] args = {a9};
            ((VariableTerm) a1).bind(new StructureTerm(s2, args), engine.trail);
        } else {
            return engine.fail();
        }
        p1 = new PRED_$unify_2(a8, a7, cont);
        p2 = new PRED_arg_3(si10, a5, a3, p1);
        p3 = new PRED_functor_3(a5, a9, si10, p2);
        p4 = new PRED_$less_than_2(a4, a6, p3);
        p5 = new PRED_$less_or_equal_2(a6, a2, p4);
        return new PRED_current_op_3(a6, s9, a9, p5);
    }
}

class PRED_$parse_tokens_op_8_4 extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) {
    // '$parse_tokens_op'(atom(A),B,C,D,E,F,G,H):-(current_op(F,yf,A),F=<B,D=<F,functor(E,A,1),arg(1,E,C)),H=G
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9;
        Predicate p1, p2, p3, p4, p5;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        a7 = engine.aregs[7];
        a8 = engine.aregs[8];
        cont = engine.cont;
    // '$parse_tokens_op'(atom(A),B,C,D,E,F,G,H):-[current_op(F,yf,A),'$less_or_equal'(F,B),'$less_or_equal'(D,F),functor(E,A,1),arg(1,E,C),'$unify'(H,G)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s2.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a9 = args[0];
        } else if (a1.isVariable()){
            a9 = new VariableTerm(engine);
            Term[] args = {a9};
            ((VariableTerm) a1).bind(new StructureTerm(s2, args), engine.trail);
        } else {
            return engine.fail();
        }
        p1 = new PRED_$unify_2(a8, a7, cont);
        p2 = new PRED_arg_3(si10, a5, a3, p1);
        p3 = new PRED_functor_3(a5, a9, si10, p2);
        p4 = new PRED_$less_or_equal_2(a4, a6, p3);
        p5 = new PRED_$less_or_equal_2(a6, a2, p4);
        return new PRED_current_op_3(a6, s11, a9, p5);
    }
}

class PRED_$parse_tokens_op_8_5 extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) {
    // '$parse_tokens_op'(atom(A),B,C,D,E,F,G,H):-current_op(F,xfx,A),F=<B,D<F,I is F-1,'$parse_tokens'(J,I,G,H),!,functor(E,A,2),arg(1,E,C),arg(2,E,J)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12;
        Predicate p1, p2, p3, p4, p5, p6, p7, p8;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        a7 = engine.aregs[7];
        a8 = engine.aregs[8];
        cont = engine.cont;
    // '$parse_tokens_op'(atom(A),B,C,D,E,F,G,H):-['$get_level'(I),current_op(F,xfx,A),'$less_or_equal'(F,B),'$less_than'(D,F),'$minus'(F,1,J),'$parse_tokens'(K,J,G,H),'$cut'(I),functor(E,A,2),arg(1,E,C),arg(2,E,K)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s2.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a9 = args[0];
        } else if (a1.isVariable()){
            a9 = new VariableTerm(engine);
            Term[] args = {a9};
            ((VariableTerm) a1).bind(new StructureTerm(s2, args), engine.trail);
        } else {
            return engine.fail();
        }
        a10 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(10))
        if (! a10.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a11 = new VariableTerm(engine);
        a12 = new VariableTerm(engine);
        p1 = new PRED_arg_3(si13, a5, a12, cont);
        p2 = new PRED_arg_3(si10, a5, a3, p1);
        p3 = new PRED_functor_3(a5, a9, si13, p2);
        p4 = new PRED_$cut_1(a10, p3);
        p5 = new PRED_$parse_tokens_4(a12, a11, a7, a8, p4);
        p6 = new PRED_$minus_3(a6, si10, a11, p5);
        p7 = new PRED_$less_than_2(a4, a6, p6);
        p8 = new PRED_$less_or_equal_2(a6, a2, p7);
        return new PRED_current_op_3(a6, s12, a9, p8);
    }
}

class PRED_$parse_tokens_op_8_6 extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) {
    // '$parse_tokens_op'(atom(A),B,C,D,E,F,G,H):-current_op(F,xfy,A),F=<B,D<F,I is F,'$parse_tokens'(J,I,G,H),!,functor(E,A,2),arg(1,E,C),arg(2,E,J)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12;
        Predicate p1, p2, p3, p4, p5, p6, p7, p8;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        a7 = engine.aregs[7];
        a8 = engine.aregs[8];
        cont = engine.cont;
    // '$parse_tokens_op'(atom(A),B,C,D,E,F,G,H):-['$get_level'(I),current_op(F,xfy,A),'$less_or_equal'(F,B),'$less_than'(D,F),J is F,'$parse_tokens'(K,J,G,H),'$cut'(I),functor(E,A,2),arg(1,E,C),arg(2,E,K)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s2.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a9 = args[0];
        } else if (a1.isVariable()){
            a9 = new VariableTerm(engine);
            Term[] args = {a9};
            ((VariableTerm) a1).bind(new StructureTerm(s2, args), engine.trail);
        } else {
            return engine.fail();
        }
        a10 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(10))
        if (! a10.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a11 = new VariableTerm(engine);
        a12 = new VariableTerm(engine);
        p1 = new PRED_arg_3(si13, a5, a12, cont);
        p2 = new PRED_arg_3(si10, a5, a3, p1);
        p3 = new PRED_functor_3(a5, a9, si13, p2);
        p4 = new PRED_$cut_1(a10, p3);
        p5 = new PRED_$parse_tokens_4(a12, a11, a7, a8, p4);
        p6 = new PRED_is_2(a11, a6, p5);
        p7 = new PRED_$less_than_2(a4, a6, p6);
        p8 = new PRED_$less_or_equal_2(a6, a2, p7);
        return new PRED_current_op_3(a6, s14, a9, p8);
    }
}

class PRED_$parse_tokens_op_8_7 extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) {
    // '$parse_tokens_op'(atom(A),B,C,D,E,F,G,H):-current_op(F,yfx,A),F=<B,D=<F,I is F-1,'$parse_tokens'(J,I,G,H),!,functor(E,A,2),arg(1,E,C),arg(2,E,J)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12;
        Predicate p1, p2, p3, p4, p5, p6, p7, p8;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        a7 = engine.aregs[7];
        a8 = engine.aregs[8];
        cont = engine.cont;
    // '$parse_tokens_op'(atom(A),B,C,D,E,F,G,H):-['$get_level'(I),current_op(F,yfx,A),'$less_or_equal'(F,B),'$less_or_equal'(D,F),'$minus'(F,1,J),'$parse_tokens'(K,J,G,H),'$cut'(I),functor(E,A,2),arg(1,E,C),arg(2,E,K)]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s2.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a9 = args[0];
        } else if (a1.isVariable()){
            a9 = new VariableTerm(engine);
            Term[] args = {a9};
            ((VariableTerm) a1).bind(new StructureTerm(s2, args), engine.trail);
        } else {
            return engine.fail();
        }
        a10 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(10))
        if (! a10.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a11 = new VariableTerm(engine);
        a12 = new VariableTerm(engine);
        p1 = new PRED_arg_3(si13, a5, a12, cont);
        p2 = new PRED_arg_3(si10, a5, a3, p1);
        p3 = new PRED_functor_3(a5, a9, si13, p2);
        p4 = new PRED_$cut_1(a10, p3);
        p5 = new PRED_$parse_tokens_4(a12, a11, a7, a8, p4);
        p6 = new PRED_$minus_3(a6, si10, a11, p5);
        p7 = new PRED_$less_or_equal_2(a4, a6, p6);
        p8 = new PRED_$less_or_equal_2(a6, a2, p7);
        return new PRED_current_op_3(a6, s15, a9, p8);
    }
}
