package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.IllegalTypeException;
import jp.ac.kobe_u.cs.prolog.lang.IntegerTerm;
import jp.ac.kobe_u.cs.prolog.lang.ListTerm;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.SymbolTerm;
import jp.ac.kobe_u.cs.prolog.lang.Term;
import jp.ac.kobe_u.cs.prolog.lang.VariableTerm;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$builtin_set_diff0'/3</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
class PRED_$builtin_set_diff0_3 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("[]");
    static Predicate _$builtin_set_diff0_3_top = new PRED_$builtin_set_diff0_3_top();
    static Predicate _$builtin_set_diff0_3_var = new PRED_$builtin_set_diff0_3_var();
    static Predicate _$builtin_set_diff0_3_var_1 = new PRED_$builtin_set_diff0_3_var_1();
    static Predicate _$builtin_set_diff0_3_var_2 = new PRED_$builtin_set_diff0_3_var_2();
    static Predicate _$builtin_set_diff0_3_var_3 = new PRED_$builtin_set_diff0_3_var_3();
    static Predicate _$builtin_set_diff0_3_var_4 = new PRED_$builtin_set_diff0_3_var_4();
    static Predicate _$builtin_set_diff0_3_con = new PRED_$builtin_set_diff0_3_con();
    static Predicate _$builtin_set_diff0_3_con_1 = new PRED_$builtin_set_diff0_3_con_1();
    static Predicate _$builtin_set_diff0_3_lis = new PRED_$builtin_set_diff0_3_lis();
    static Predicate _$builtin_set_diff0_3_lis_1 = new PRED_$builtin_set_diff0_3_lis_1();
    static Predicate _$builtin_set_diff0_3_lis_2 = new PRED_$builtin_set_diff0_3_lis_2();
    static Predicate _$builtin_set_diff0_3_lis_3 = new PRED_$builtin_set_diff0_3_lis_3();
    static Predicate _$builtin_set_diff0_3_1 = new PRED_$builtin_set_diff0_3_1();
    static Predicate _$builtin_set_diff0_3_2 = new PRED_$builtin_set_diff0_3_2();
    static Predicate _$builtin_set_diff0_3_3 = new PRED_$builtin_set_diff0_3_3();
    static Predicate _$builtin_set_diff0_3_4 = new PRED_$builtin_set_diff0_3_4();
    static Predicate _$builtin_set_diff0_3_5 = new PRED_$builtin_set_diff0_3_5();

    public Term arg1, arg2, arg3;

    public PRED_$builtin_set_diff0_3(Term a1, Term a2, Term a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_$builtin_set_diff0_3(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String toString() {
        return "$builtin_set_diff0(" + arg1 + "," + arg2 + "," + arg3 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.cont = cont;
        return _$builtin_set_diff0_3_top;
    }
}

class PRED_$builtin_set_diff0_3_top extends PRED_$builtin_set_diff0_3 {
    public Predicate exec(Prolog engine) {
        engine.setB0();
        return engine.switch_on_term(_$builtin_set_diff0_3_var, _$builtin_set_diff0_3_2, _$builtin_set_diff0_3_2, _$builtin_set_diff0_3_con, _$builtin_set_diff0_3_2, _$builtin_set_diff0_3_lis);
    }
}

class PRED_$builtin_set_diff0_3_var extends PRED_$builtin_set_diff0_3 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$builtin_set_diff0_3_1, _$builtin_set_diff0_3_var_1);
    }
}

class PRED_$builtin_set_diff0_3_var_1 extends PRED_$builtin_set_diff0_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$builtin_set_diff0_3_2, _$builtin_set_diff0_3_var_2);
    }
}

class PRED_$builtin_set_diff0_3_var_2 extends PRED_$builtin_set_diff0_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$builtin_set_diff0_3_3, _$builtin_set_diff0_3_var_3);
    }
}

class PRED_$builtin_set_diff0_3_var_3 extends PRED_$builtin_set_diff0_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$builtin_set_diff0_3_4, _$builtin_set_diff0_3_var_4);
    }
}

class PRED_$builtin_set_diff0_3_var_4 extends PRED_$builtin_set_diff0_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$builtin_set_diff0_3_5);
    }
}

class PRED_$builtin_set_diff0_3_con extends PRED_$builtin_set_diff0_3 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$builtin_set_diff0_3_1, _$builtin_set_diff0_3_con_1);
    }
}

class PRED_$builtin_set_diff0_3_con_1 extends PRED_$builtin_set_diff0_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$builtin_set_diff0_3_2);
    }
}

class PRED_$builtin_set_diff0_3_lis extends PRED_$builtin_set_diff0_3 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_$builtin_set_diff0_3_2, _$builtin_set_diff0_3_lis_1);
    }
}

class PRED_$builtin_set_diff0_3_lis_1 extends PRED_$builtin_set_diff0_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$builtin_set_diff0_3_3, _$builtin_set_diff0_3_lis_2);
    }
}

class PRED_$builtin_set_diff0_3_lis_2 extends PRED_$builtin_set_diff0_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_$builtin_set_diff0_3_4, _$builtin_set_diff0_3_lis_3);
    }
}

class PRED_$builtin_set_diff0_3_lis_3 extends PRED_$builtin_set_diff0_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$builtin_set_diff0_3_5);
    }
}

class PRED_$builtin_set_diff0_3_1 extends PRED_$builtin_set_diff0_3 {
    public Predicate exec(Prolog engine) {
    // '$builtin_set_diff0'([],A,[]):-!
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$builtin_set_diff0'([],A,[]):-['$neck_cut']
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s1))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a3 = a3.dereference();
        if (a3.isSymbol()){
            if (! a3.equals(s1))
                return engine.fail();
        } else if (a3.isVariable()){
            ((VariableTerm) a3).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_$builtin_set_diff0_3_2 extends PRED_$builtin_set_diff0_3 {
    public Predicate exec(Prolog engine) {
    // '$builtin_set_diff0'(A,[],A):-!
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$builtin_set_diff0'(A,[],A):-['$neck_cut']
        a2 = a2.dereference();
        if (a2.isSymbol()){
            if (! a2.equals(s1))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        if (! a1.unify(a3, engine.trail))
            return engine.fail();
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_$builtin_set_diff0_3_3 extends PRED_$builtin_set_diff0_3 {
    public Predicate exec(Prolog engine) {
    // '$builtin_set_diff0'([A|B],[C|D],E):-A==C,!,'$builtin_set_diff0'(B,D,E)
        Term a1, a2, a3, a4, a5, a6, a7, a8;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$builtin_set_diff0'([A|B],[C|D],E):-['$get_level'(F),'$equality_of_term'(A,C),'$cut'(F),'$builtin_set_diff0'(B,D,E)]
        a1 = a1.dereference();
        if (a1.isList()){
            Term[] args = {((ListTerm)a1).car(), ((ListTerm)a1).cdr()};
            a4 = args[0];
            a5 = args[1];
        } else if (a1.isVariable()){
            a4 = new VariableTerm(engine);
            a5 = new VariableTerm(engine);
            ((VariableTerm) a1).bind(new ListTerm(a4, a5), engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isList()){
            Term[] args = {((ListTerm)a2).car(), ((ListTerm)a2).cdr()};
            a6 = args[0];
            a7 = args[1];
        } else if (a2.isVariable()){
            a6 = new VariableTerm(engine);
            a7 = new VariableTerm(engine);
            ((VariableTerm) a2).bind(new ListTerm(a6, a7), engine.trail);
        } else {
            return engine.fail();
        }
        a8 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(8))
        if (! a8.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $equality_of_term(a(4),a(6))
        a4 = a4.dereference();
        a6 = a6.dereference();
        if (! a4.equals(a6)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(8))
        a8 = a8.dereference();
        if (! a8.isInteger()) {
            throw new IllegalTypeException("integer", a8);
        } else {
            engine.cut(((IntegerTerm) a8).intValue());
        }
        //END inline expansion
        engine.aregs[1] = a5;
        engine.aregs[2] = a7;
        engine.aregs[3] = a3;
        engine.cont = cont;
        return _$builtin_set_diff0_3_top;
    }
}

class PRED_$builtin_set_diff0_3_4 extends PRED_$builtin_set_diff0_3 {
    public Predicate exec(Prolog engine) {
    // '$builtin_set_diff0'([A|B],[C|D],[A|E]):-A@<C,!,'$builtin_set_diff0'(B,[C|D],E)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$builtin_set_diff0'([A|B],[C|D],[A|E]):-['$get_level'(F),'$before'(A,C),'$cut'(F),'$builtin_set_diff0'(B,[C|D],E)]
        a1 = a1.dereference();
        if (a1.isList()){
            Term[] args = {((ListTerm)a1).car(), ((ListTerm)a1).cdr()};
            a4 = args[0];
            a5 = args[1];
        } else if (a1.isVariable()){
            a4 = new VariableTerm(engine);
            a5 = new VariableTerm(engine);
            ((VariableTerm) a1).bind(new ListTerm(a4, a5), engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isList()){
            Term[] args = {((ListTerm)a2).car(), ((ListTerm)a2).cdr()};
            a6 = args[0];
            a7 = args[1];
        } else if (a2.isVariable()){
            a6 = new VariableTerm(engine);
            a7 = new VariableTerm(engine);
            ((VariableTerm) a2).bind(new ListTerm(a6, a7), engine.trail);
        } else {
            return engine.fail();
        }
        a3 = a3.dereference();
        if (a3.isList()){
            Term[] args = {((ListTerm)a3).car(), ((ListTerm)a3).cdr()};
            if (! a4.unify(args[0], engine.trail))
                return engine.fail();
            a8 = args[1];
        } else if (a3.isVariable()){
            a8 = new VariableTerm(engine);
            ((VariableTerm) a3).bind(new ListTerm(a4, a8), engine.trail);
        } else {
            return engine.fail();
        }
        a9 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(9))
        if (! a9.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $before(a(4),a(6))
        a4 = a4.dereference();
        a6 = a6.dereference();
        if (a4.compareTo(a6) >= 0) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(9))
        a9 = a9.dereference();
        if (! a9.isInteger()) {
            throw new IllegalTypeException("integer", a9);
        } else {
            engine.cut(((IntegerTerm) a9).intValue());
        }
        //END inline expansion
        a10 = new ListTerm(a6, a7);
        engine.aregs[1] = a5;
        engine.aregs[2] = a10;
        engine.aregs[3] = a8;
        engine.cont = cont;
        return _$builtin_set_diff0_3_top;
    }
}

class PRED_$builtin_set_diff0_3_5 extends PRED_$builtin_set_diff0_3 {
    public Predicate exec(Prolog engine) {
    // '$builtin_set_diff0'([A|B],[C|D],[C|E]):-'$builtin_set_diff0'([A|B],D,[C|E])
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$builtin_set_diff0'([A|B],[C|D],[C|E]):-['$builtin_set_diff0'([A|B],D,[C|E])]
        a1 = a1.dereference();
        if (a1.isList()){
            Term[] args = {((ListTerm)a1).car(), ((ListTerm)a1).cdr()};
            a4 = args[0];
            a5 = args[1];
        } else if (a1.isVariable()){
            a4 = new VariableTerm(engine);
            a5 = new VariableTerm(engine);
            ((VariableTerm) a1).bind(new ListTerm(a4, a5), engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isList()){
            Term[] args = {((ListTerm)a2).car(), ((ListTerm)a2).cdr()};
            a6 = args[0];
            a7 = args[1];
        } else if (a2.isVariable()){
            a6 = new VariableTerm(engine);
            a7 = new VariableTerm(engine);
            ((VariableTerm) a2).bind(new ListTerm(a6, a7), engine.trail);
        } else {
            return engine.fail();
        }
        a3 = a3.dereference();
        if (a3.isList()){
            Term[] args = {((ListTerm)a3).car(), ((ListTerm)a3).cdr()};
            if (! a6.unify(args[0], engine.trail))
                return engine.fail();
            a8 = args[1];
        } else if (a3.isVariable()){
            a8 = new VariableTerm(engine);
            ((VariableTerm) a3).bind(new ListTerm(a6, a8), engine.trail);
        } else {
            return engine.fail();
        }
        a9 = new ListTerm(a4, a5);
        a10 = new ListTerm(a6, a8);
        engine.aregs[1] = a9;
        engine.aregs[2] = a7;
        engine.aregs[3] = a10;
        engine.cont = cont;
        return _$builtin_set_diff0_3_top;
    }
}
