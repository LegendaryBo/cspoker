<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" 
	backgroundImage="images/table1.jpg" width="750" height="670" xmlns:views="views.*" creationComplete="init()">
	<mx:Script>
		<![CDATA[
			import mx.effects.IAbstractEffect;
			import models.player.Player;
			import models.cards.CardDeck;
			import models.chips.ChipStack;
			import models.table.TableModel;
			import mx.core.UIComponent;
			import models.lobby.DataGridRow;
			import models.*;
			import mx.controls.Image;
			
			
			import views.*;
			import models.utils.TweenLite;
			
			import mx.managers.PopUpManager;
			
			public var tableId:int = -1;
			public var tableItem:DataGridRow;
			
			public var tableModel:TableModel;
			
			
			public var cardLocations:Array;
			public var dealerButtonLocations:Array;
			public var betLocations:Array;
			public var flopCardLocations:Array;
			public var seatLocations:Array;
			
			public var tablePermItemsContainer:UIComponent;
			public var tableTempItemsContainer:UIComponent;
			
			public var flopCard0:CardDeck;
			public var flopCard1:CardDeck;
			public var flopCard2:CardDeck;
			public var flopCard3:CardDeck;
			public var flopCard4:CardDeck;
			
			public var spotLight:SpotLight;
			
			
			public var tableInitialized:Boolean = false;
			
			public var pot:ChipStack;
			public var tableObj:Object;
			
			public function init():void{
				
				tablePermItemsContainer = new UIComponent();
            	addChild(tablePermItemsContainer);
            	tableTempItemsContainer = new UIComponent();
            	addChild(tableTempItemsContainer);
				cardLocations = [cardLocation0, cardLocation1, cardLocation2, cardLocation3, cardLocation4, cardLocation5, cardLocation6, cardLocation7, cardLocation8, cardLocation9];
            	dealerButtonLocations = [dealerButton0, dealerButton1, dealerButton2, dealerButton3, dealerButton4, dealerButton5, dealerButton6, dealerButton7, dealerButton8, dealerButton9];
            	betLocations = [betLocation0, betLocation1, betLocation2, betLocation3, betLocation4, betLocation5, betLocation6, betLocation7, betLocation8, betLocation9];
           		flopCardLocations = [flop0, flop1, flop2, flop3, flop4];
           		seatLocations = [seat0, seat1, seat2, seat3, seat4, seat5, seat6, seat7, seat8, seat9];
           		pot = new ChipStack(potLocation);
           		pot.x = potLocation.x;
           		pot.y = potLocation.y;
           		
           		this.tableModel = new TableModel(this, seatLocations, pot);
           		
           		seat0.init(this, this.tableModel, 0, betLocation0, cardLocation0);
            	seat1.init(this, this.tableModel, 1, betLocation1, cardLocation1);
           	 	seat2.init(this, this.tableModel, 2, betLocation2, cardLocation2);
           	 	seat3.init(this, this.tableModel, 3, betLocation3, cardLocation3);
            	seat4.init(this, this.tableModel, 4, betLocation4, cardLocation4);
            	seat5.init(this, this.tableModel, 5, betLocation5, cardLocation5);
            	seat6.init(this, this.tableModel, 6, betLocation6, cardLocation6);
            	seat7.init(this, this.tableModel, 7, betLocation7, cardLocation7);
            	seat8.init(this, this.tableModel, 8, betLocation8, cardLocation8);
            	seat9.init(this, this.tableModel, 9, betLocation9, cardLocation9);
            	
            	tableInitialized = true;
            	onTableLoadStart();
            	
            	flopCard0 = new CardDeck(flop0);
            	flopCard1 = new CardDeck(flop1);
            	flopCard2 = new CardDeck(flop2);
            	flopCard3 = new CardDeck(flop3);
            	flopCard4 = new CardDeck(flop4);
            	
            	spotLight = new SpotLight(this.parentApplication.width / 2, this.parentApplication.height / 2);
            	spotLight.visible = false;
            	tableTempItemsContainer.addChild(spotLight);
            	
            	this.tableModel.loadGameStateFromDetailedTable(this.tableObj);
			}
			
			
			public function cleanUpTable():void{
				/* cleans up visual elements */
				spotLight.hideSpotLight();
				dealerButton.hideDealerButton();
				
				// set each seat back to nothing.
				this.hideFlopCards();
				
				// hide pot:
				this.pot.clearStack();
				
				// call for data to be cleaned up.
				this.tableModel.cleanUpTableData();
			}
			
			public function hideFlopCards():void{
				flopCard0.clearCard();
				flopCard1.clearCard();
				flopCard2.clearCard();
				flopCard3.clearCard();
				flopCard4.clearCard();
			}
			
			
			public function getSeatById(seatId:int):Seat{
				if(seatId >= 0 && seatId < 10){
					return seatLocations[seatId];
				}else{
					return null;
				}
			}
			
			private function leaveGameClicked():void{
				trace("leaveGameClicked -> table:" + tableId);
				Main.serverConnection.csLeaveTableAction(tableId);
				Main.showLobby();
				cleanTableUpLeaveRoom();
				Main.lobby.gamesDG.refreshGames();
			}
			
			
			
			public function endInit():void{
				init();
			}
			
			public function loadTableInfo(tableItemPassed:DataGridRow):void{
				tableItem = tableItemPassed;
			}
			
			public function setTableId(tableId:int):void{
				this.tableId = tableId;
			}
			
			public function receiveJoinTableSuccess(tableId:int):void{
				Main.showTable();
				
				trace("Table.receiveJoinTableSuccess...");
				
				if(tableInitialized == true){
					onTableLoadStart();
				}
				
				Main.serverConnection.csGetPlayerIdAction();
				
				var detailedTables:Dictionary = Main.detailedTables;
				var tableObj:Object = detailedTables[int(tableId)];
				this.tableObj = tableObj;
				
				if(this.tableModel != null) this.tableModel.loadGameStateFromDetailedTable(this.tableObj);
				
				
			}
			
			public function onTableLoadStart():void{
				if(tableItem == null) return;
				if(tableItem.playersObj != null){
					var id:int = -1;
					var seatId:int = -1;
					// load players list if there are any...
					if(tableItem.playersObj.hasOwnProperty("name")){
						seatId = tableItem.playersObj.seatId;
						getSeatById(seatId).receiveSitIn(tableItem.playersObj);
					}else{
						for each(var player:Object in tableItem.playersObj){
							id = player.id;
							seatId = player.seatId;
							trace("sitInEvent received!!! Seat:" + String(seatId) + "player: " + String(player));
							getSeatById(seatId).receiveSitIn(player);
						}
					}
				}
			}
			
			public function chipsToPot():void{
				for each(var seat:Seat in seatLocations){
					if(seat.userName != null) seat.sendChipsToPot(this.potLocation);
					
				}		
			}
			
			public function dealFlopCards(cards:Object):void{
				trace("dealing flop cards: " + cards);
				var tempCard1:String = cards[0];
				var tempCard2:String = cards[1];
				var tempCard3:String = cards[2];
				flopCard0.calculateCardGraphics(tempCard1, Config.FLOPCARD_WIDTH,Config.FLOPCARD_HEIGHT,0,0);
				flopCard1.calculateCardGraphics(tempCard2, Config.FLOPCARD_WIDTH,Config.FLOPCARD_HEIGHT,0,0);
				flopCard2.calculateCardGraphics(tempCard3, Config.FLOPCARD_WIDTH,Config.FLOPCARD_HEIGHT,0,0);
				return;
			}
			
			public function dealTurnCard(card:String):void{
				trace("dealing turn card: " + card);
				var tempCard1:String = card;
				flopCard3.calculateCardGraphics(tempCard1, Config.FLOPCARD_WIDTH,Config.FLOPCARD_HEIGHT,0,0);
				return;
			}
			
			public function dealRiverCard(card:String):void{
				trace("dealing river card: " + card);
				var tempCard1:String = card;
				flopCard4.calculateCardGraphics(tempCard1, Config.FLOPCARD_WIDTH,Config.FLOPCARD_HEIGHT,0,0);
				return;	
			}
			
			public function showBuyInDialog(seat:Seat):void{
				trace("showBuyInDialog clicked!!! from: " + seat.id);
				var buyInBox:BuyInDialog = new BuyInDialog();
				buyInBox.setBuyInSeatId(seat.seatNumber);
        		PopUpManager.addPopUp(buyInBox, this, true);
        		buyInBox.x = (this.parentApplication.width / 2) - 150;
        		buyInBox.y = (this.parentApplication.height / 2) - 150;
			}
			
			
			
			public function dealAnimation(seatedPlayers:Object):void{
				trace("deal animation called");
				var startX:int = cardDeck.x;
				var startWidth:int = cardDeck.topCard.width;
				var startHeight:int = cardDeck.topCard.height;
				var startRotation:int = cardDeck.topCard.rotation;
				var startY:int = cardDeck.y;
				var delayCount:Number = .5;
				
				var newCard:Image;
					
				var numberDeal:int = seatedPlayers.length;
				
				var firstCardCount:int = 1;
				function onFinishTween(cardImageUsed:Image):void{
						cardImageUsed.visible = false;
						//delete newCard;
				}
				
				var endX:Number = 0;
				var endY:Number = 0;
				var endRotation:Number = 0;
					
				for each(var x:Player in seatedPlayers){
					
					endX = x.playerSeat.card1.container.x;
					endY = x.playerSeat.card1.container.y;
					endRotation = x.playerSeat.card1.container.rotation;
					
					trace("current seat dealing cards to: " + x.id + " card: " + x.playerSeat.card1.container.x + " , " + x.playerSeat.card1.container.y);
					
					var newName:String = "container"+x+"card1";
					
					newCard = new Image();
					newCard.x = startX;
					newCard.y = startY;
					newCard.width = startWidth;
					newCard.height = startHeight;
					newCard.rotation = startRotation;
					newCard.source = "images/cards/back.png";
					this.addChild(newCard);
					var delay1:int = firstCardCount * .25;
					firstCardCount++;
					
					
					//TweenLite.to(newCard, 1, {alpha:1, x:endX, y:endY, rotation:endRotation, delay:delayCount, visible:false, overwrite:false, onComplete:onFinishTween, onCompleteParams:{newCard:newCard}});
				    TweenLite.to(newCard, 1, {alpha:1, x:endX, y:endY, rotation:endRotation, delay:delayCount, visible:false, overwrite:true});
				
					delayCount = delayCount + .25;
				}
				
				var secondCardCount:int = 1;
				for each(var y:Player in seatedPlayers){
					
					//seatName = seats[x];
					trace("current seat dealing cards to: " + y.id);
					
					endX = y.playerSeat.card1.container.x;
					endY = y.playerSeat.card1.container.y;
					endRotation = y.playerSeat.card1.container.rotation;
					
					
					
					newCard = new Image();
					newCard.x = startX;
					newCard.y = startY;
					newCard.width = startWidth;
					newCard.height = startHeight;
					newCard.rotation = startRotation;
					newCard.source = "images/cards/back.png";
					
					this.addChild(newCard);
					var delay2:int = secondCardCount * .25;
					secondCardCount++;
					
				    TweenLite.to(newCard, 1, {alpha:1, x:endX, y:endY, rotation:endRotation, delay:delayCount, visible:false, overwrite:true});
				
					delayCount = delayCount + .25;
				}
			}
			
			
			
			public function cleanTableUpLeaveRoom():void{
				this.cleanUpTable();
			}
			
			public function dealPocketCards(dealPlayers:Object, cards:Object):void{
				this.dealAnimation(dealPlayers);
				for each(var tempPlayer:Player in dealPlayers){
					var clientSeatId:int = Main.clientSeatId;
					var tempPlayerId:int = tempPlayer.getSeatId();
					var clientSeat:Seat = Main.clientSeat;
					if(tempPlayer.getSeatId() == Main.clientSeatId){
						// deal client cards
						Main.clientSeat.dealPocketCardsClient(cards);
					}else{
						// deal other player's cards
						tempPlayer.playerSeat.dealPocketCardsOpponent();
					}
				}
			}
			
		]]>
	</mx:Script>
	<mx:Button x="0" y="0" label="Back to Lobby" id="btnLeaveGame" click="leaveGameClicked()"/>
	<views:Seat x="480" y="0" id="seat0" seatNumber="0" verticalScrollPolicy="off" horizontalScrollPolicy="off">
	</views:Seat>
	<views:Seat x="636" y="46" id="seat1" seatNumber="1" verticalScrollPolicy="off" horizontalScrollPolicy="off">
	</views:Seat>
	<views:Seat x="668" y="207" id="seat2" seatNumber="2" verticalScrollPolicy="off" horizontalScrollPolicy="off">
	</views:Seat>
	<views:Seat x="617" y="353" id="seat3" seatNumber="3" verticalScrollPolicy="off" horizontalScrollPolicy="off">
	</views:Seat>
	<views:Seat x="458" y="384" id="seat4" seatNumber="4" verticalScrollPolicy="off" horizontalScrollPolicy="off">
	</views:Seat>
	<views:Seat x="214" y="384" id="seat5" seatNumber="5" verticalScrollPolicy="off" horizontalScrollPolicy="off">
	</views:Seat>
	<views:Seat x="54" y="338" id="seat6" seatNumber="6" verticalScrollPolicy="off" horizontalScrollPolicy="off">
	</views:Seat>
	<views:Seat x="0" y="207" id="seat7" seatNumber="7" verticalScrollPolicy="off" horizontalScrollPolicy="off">
	</views:Seat>
	<views:Seat x="24" y="46" id="seat8" seatNumber="8" verticalScrollPolicy="off" horizontalScrollPolicy="off">
	</views:Seat>
	<views:Seat x="195" y="0" id="seat9" seatNumber="9" verticalScrollPolicy="off" horizontalScrollPolicy="off">
	</views:Seat>
	<mx:Canvas x="436" y="84" id="betLocation0" />
	<mx:Canvas x="596" y="95" id="betLocation1" />
	<mx:Canvas x="636" y="199" id="betLocation2" />
	<mx:Canvas x="582" y="377" id="betLocation3" />
	<mx:Canvas x="428" y="382" id="betLocation4" />
	<mx:Canvas x="301" y="379" id="betLocation5" />
	<mx:Canvas x="137" y="376" id="betLocation6" />
	<mx:Canvas x="85" y="203" id="betLocation7" />
	<mx:Canvas x="121" y="102" id="betLocation8" />
	<mx:Canvas x="302" y="82" id="betLocation9" />
	
	<mx:Canvas x="480" y="115" id="cardLocation0" />
	<mx:Canvas x="565" y="145" id="cardLocation1" />
	<mx:Canvas x="596" y="246" id="cardLocation2" />
	<mx:Canvas x="568" y="301" id="cardLocation3" />
	<mx:Canvas x="458" y="328" id="cardLocation4" />
	<mx:Canvas x="223" y="327" id="cardLocation5" />
	<mx:Canvas x="135" y="307" id="cardLocation6" />
	<mx:Canvas x="85" y="239" id="cardLocation7" />
	<mx:Canvas x="108" y="142" id="cardLocation8" />
	<mx:Canvas x="234" y="121" id="cardLocation9" />
	
	<mx:Canvas x="451" y="121" width="20" height="20" id="dealerButton0" />
	<mx:Canvas x="649.55" y="160" width="25" height="25" id="dealerButton1" />
	<mx:Canvas x="647.55" y="291.55" width="25" height="25" id="dealerButton2" />
	<mx:Canvas x="567.95" y="353" width="25" height="25" id="dealerButton3" />
	<mx:Canvas x="428.5" y="349" width="25" height="25" id="dealerButton4" />
	<mx:Canvas x="301.55" y="349" width="25" height="25" id="dealerButton5" />
	<mx:Canvas x="137" y="349" width="25" height="25" id="dealerButton6" />
	<mx:Canvas x="80.05" y="295.55" width="25" height="25" id="dealerButton7" />
	<mx:Canvas x="74.4" y="160" width="25" height="25" id="dealerButton8" />
	<mx:Canvas x="201.45" y="117.5" width="25" height="25" id="dealerButton9" />
	<mx:Canvas x="235.9" y="207" id="flop0">
	</mx:Canvas>
	<mx:Canvas x="291.45" y="207" id="flop1">
	</mx:Canvas>
	<mx:Canvas x="347.05" y="207" id="flop2">
	</mx:Canvas>
	<mx:Canvas x="403.65" y="207" id="flop3">
	</mx:Canvas>
	<mx:Canvas x="459.2" y="207" id="flop4">
	</mx:Canvas>
	<mx:Canvas x="403.65" y="280" id="potLocation">
	</mx:Canvas>
	<views:GamePanel id="gamePanel"  x="281.1" y="561" width="187.75" height="98"/>
	<views:DealerBox id="dealerBox"  x="4" y="522"/>
	<views:PlayerChatBox id="playerChatBox"  x="486" y="522"/>
	<views:DealerButton id="dealerButton" x="400" y="400" visible="false" />
	<views:DealerCardDeck id="cardDeck" x="407.25" y="98.25" />
</mx:Canvas>
