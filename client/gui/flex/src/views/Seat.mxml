<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="82" height="110" alpha="1.0" currentState="empty">
	<mx:states>
		<mx:State name="empty">
			<mx:SetStyle name="backgroundAlpha" value="0.0"/>
			<mx:SetStyle name="borderColor" value="#FFFFFF"/>
			<mx:SetStyle name="borderStyle" value="none"/>
		</mx:State>
		<mx:State name="filledSeat">
			<mx:RemoveChild target="{image1}"/>
			<mx:SetStyle name="borderStyle" value="solid"/>
			<mx:SetStyle name="borderThickness" value="3"/>
			<mx:SetStyle name="cornerRadius" value="11"/>
			<mx:SetStyle name="themeColor" value="#6C6C6C"/>
			<mx:SetStyle name="borderColor" value="#6F6F6F"/>
			<mx:AddChild position="lastChild">
				<mx:Image x="9" y="20" id="userPhoto" maxHeight="60" maxWidth="60" scaleContent="true" source="images/seat/noimg.jpg"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:TextArea x="6" y="62" id="userName" text="User Name" maxChars="7" wordWrap="false" editable="false" enabled="true" fontSize="11" textAlign="center" selectable="false" width="62" height="24" fontWeight="bold"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:TextArea x="6" y="82" id="numChips" text="$" wordWrap="false" width="62" height="24" fontSize="12" editable="false" enabled="true" textAlign="center" fontWeight="bold" selectable="false"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:TextArea y="15" alpha="0.8" text="" visible="false" id="overlayText" styleName="overlayTextStyle"/>
			</mx:AddChild>
		</mx:State>
	</mx:states>
	<mx:Style>
		.overlayTextStyle{
			font-color:"0x0000FF";
			font-size:17;
			vertical-align:middle;
			horizontal-align:center;	
			border-alpha:0;
			border-thickness:5;
			border-style:solid;
			border-color:grey;
			
		}
	</mx:Style>
	<mx:Script>
		<![CDATA[
			import mx.controls.Text;
			import mx.core.FontAsset;
			import models.cards.CardDeck;
			import mx.collections.ArrayCollection;
			import models.table.SeatModel;
			import models.table.TableModel;
			import mx.core.UIComponent;
			import models.player.Player;
			import models.chips.ChipStack;
			
			import flash.filters.DropShadowFilter;  
			
			import models.utils.*;
			import models.utils.easing.Back;
			import models.Config;
			
			import models.*;
			import views.*;
			
			private var masterTable:Table;
			private var tableModel:TableModel;
			private var seatModel:SeatModel;
			private var player:Player;
			private var cardsLocation:Canvas;
			
			private var tablePosition:int = -1;
			
			public var betLocation:Canvas;
			public var chipStack:ChipStack = null;
			public var seatItemsContainer:UIComponent;
			
			public var seatNumber:int;
			
			public var card1:CardDeck;
			public var card2:CardDeck;
			
			public var turnTimer:TurnTimer;


			public var chatBubble:ChatBubble;
						

			public function initEnd():void{
			
			}
			
			
			
			public function resetForNewGame():void{
				//this.drawStandUp();
				
				this.hideOverlayText();
				chipStack.clearStack();
				
				this.card1.resetCardForNewGame();
				this.card2.resetCardForNewGame();
				
				card1.clearCard();
				card2.clearCard();
				
				this.hideOverlayText();
				this.chatBubble.clearChatBubbleText();
				return;
			}
			
			
			public function resetForLeaveTable():void{
				
				this.drawStandUp();
				this.resetForNewGame();
				return;
			}
			
			
			public function init(passedTable:Table, passedTableModel:TableModel, passedTablePosition:int, passedBetLocation:Canvas, passedCardsLocation:Canvas):void{
				this.masterTable = passedTable;
				this.tableModel = passedTableModel;
				this.tablePosition = passedTablePosition;
				this.betLocation = passedBetLocation;
				this.seatModel = new SeatModel(this);
				this.player = new Player(this);
				this.cardsLocation = passedCardsLocation;
				
				card1 = new CardDeck(cardsLocation);
				card2 = new CardDeck(cardsLocation);
				
				chipStack = new ChipStack(betLocation);
				
				seatItemsContainer = new UIComponent;
				this.addChildAt(seatItemsContainer, 0);
				
				
				
				chatBubble = new ChatBubble();
				chatBubble.visible = false;
            	//seatItemsContainer.addChild(chatBubble);
            	
            	seatItemsContainer.addChild(chatBubble);
            	chatBubble.y = -5;
            	chatBubble.x = 6;
            	
            	
            	turnTimer = new TurnTimer(1000,30000,null);
				turnTimer.x = 10;
				turnTimer.y = 4;
				seatItemsContainer.addChild(turnTimer);
					
			}


			public function hideChatBubble():void{
				chatBubble.visible = false;
				return;
			}
			
			public function resetSeatForNewRound():void{
				hideChatBubble();
				//this.cardsLocation.visible = true;
				this.alpha = 1.0;
				//this.cardsLocaiton.alpha = 1;
				chatBubble.clearChatBubbleText();
			}
			
			
			public function setChatBubbleText(message:String="", type:String=""):void{
				this.chatBubble.setChatBubbleText(message, type);
			}
			
			
			
			public function showBuyInClicked():void{
				Main.table.showBuyInDialog(this)
			}
			
			public function receiveSitIn(passedPlayerObj:Object):void{
				player.sitInPlayer(passedPlayerObj);
				// player.getAvatar();
				if(passedPlayerObj.id == Main.clientPlayerId){
					Main.clientSeat = this;
				}
				var ds:DropShadowFilter = new DropShadowFilter();  
				ds.distance = 6;  
				ds.alpha = .6;  
				this.filters = [ds];
				drawSitIn();
			}
			
			
			private function drawSitIn():void{
				this.currentState = "filledSeat";
				this.refresh();
			}
			
			public function refresh():void{
				userName.text = player.getPlayerName();
				numChips.text = "$" + String(player.getStackSize());
								
			}
			
			public function sendChipsToPot(potLocation:Canvas):void{
				if(player.getBetChips() > 0){
					var potX:int = Main.table.pot.x;
					var potY:int = Main.table.pot.y;
					TweenLite.to(this.chipStack, 2, {alpha:1, x:potX, y:potY, delay:.5, onComplete:onFinishTween, onCompleteParams:[this.chipStack]});
				}
			}
		
			public function onFinishTween(chipStack:ChipStack):void {
				trace("The tween has finished! (chipStack to pot)");
				chipStack.clearStack();
			}
			
			public function dealPocketCardsClient(cards:Object):void{
				var tempCard1:String = cards[0];
				var tempCard2:String = cards[1];
				card1.cardView.visible = true;
				card2.cardView.visible = true;
				
				card1.calculateCardGraphics(tempCard1, Config.POCKETCARD_WIDTH,Config.POCKETCARD_HEIGHT,0,0);
				card2.calculateCardGraphics(tempCard2, Config.POCKETCARD_WIDTH,Config.POCKETCARD_HEIGHT,0+Config.POCKETCARD_WIDTH - 4,0);
			}
			
			public function dealPocketCardsOpponent():void{
				card1.loadHiddenCard(Config.POCKETCARD_WIDTH,Config.POCKETCARD_HEIGHT,0,0);
				card2.loadHiddenCard(Config.POCKETCARD_WIDTH,Config.POCKETCARD_HEIGHT,0+Config.POCKETCARD_WIDTH - 4,0);
			}
			
			private function drawStandUp():void{
				this.currentState = "empty";
			}
			
			public function chipsToBet(amount:int):void{
				if(player.getBetChips() > 0){
					chipStack.addToStack(amount);
					
				}else{
					//chipStack = new ChipStack(betLocation);
					chipStack.calculateGraphics(amount);
					
				}
			}
			
			public function showOpponentCards(handCards:Object):void{
				this.dealPocketCardsClient(handCards);
			}
			
			public function showFold():void{
				/* TODO:  fill in graphics changes for fold */
				trace("showing fold...");
				//TweenLite.to(this, 3, {alpha:.40, delay:.35});
				//TweenLite.to(this.card1.cardView, 3, {alpha:0.35, rotation:45, delay:.5});
				//TweenLite.to(this.card2.cardView, 3, {alpha:0.35, rotation:45, delay:.5});
				
				
				this.alpha = .4;
				this.card1.cardView.alpha = .35;
				this.card2.cardView.alpha = .35;
				this.card1.cardView.rotation = 45;
				this.card2.cardView.rotation = 45;
				
				this.showOverlayText("FOLD");
			}
			
			
			public function showAllIn():void{
				/* TODO: make graphics changes for allIn playersd */
				this.showOverlayText("ALL IN");
			}
			
			public function showOverlayText(text:String):void{
				this.overlayText.visible = true;
				this.overlayText.text = text;
			
			}
			
			public function hideOverlayText():void{
				this.overlayText.visible = false;
				this.alpha = 1.0;
				this.cardsLocation.alpha = 1.0;
			}
			
			
			
		]]>
	</mx:Script>
	<mx:Image source="images/seat/seatbutton_forflex.jpg" width="82" height="22" useHandCursor="true" click="showBuyInClicked()" verticalCenter="-4" horizontalCenter="0" id="image1"/>
</mx:Canvas>
